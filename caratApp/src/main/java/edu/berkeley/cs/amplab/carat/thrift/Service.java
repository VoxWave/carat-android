/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.amplab.carat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-6-20")
public class Service implements org.apache.thrift.TBase<Service, Service._Fields>, java.io.Serializable, Cloneable, Comparable<Service> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Service");

  private static final org.apache.thrift.protocol.TField PROCESS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("processName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SLEEPING_FIELD_DESC = new org.apache.thrift.protocol.TField("sleeping", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField FOREGROUND_FIELD_DESC = new org.apache.thrift.protocol.TField("foreground", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField U_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CRASH_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("crashCount", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_ACTIVITY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastActivityTime", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServiceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServiceTupleSchemeFactory());
  }

  public String processName; // optional
  public int pId; // optional
  public boolean sleeping; // optional
  public boolean foreground; // optional
  public int uId; // optional
  public int crashCount; // optional
  public double lastActivityTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROCESS_NAME((short)1, "processName"),
    P_ID((short)2, "pId"),
    SLEEPING((short)3, "sleeping"),
    FOREGROUND((short)4, "foreground"),
    U_ID((short)5, "uId"),
    CRASH_COUNT((short)6, "crashCount"),
    LAST_ACTIVITY_TIME((short)7, "lastActivityTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROCESS_NAME
          return PROCESS_NAME;
        case 2: // P_ID
          return P_ID;
        case 3: // SLEEPING
          return SLEEPING;
        case 4: // FOREGROUND
          return FOREGROUND;
        case 5: // U_ID
          return U_ID;
        case 6: // CRASH_COUNT
          return CRASH_COUNT;
        case 7: // LAST_ACTIVITY_TIME
          return LAST_ACTIVITY_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __SLEEPING_ISSET_ID = 1;
  private static final int __FOREGROUND_ISSET_ID = 2;
  private static final int __UID_ISSET_ID = 3;
  private static final int __CRASHCOUNT_ISSET_ID = 4;
  private static final int __LASTACTIVITYTIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PROCESS_NAME,_Fields.P_ID,_Fields.SLEEPING,_Fields.FOREGROUND,_Fields.U_ID,_Fields.CRASH_COUNT,_Fields.LAST_ACTIVITY_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROCESS_NAME, new org.apache.thrift.meta_data.FieldMetaData("processName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLEEPING, new org.apache.thrift.meta_data.FieldMetaData("sleeping", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FOREGROUND, new org.apache.thrift.meta_data.FieldMetaData("foreground", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.U_ID, new org.apache.thrift.meta_data.FieldMetaData("uId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CRASH_COUNT, new org.apache.thrift.meta_data.FieldMetaData("crashCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_ACTIVITY_TIME, new org.apache.thrift.meta_data.FieldMetaData("lastActivityTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Service.class, metaDataMap);
  }

  public Service() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Service(Service other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProcessName()) {
      this.processName = other.processName;
    }
    this.pId = other.pId;
    this.sleeping = other.sleeping;
    this.foreground = other.foreground;
    this.uId = other.uId;
    this.crashCount = other.crashCount;
    this.lastActivityTime = other.lastActivityTime;
  }

  public Service deepCopy() {
    return new Service(this);
  }

  @Override
  public void clear() {
    this.processName = null;
    setPIdIsSet(false);
    this.pId = 0;
    setSleepingIsSet(false);
    this.sleeping = false;
    setForegroundIsSet(false);
    this.foreground = false;
    setUIdIsSet(false);
    this.uId = 0;
    setCrashCountIsSet(false);
    this.crashCount = 0;
    setLastActivityTimeIsSet(false);
    this.lastActivityTime = 0.0;
  }

  public String getProcessName() {
    return this.processName;
  }

  public Service setProcessName(String processName) {
    this.processName = processName;
    return this;
  }

  public void unsetProcessName() {
    this.processName = null;
  }

  /** Returns true if field processName is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessName() {
    return this.processName != null;
  }

  public void setProcessNameIsSet(boolean value) {
    if (!value) {
      this.processName = null;
    }
  }

  public int getPId() {
    return this.pId;
  }

  public Service setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public boolean isSleeping() {
    return this.sleeping;
  }

  public Service setSleeping(boolean sleeping) {
    this.sleeping = sleeping;
    setSleepingIsSet(true);
    return this;
  }

  public void unsetSleeping() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEEPING_ISSET_ID);
  }

  /** Returns true if field sleeping is set (has been assigned a value) and false otherwise */
  public boolean isSetSleeping() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEEPING_ISSET_ID);
  }

  public void setSleepingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEEPING_ISSET_ID, value);
  }

  public boolean isForeground() {
    return this.foreground;
  }

  public Service setForeground(boolean foreground) {
    this.foreground = foreground;
    setForegroundIsSet(true);
    return this;
  }

  public void unsetForeground() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FOREGROUND_ISSET_ID);
  }

  /** Returns true if field foreground is set (has been assigned a value) and false otherwise */
  public boolean isSetForeground() {
    return EncodingUtils.testBit(__isset_bitfield, __FOREGROUND_ISSET_ID);
  }

  public void setForegroundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FOREGROUND_ISSET_ID, value);
  }

  public int getUId() {
    return this.uId;
  }

  public Service setUId(int uId) {
    this.uId = uId;
    setUIdIsSet(true);
    return this;
  }

  public void unsetUId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uId is set (has been assigned a value) and false otherwise */
  public boolean isSetUId() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public int getCrashCount() {
    return this.crashCount;
  }

  public Service setCrashCount(int crashCount) {
    this.crashCount = crashCount;
    setCrashCountIsSet(true);
    return this;
  }

  public void unsetCrashCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CRASHCOUNT_ISSET_ID);
  }

  /** Returns true if field crashCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCrashCount() {
    return EncodingUtils.testBit(__isset_bitfield, __CRASHCOUNT_ISSET_ID);
  }

  public void setCrashCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CRASHCOUNT_ISSET_ID, value);
  }

  public double getLastActivityTime() {
    return this.lastActivityTime;
  }

  public Service setLastActivityTime(double lastActivityTime) {
    this.lastActivityTime = lastActivityTime;
    setLastActivityTimeIsSet(true);
    return this;
  }

  public void unsetLastActivityTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTACTIVITYTIME_ISSET_ID);
  }

  /** Returns true if field lastActivityTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastActivityTime() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTACTIVITYTIME_ISSET_ID);
  }

  public void setLastActivityTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTACTIVITYTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROCESS_NAME:
      if (value == null) {
        unsetProcessName();
      } else {
        setProcessName((String)value);
      }
      break;

    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((Integer)value);
      }
      break;

    case SLEEPING:
      if (value == null) {
        unsetSleeping();
      } else {
        setSleeping((Boolean)value);
      }
      break;

    case FOREGROUND:
      if (value == null) {
        unsetForeground();
      } else {
        setForeground((Boolean)value);
      }
      break;

    case U_ID:
      if (value == null) {
        unsetUId();
      } else {
        setUId((Integer)value);
      }
      break;

    case CRASH_COUNT:
      if (value == null) {
        unsetCrashCount();
      } else {
        setCrashCount((Integer)value);
      }
      break;

    case LAST_ACTIVITY_TIME:
      if (value == null) {
        unsetLastActivityTime();
      } else {
        setLastActivityTime((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROCESS_NAME:
      return getProcessName();

    case P_ID:
      return Integer.valueOf(getPId());

    case SLEEPING:
      return Boolean.valueOf(isSleeping());

    case FOREGROUND:
      return Boolean.valueOf(isForeground());

    case U_ID:
      return Integer.valueOf(getUId());

    case CRASH_COUNT:
      return Integer.valueOf(getCrashCount());

    case LAST_ACTIVITY_TIME:
      return Double.valueOf(getLastActivityTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROCESS_NAME:
      return isSetProcessName();
    case P_ID:
      return isSetPId();
    case SLEEPING:
      return isSetSleeping();
    case FOREGROUND:
      return isSetForeground();
    case U_ID:
      return isSetUId();
    case CRASH_COUNT:
      return isSetCrashCount();
    case LAST_ACTIVITY_TIME:
      return isSetLastActivityTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Service)
      return this.equals((Service)that);
    return false;
  }

  public boolean equals(Service that) {
    if (that == null)
      return false;

    boolean this_present_processName = true && this.isSetProcessName();
    boolean that_present_processName = true && that.isSetProcessName();
    if (this_present_processName || that_present_processName) {
      if (!(this_present_processName && that_present_processName))
        return false;
      if (!this.processName.equals(that.processName))
        return false;
    }

    boolean this_present_pId = true && this.isSetPId();
    boolean that_present_pId = true && that.isSetPId();
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_sleeping = true && this.isSetSleeping();
    boolean that_present_sleeping = true && that.isSetSleeping();
    if (this_present_sleeping || that_present_sleeping) {
      if (!(this_present_sleeping && that_present_sleeping))
        return false;
      if (this.sleeping != that.sleeping)
        return false;
    }

    boolean this_present_foreground = true && this.isSetForeground();
    boolean that_present_foreground = true && that.isSetForeground();
    if (this_present_foreground || that_present_foreground) {
      if (!(this_present_foreground && that_present_foreground))
        return false;
      if (this.foreground != that.foreground)
        return false;
    }

    boolean this_present_uId = true && this.isSetUId();
    boolean that_present_uId = true && that.isSetUId();
    if (this_present_uId || that_present_uId) {
      if (!(this_present_uId && that_present_uId))
        return false;
      if (this.uId != that.uId)
        return false;
    }

    boolean this_present_crashCount = true && this.isSetCrashCount();
    boolean that_present_crashCount = true && that.isSetCrashCount();
    if (this_present_crashCount || that_present_crashCount) {
      if (!(this_present_crashCount && that_present_crashCount))
        return false;
      if (this.crashCount != that.crashCount)
        return false;
    }

    boolean this_present_lastActivityTime = true && this.isSetLastActivityTime();
    boolean that_present_lastActivityTime = true && that.isSetLastActivityTime();
    if (this_present_lastActivityTime || that_present_lastActivityTime) {
      if (!(this_present_lastActivityTime && that_present_lastActivityTime))
        return false;
      if (this.lastActivityTime != that.lastActivityTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_processName = true && (isSetProcessName());
    list.add(present_processName);
    if (present_processName)
      list.add(processName);

    boolean present_pId = true && (isSetPId());
    list.add(present_pId);
    if (present_pId)
      list.add(pId);

    boolean present_sleeping = true && (isSetSleeping());
    list.add(present_sleeping);
    if (present_sleeping)
      list.add(sleeping);

    boolean present_foreground = true && (isSetForeground());
    list.add(present_foreground);
    if (present_foreground)
      list.add(foreground);

    boolean present_uId = true && (isSetUId());
    list.add(present_uId);
    if (present_uId)
      list.add(uId);

    boolean present_crashCount = true && (isSetCrashCount());
    list.add(present_crashCount);
    if (present_crashCount)
      list.add(crashCount);

    boolean present_lastActivityTime = true && (isSetLastActivityTime());
    list.add(present_lastActivityTime);
    if (present_lastActivityTime)
      list.add(lastActivityTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(Service other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProcessName()).compareTo(other.isSetProcessName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processName, other.processName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSleeping()).compareTo(other.isSetSleeping());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSleeping()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sleeping, other.sleeping);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForeground()).compareTo(other.isSetForeground());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForeground()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.foreground, other.foreground);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUId()).compareTo(other.isSetUId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uId, other.uId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrashCount()).compareTo(other.isSetCrashCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrashCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crashCount, other.crashCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastActivityTime()).compareTo(other.isSetLastActivityTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastActivityTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastActivityTime, other.lastActivityTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Service(");
    boolean first = true;

    if (isSetProcessName()) {
      sb.append("processName:");
      if (this.processName == null) {
        sb.append("null");
      } else {
        sb.append(this.processName);
      }
      first = false;
    }
    if (isSetPId()) {
      if (!first) sb.append(", ");
      sb.append("pId:");
      sb.append(this.pId);
      first = false;
    }
    if (isSetSleeping()) {
      if (!first) sb.append(", ");
      sb.append("sleeping:");
      sb.append(this.sleeping);
      first = false;
    }
    if (isSetForeground()) {
      if (!first) sb.append(", ");
      sb.append("foreground:");
      sb.append(this.foreground);
      first = false;
    }
    if (isSetUId()) {
      if (!first) sb.append(", ");
      sb.append("uId:");
      sb.append(this.uId);
      first = false;
    }
    if (isSetCrashCount()) {
      if (!first) sb.append(", ");
      sb.append("crashCount:");
      sb.append(this.crashCount);
      first = false;
    }
    if (isSetLastActivityTime()) {
      if (!first) sb.append(", ");
      sb.append("lastActivityTime:");
      sb.append(this.lastActivityTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceStandardSchemeFactory implements SchemeFactory {
    public ServiceStandardScheme getScheme() {
      return new ServiceStandardScheme();
    }
  }

  private static class ServiceStandardScheme extends StandardScheme<Service> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Service struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROCESS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processName = iprot.readString();
              struct.setProcessNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLEEPING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sleeping = iprot.readBool();
              struct.setSleepingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FOREGROUND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.foreground = iprot.readBool();
              struct.setForegroundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // U_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.uId = iprot.readI32();
              struct.setUIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CRASH_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.crashCount = iprot.readI32();
              struct.setCrashCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_ACTIVITY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lastActivityTime = iprot.readDouble();
              struct.setLastActivityTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Service struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.processName != null) {
        if (struct.isSetProcessName()) {
          oprot.writeFieldBegin(PROCESS_NAME_FIELD_DESC);
          oprot.writeString(struct.processName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPId()) {
        oprot.writeFieldBegin(P_ID_FIELD_DESC);
        oprot.writeI32(struct.pId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSleeping()) {
        oprot.writeFieldBegin(SLEEPING_FIELD_DESC);
        oprot.writeBool(struct.sleeping);
        oprot.writeFieldEnd();
      }
      if (struct.isSetForeground()) {
        oprot.writeFieldBegin(FOREGROUND_FIELD_DESC);
        oprot.writeBool(struct.foreground);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUId()) {
        oprot.writeFieldBegin(U_ID_FIELD_DESC);
        oprot.writeI32(struct.uId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCrashCount()) {
        oprot.writeFieldBegin(CRASH_COUNT_FIELD_DESC);
        oprot.writeI32(struct.crashCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastActivityTime()) {
        oprot.writeFieldBegin(LAST_ACTIVITY_TIME_FIELD_DESC);
        oprot.writeDouble(struct.lastActivityTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceTupleSchemeFactory implements SchemeFactory {
    public ServiceTupleScheme getScheme() {
      return new ServiceTupleScheme();
    }
  }

  private static class ServiceTupleScheme extends TupleScheme<Service> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Service struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProcessName()) {
        optionals.set(0);
      }
      if (struct.isSetPId()) {
        optionals.set(1);
      }
      if (struct.isSetSleeping()) {
        optionals.set(2);
      }
      if (struct.isSetForeground()) {
        optionals.set(3);
      }
      if (struct.isSetUId()) {
        optionals.set(4);
      }
      if (struct.isSetCrashCount()) {
        optionals.set(5);
      }
      if (struct.isSetLastActivityTime()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetProcessName()) {
        oprot.writeString(struct.processName);
      }
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetSleeping()) {
        oprot.writeBool(struct.sleeping);
      }
      if (struct.isSetForeground()) {
        oprot.writeBool(struct.foreground);
      }
      if (struct.isSetUId()) {
        oprot.writeI32(struct.uId);
      }
      if (struct.isSetCrashCount()) {
        oprot.writeI32(struct.crashCount);
      }
      if (struct.isSetLastActivityTime()) {
        oprot.writeDouble(struct.lastActivityTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Service struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.processName = iprot.readString();
        struct.setProcessNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sleeping = iprot.readBool();
        struct.setSleepingIsSet(true);
      }
      if (incoming.get(3)) {
        struct.foreground = iprot.readBool();
        struct.setForegroundIsSet(true);
      }
      if (incoming.get(4)) {
        struct.uId = iprot.readI32();
        struct.setUIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.crashCount = iprot.readI32();
        struct.setCrashCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastActivityTime = iprot.readDouble();
        struct.setLastActivityTimeIsSet(true);
      }
    }
  }

}

