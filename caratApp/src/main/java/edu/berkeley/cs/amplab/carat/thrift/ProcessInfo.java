/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.amplab.carat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-02-14")
public class ProcessInfo implements org.apache.thrift.TBase<ProcessInfo, ProcessInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ProcessInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProcessInfo");

  private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField P_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("pName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APPLICATION_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationLabel", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IS_SYSTEM_APP_FIELD_DESC = new org.apache.thrift.protocol.TField("isSystemApp", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IMPORTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("importance", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("versionName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("versionCode", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField APP_SIGNATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("appSignatures", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField INSTALLATION_PKG_FIELD_DESC = new org.apache.thrift.protocol.TField("installationPkg", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PROCESSES_FIELD_DESC = new org.apache.thrift.protocol.TField("processes", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField IGNORING_BATTERY_OPTIMIZATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("ignoringBatteryOptimizations", org.apache.thrift.protocol.TType.BOOL, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProcessInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProcessInfoTupleSchemeFactory();

  public int pId; // optional
  public java.lang.String pName; // optional
  public java.lang.String applicationLabel; // optional
  public boolean isSystemApp; // optional
  public java.lang.String importance; // optional
  public java.lang.String versionName; // optional
  public int versionCode; // optional
  public java.util.List<java.lang.String> appSignatures; // optional
  public java.lang.String installationPkg; // optional
  public java.util.List<PackageProcess> processes; // optional
  public boolean ignoringBatteryOptimizations; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    P_ID((short)1, "pId"),
    P_NAME((short)2, "pName"),
    APPLICATION_LABEL((short)3, "applicationLabel"),
    IS_SYSTEM_APP((short)4, "isSystemApp"),
    IMPORTANCE((short)5, "importance"),
    VERSION_NAME((short)6, "versionName"),
    VERSION_CODE((short)7, "versionCode"),
    APP_SIGNATURES((short)8, "appSignatures"),
    INSTALLATION_PKG((short)9, "installationPkg"),
    PROCESSES((short)10, "processes"),
    IGNORING_BATTERY_OPTIMIZATIONS((short)11, "ignoringBatteryOptimizations");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // P_ID
          return P_ID;
        case 2: // P_NAME
          return P_NAME;
        case 3: // APPLICATION_LABEL
          return APPLICATION_LABEL;
        case 4: // IS_SYSTEM_APP
          return IS_SYSTEM_APP;
        case 5: // IMPORTANCE
          return IMPORTANCE;
        case 6: // VERSION_NAME
          return VERSION_NAME;
        case 7: // VERSION_CODE
          return VERSION_CODE;
        case 8: // APP_SIGNATURES
          return APP_SIGNATURES;
        case 9: // INSTALLATION_PKG
          return INSTALLATION_PKG;
        case 10: // PROCESSES
          return PROCESSES;
        case 11: // IGNORING_BATTERY_OPTIMIZATIONS
          return IGNORING_BATTERY_OPTIMIZATIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PID_ISSET_ID = 0;
  private static final int __ISSYSTEMAPP_ISSET_ID = 1;
  private static final int __VERSIONCODE_ISSET_ID = 2;
  private static final int __IGNORINGBATTERYOPTIMIZATIONS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.P_ID,_Fields.P_NAME,_Fields.APPLICATION_LABEL,_Fields.IS_SYSTEM_APP,_Fields.IMPORTANCE,_Fields.VERSION_NAME,_Fields.VERSION_CODE,_Fields.APP_SIGNATURES,_Fields.INSTALLATION_PKG,_Fields.PROCESSES,_Fields.IGNORING_BATTERY_OPTIMIZATIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.P_NAME, new org.apache.thrift.meta_data.FieldMetaData("pName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLICATION_LABEL, new org.apache.thrift.meta_data.FieldMetaData("applicationLabel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_SYSTEM_APP, new org.apache.thrift.meta_data.FieldMetaData("isSystemApp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IMPORTANCE, new org.apache.thrift.meta_data.FieldMetaData("importance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_NAME, new org.apache.thrift.meta_data.FieldMetaData("versionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_CODE, new org.apache.thrift.meta_data.FieldMetaData("versionCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.APP_SIGNATURES, new org.apache.thrift.meta_data.FieldMetaData("appSignatures", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.INSTALLATION_PKG, new org.apache.thrift.meta_data.FieldMetaData("installationPkg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESSES, new org.apache.thrift.meta_data.FieldMetaData("processes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PackageProcess.class))));
    tmpMap.put(_Fields.IGNORING_BATTERY_OPTIMIZATIONS, new org.apache.thrift.meta_data.FieldMetaData("ignoringBatteryOptimizations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProcessInfo.class, metaDataMap);
  }

  public ProcessInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProcessInfo(ProcessInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.pId = other.pId;
    if (other.isSetPName()) {
      this.pName = other.pName;
    }
    if (other.isSetApplicationLabel()) {
      this.applicationLabel = other.applicationLabel;
    }
    this.isSystemApp = other.isSystemApp;
    if (other.isSetImportance()) {
      this.importance = other.importance;
    }
    if (other.isSetVersionName()) {
      this.versionName = other.versionName;
    }
    this.versionCode = other.versionCode;
    if (other.isSetAppSignatures()) {
      java.util.List<java.lang.String> __this__appSignatures = new java.util.ArrayList<java.lang.String>(other.appSignatures);
      this.appSignatures = __this__appSignatures;
    }
    if (other.isSetInstallationPkg()) {
      this.installationPkg = other.installationPkg;
    }
    if (other.isSetProcesses()) {
      java.util.List<PackageProcess> __this__processes = new java.util.ArrayList<PackageProcess>(other.processes.size());
      for (PackageProcess other_element : other.processes) {
        __this__processes.add(new PackageProcess(other_element));
      }
      this.processes = __this__processes;
    }
    this.ignoringBatteryOptimizations = other.ignoringBatteryOptimizations;
  }

  public ProcessInfo deepCopy() {
    return new ProcessInfo(this);
  }

  @Override
  public void clear() {
    setPIdIsSet(false);
    this.pId = 0;
    this.pName = null;
    this.applicationLabel = null;
    setIsSystemAppIsSet(false);
    this.isSystemApp = false;
    this.importance = null;
    this.versionName = null;
    setVersionCodeIsSet(false);
    this.versionCode = 0;
    this.appSignatures = null;
    this.installationPkg = null;
    this.processes = null;
    setIgnoringBatteryOptimizationsIsSet(false);
    this.ignoringBatteryOptimizations = false;
  }

  public int getPId() {
    return this.pId;
  }

  public ProcessInfo setPId(int pId) {
    this.pId = pId;
    setPIdIsSet(true);
    return this;
  }

  public void unsetPId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PID_ISSET_ID);
  }

  /** Returns true if field pId is set (has been assigned a value) and false otherwise */
  public boolean isSetPId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PID_ISSET_ID);
  }

  public void setPIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PID_ISSET_ID, value);
  }

  public java.lang.String getPName() {
    return this.pName;
  }

  public ProcessInfo setPName(java.lang.String pName) {
    this.pName = pName;
    return this;
  }

  public void unsetPName() {
    this.pName = null;
  }

  /** Returns true if field pName is set (has been assigned a value) and false otherwise */
  public boolean isSetPName() {
    return this.pName != null;
  }

  public void setPNameIsSet(boolean value) {
    if (!value) {
      this.pName = null;
    }
  }

  public java.lang.String getApplicationLabel() {
    return this.applicationLabel;
  }

  public ProcessInfo setApplicationLabel(java.lang.String applicationLabel) {
    this.applicationLabel = applicationLabel;
    return this;
  }

  public void unsetApplicationLabel() {
    this.applicationLabel = null;
  }

  /** Returns true if field applicationLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationLabel() {
    return this.applicationLabel != null;
  }

  public void setApplicationLabelIsSet(boolean value) {
    if (!value) {
      this.applicationLabel = null;
    }
  }

  public boolean isIsSystemApp() {
    return this.isSystemApp;
  }

  public ProcessInfo setIsSystemApp(boolean isSystemApp) {
    this.isSystemApp = isSystemApp;
    setIsSystemAppIsSet(true);
    return this;
  }

  public void unsetIsSystemApp() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISSYSTEMAPP_ISSET_ID);
  }

  /** Returns true if field isSystemApp is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSystemApp() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISSYSTEMAPP_ISSET_ID);
  }

  public void setIsSystemAppIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISSYSTEMAPP_ISSET_ID, value);
  }

  public java.lang.String getImportance() {
    return this.importance;
  }

  public ProcessInfo setImportance(java.lang.String importance) {
    this.importance = importance;
    return this;
  }

  public void unsetImportance() {
    this.importance = null;
  }

  /** Returns true if field importance is set (has been assigned a value) and false otherwise */
  public boolean isSetImportance() {
    return this.importance != null;
  }

  public void setImportanceIsSet(boolean value) {
    if (!value) {
      this.importance = null;
    }
  }

  public java.lang.String getVersionName() {
    return this.versionName;
  }

  public ProcessInfo setVersionName(java.lang.String versionName) {
    this.versionName = versionName;
    return this;
  }

  public void unsetVersionName() {
    this.versionName = null;
  }

  /** Returns true if field versionName is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionName() {
    return this.versionName != null;
  }

  public void setVersionNameIsSet(boolean value) {
    if (!value) {
      this.versionName = null;
    }
  }

  public int getVersionCode() {
    return this.versionCode;
  }

  public ProcessInfo setVersionCode(int versionCode) {
    this.versionCode = versionCode;
    setVersionCodeIsSet(true);
    return this;
  }

  public void unsetVersionCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSIONCODE_ISSET_ID);
  }

  /** Returns true if field versionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSIONCODE_ISSET_ID);
  }

  public void setVersionCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSIONCODE_ISSET_ID, value);
  }

  public int getAppSignaturesSize() {
    return (this.appSignatures == null) ? 0 : this.appSignatures.size();
  }

  public java.util.Iterator<java.lang.String> getAppSignaturesIterator() {
    return (this.appSignatures == null) ? null : this.appSignatures.iterator();
  }

  public void addToAppSignatures(java.lang.String elem) {
    if (this.appSignatures == null) {
      this.appSignatures = new java.util.ArrayList<java.lang.String>();
    }
    this.appSignatures.add(elem);
  }

  public java.util.List<java.lang.String> getAppSignatures() {
    return this.appSignatures;
  }

  public ProcessInfo setAppSignatures(java.util.List<java.lang.String> appSignatures) {
    this.appSignatures = appSignatures;
    return this;
  }

  public void unsetAppSignatures() {
    this.appSignatures = null;
  }

  /** Returns true if field appSignatures is set (has been assigned a value) and false otherwise */
  public boolean isSetAppSignatures() {
    return this.appSignatures != null;
  }

  public void setAppSignaturesIsSet(boolean value) {
    if (!value) {
      this.appSignatures = null;
    }
  }

  public java.lang.String getInstallationPkg() {
    return this.installationPkg;
  }

  public ProcessInfo setInstallationPkg(java.lang.String installationPkg) {
    this.installationPkg = installationPkg;
    return this;
  }

  public void unsetInstallationPkg() {
    this.installationPkg = null;
  }

  /** Returns true if field installationPkg is set (has been assigned a value) and false otherwise */
  public boolean isSetInstallationPkg() {
    return this.installationPkg != null;
  }

  public void setInstallationPkgIsSet(boolean value) {
    if (!value) {
      this.installationPkg = null;
    }
  }

  public int getProcessesSize() {
    return (this.processes == null) ? 0 : this.processes.size();
  }

  public java.util.Iterator<PackageProcess> getProcessesIterator() {
    return (this.processes == null) ? null : this.processes.iterator();
  }

  public void addToProcesses(PackageProcess elem) {
    if (this.processes == null) {
      this.processes = new java.util.ArrayList<PackageProcess>();
    }
    this.processes.add(elem);
  }

  public java.util.List<PackageProcess> getProcesses() {
    return this.processes;
  }

  public ProcessInfo setProcesses(java.util.List<PackageProcess> processes) {
    this.processes = processes;
    return this;
  }

  public void unsetProcesses() {
    this.processes = null;
  }

  /** Returns true if field processes is set (has been assigned a value) and false otherwise */
  public boolean isSetProcesses() {
    return this.processes != null;
  }

  public void setProcessesIsSet(boolean value) {
    if (!value) {
      this.processes = null;
    }
  }

  public boolean isIgnoringBatteryOptimizations() {
    return this.ignoringBatteryOptimizations;
  }

  public ProcessInfo setIgnoringBatteryOptimizations(boolean ignoringBatteryOptimizations) {
    this.ignoringBatteryOptimizations = ignoringBatteryOptimizations;
    setIgnoringBatteryOptimizationsIsSet(true);
    return this;
  }

  public void unsetIgnoringBatteryOptimizations() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IGNORINGBATTERYOPTIMIZATIONS_ISSET_ID);
  }

  /** Returns true if field ignoringBatteryOptimizations is set (has been assigned a value) and false otherwise */
  public boolean isSetIgnoringBatteryOptimizations() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IGNORINGBATTERYOPTIMIZATIONS_ISSET_ID);
  }

  public void setIgnoringBatteryOptimizationsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IGNORINGBATTERYOPTIMIZATIONS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case P_ID:
      if (value == null) {
        unsetPId();
      } else {
        setPId((java.lang.Integer)value);
      }
      break;

    case P_NAME:
      if (value == null) {
        unsetPName();
      } else {
        setPName((java.lang.String)value);
      }
      break;

    case APPLICATION_LABEL:
      if (value == null) {
        unsetApplicationLabel();
      } else {
        setApplicationLabel((java.lang.String)value);
      }
      break;

    case IS_SYSTEM_APP:
      if (value == null) {
        unsetIsSystemApp();
      } else {
        setIsSystemApp((java.lang.Boolean)value);
      }
      break;

    case IMPORTANCE:
      if (value == null) {
        unsetImportance();
      } else {
        setImportance((java.lang.String)value);
      }
      break;

    case VERSION_NAME:
      if (value == null) {
        unsetVersionName();
      } else {
        setVersionName((java.lang.String)value);
      }
      break;

    case VERSION_CODE:
      if (value == null) {
        unsetVersionCode();
      } else {
        setVersionCode((java.lang.Integer)value);
      }
      break;

    case APP_SIGNATURES:
      if (value == null) {
        unsetAppSignatures();
      } else {
        setAppSignatures((java.util.List<java.lang.String>)value);
      }
      break;

    case INSTALLATION_PKG:
      if (value == null) {
        unsetInstallationPkg();
      } else {
        setInstallationPkg((java.lang.String)value);
      }
      break;

    case PROCESSES:
      if (value == null) {
        unsetProcesses();
      } else {
        setProcesses((java.util.List<PackageProcess>)value);
      }
      break;

    case IGNORING_BATTERY_OPTIMIZATIONS:
      if (value == null) {
        unsetIgnoringBatteryOptimizations();
      } else {
        setIgnoringBatteryOptimizations((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case P_ID:
      return getPId();

    case P_NAME:
      return getPName();

    case APPLICATION_LABEL:
      return getApplicationLabel();

    case IS_SYSTEM_APP:
      return isIsSystemApp();

    case IMPORTANCE:
      return getImportance();

    case VERSION_NAME:
      return getVersionName();

    case VERSION_CODE:
      return getVersionCode();

    case APP_SIGNATURES:
      return getAppSignatures();

    case INSTALLATION_PKG:
      return getInstallationPkg();

    case PROCESSES:
      return getProcesses();

    case IGNORING_BATTERY_OPTIMIZATIONS:
      return isIgnoringBatteryOptimizations();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case P_ID:
      return isSetPId();
    case P_NAME:
      return isSetPName();
    case APPLICATION_LABEL:
      return isSetApplicationLabel();
    case IS_SYSTEM_APP:
      return isSetIsSystemApp();
    case IMPORTANCE:
      return isSetImportance();
    case VERSION_NAME:
      return isSetVersionName();
    case VERSION_CODE:
      return isSetVersionCode();
    case APP_SIGNATURES:
      return isSetAppSignatures();
    case INSTALLATION_PKG:
      return isSetInstallationPkg();
    case PROCESSES:
      return isSetProcesses();
    case IGNORING_BATTERY_OPTIMIZATIONS:
      return isSetIgnoringBatteryOptimizations();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ProcessInfo)
      return this.equals((ProcessInfo)that);
    return false;
  }

  public boolean equals(ProcessInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_pId = true && this.isSetPId();
    boolean that_present_pId = true && that.isSetPId();
    if (this_present_pId || that_present_pId) {
      if (!(this_present_pId && that_present_pId))
        return false;
      if (this.pId != that.pId)
        return false;
    }

    boolean this_present_pName = true && this.isSetPName();
    boolean that_present_pName = true && that.isSetPName();
    if (this_present_pName || that_present_pName) {
      if (!(this_present_pName && that_present_pName))
        return false;
      if (!this.pName.equals(that.pName))
        return false;
    }

    boolean this_present_applicationLabel = true && this.isSetApplicationLabel();
    boolean that_present_applicationLabel = true && that.isSetApplicationLabel();
    if (this_present_applicationLabel || that_present_applicationLabel) {
      if (!(this_present_applicationLabel && that_present_applicationLabel))
        return false;
      if (!this.applicationLabel.equals(that.applicationLabel))
        return false;
    }

    boolean this_present_isSystemApp = true && this.isSetIsSystemApp();
    boolean that_present_isSystemApp = true && that.isSetIsSystemApp();
    if (this_present_isSystemApp || that_present_isSystemApp) {
      if (!(this_present_isSystemApp && that_present_isSystemApp))
        return false;
      if (this.isSystemApp != that.isSystemApp)
        return false;
    }

    boolean this_present_importance = true && this.isSetImportance();
    boolean that_present_importance = true && that.isSetImportance();
    if (this_present_importance || that_present_importance) {
      if (!(this_present_importance && that_present_importance))
        return false;
      if (!this.importance.equals(that.importance))
        return false;
    }

    boolean this_present_versionName = true && this.isSetVersionName();
    boolean that_present_versionName = true && that.isSetVersionName();
    if (this_present_versionName || that_present_versionName) {
      if (!(this_present_versionName && that_present_versionName))
        return false;
      if (!this.versionName.equals(that.versionName))
        return false;
    }

    boolean this_present_versionCode = true && this.isSetVersionCode();
    boolean that_present_versionCode = true && that.isSetVersionCode();
    if (this_present_versionCode || that_present_versionCode) {
      if (!(this_present_versionCode && that_present_versionCode))
        return false;
      if (this.versionCode != that.versionCode)
        return false;
    }

    boolean this_present_appSignatures = true && this.isSetAppSignatures();
    boolean that_present_appSignatures = true && that.isSetAppSignatures();
    if (this_present_appSignatures || that_present_appSignatures) {
      if (!(this_present_appSignatures && that_present_appSignatures))
        return false;
      if (!this.appSignatures.equals(that.appSignatures))
        return false;
    }

    boolean this_present_installationPkg = true && this.isSetInstallationPkg();
    boolean that_present_installationPkg = true && that.isSetInstallationPkg();
    if (this_present_installationPkg || that_present_installationPkg) {
      if (!(this_present_installationPkg && that_present_installationPkg))
        return false;
      if (!this.installationPkg.equals(that.installationPkg))
        return false;
    }

    boolean this_present_processes = true && this.isSetProcesses();
    boolean that_present_processes = true && that.isSetProcesses();
    if (this_present_processes || that_present_processes) {
      if (!(this_present_processes && that_present_processes))
        return false;
      if (!this.processes.equals(that.processes))
        return false;
    }

    boolean this_present_ignoringBatteryOptimizations = true && this.isSetIgnoringBatteryOptimizations();
    boolean that_present_ignoringBatteryOptimizations = true && that.isSetIgnoringBatteryOptimizations();
    if (this_present_ignoringBatteryOptimizations || that_present_ignoringBatteryOptimizations) {
      if (!(this_present_ignoringBatteryOptimizations && that_present_ignoringBatteryOptimizations))
        return false;
      if (this.ignoringBatteryOptimizations != that.ignoringBatteryOptimizations)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
    if (isSetPId())
      hashCode = hashCode * 8191 + pId;

    hashCode = hashCode * 8191 + ((isSetPName()) ? 131071 : 524287);
    if (isSetPName())
      hashCode = hashCode * 8191 + pName.hashCode();

    hashCode = hashCode * 8191 + ((isSetApplicationLabel()) ? 131071 : 524287);
    if (isSetApplicationLabel())
      hashCode = hashCode * 8191 + applicationLabel.hashCode();

    hashCode = hashCode * 8191 + ((isSetIsSystemApp()) ? 131071 : 524287);
    if (isSetIsSystemApp())
      hashCode = hashCode * 8191 + ((isSystemApp) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetImportance()) ? 131071 : 524287);
    if (isSetImportance())
      hashCode = hashCode * 8191 + importance.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersionName()) ? 131071 : 524287);
    if (isSetVersionName())
      hashCode = hashCode * 8191 + versionName.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersionCode()) ? 131071 : 524287);
    if (isSetVersionCode())
      hashCode = hashCode * 8191 + versionCode;

    hashCode = hashCode * 8191 + ((isSetAppSignatures()) ? 131071 : 524287);
    if (isSetAppSignatures())
      hashCode = hashCode * 8191 + appSignatures.hashCode();

    hashCode = hashCode * 8191 + ((isSetInstallationPkg()) ? 131071 : 524287);
    if (isSetInstallationPkg())
      hashCode = hashCode * 8191 + installationPkg.hashCode();

    hashCode = hashCode * 8191 + ((isSetProcesses()) ? 131071 : 524287);
    if (isSetProcesses())
      hashCode = hashCode * 8191 + processes.hashCode();

    hashCode = hashCode * 8191 + ((isSetIgnoringBatteryOptimizations()) ? 131071 : 524287);
    if (isSetIgnoringBatteryOptimizations())
      hashCode = hashCode * 8191 + ((ignoringBatteryOptimizations) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(ProcessInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPName()).compareTo(other.isSetPName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pName, other.pName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApplicationLabel()).compareTo(other.isSetApplicationLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationLabel, other.applicationLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsSystemApp()).compareTo(other.isSetIsSystemApp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSystemApp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSystemApp, other.isSystemApp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetImportance()).compareTo(other.isSetImportance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImportance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.importance, other.importance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionName()).compareTo(other.isSetVersionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionName, other.versionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionCode()).compareTo(other.isSetVersionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionCode, other.versionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppSignatures()).compareTo(other.isSetAppSignatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppSignatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appSignatures, other.appSignatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInstallationPkg()).compareTo(other.isSetInstallationPkg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstallationPkg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.installationPkg, other.installationPkg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProcesses()).compareTo(other.isSetProcesses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcesses()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processes, other.processes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIgnoringBatteryOptimizations()).compareTo(other.isSetIgnoringBatteryOptimizations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIgnoringBatteryOptimizations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ignoringBatteryOptimizations, other.ignoringBatteryOptimizations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ProcessInfo(");
    boolean first = true;

    if (isSetPId()) {
      sb.append("pId:");
      sb.append(this.pId);
      first = false;
    }
    if (isSetPName()) {
      if (!first) sb.append(", ");
      sb.append("pName:");
      if (this.pName == null) {
        sb.append("null");
      } else {
        sb.append(this.pName);
      }
      first = false;
    }
    if (isSetApplicationLabel()) {
      if (!first) sb.append(", ");
      sb.append("applicationLabel:");
      if (this.applicationLabel == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationLabel);
      }
      first = false;
    }
    if (isSetIsSystemApp()) {
      if (!first) sb.append(", ");
      sb.append("isSystemApp:");
      sb.append(this.isSystemApp);
      first = false;
    }
    if (isSetImportance()) {
      if (!first) sb.append(", ");
      sb.append("importance:");
      if (this.importance == null) {
        sb.append("null");
      } else {
        sb.append(this.importance);
      }
      first = false;
    }
    if (isSetVersionName()) {
      if (!first) sb.append(", ");
      sb.append("versionName:");
      if (this.versionName == null) {
        sb.append("null");
      } else {
        sb.append(this.versionName);
      }
      first = false;
    }
    if (isSetVersionCode()) {
      if (!first) sb.append(", ");
      sb.append("versionCode:");
      sb.append(this.versionCode);
      first = false;
    }
    if (isSetAppSignatures()) {
      if (!first) sb.append(", ");
      sb.append("appSignatures:");
      if (this.appSignatures == null) {
        sb.append("null");
      } else {
        sb.append(this.appSignatures);
      }
      first = false;
    }
    if (isSetInstallationPkg()) {
      if (!first) sb.append(", ");
      sb.append("installationPkg:");
      if (this.installationPkg == null) {
        sb.append("null");
      } else {
        sb.append(this.installationPkg);
      }
      first = false;
    }
    if (isSetProcesses()) {
      if (!first) sb.append(", ");
      sb.append("processes:");
      if (this.processes == null) {
        sb.append("null");
      } else {
        sb.append(this.processes);
      }
      first = false;
    }
    if (isSetIgnoringBatteryOptimizations()) {
      if (!first) sb.append(", ");
      sb.append("ignoringBatteryOptimizations:");
      sb.append(this.ignoringBatteryOptimizations);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProcessInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProcessInfoStandardScheme getScheme() {
      return new ProcessInfoStandardScheme();
    }
  }

  private static class ProcessInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProcessInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProcessInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // P_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pId = iprot.readI32();
              struct.setPIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // P_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pName = iprot.readString();
              struct.setPNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APPLICATION_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applicationLabel = iprot.readString();
              struct.setApplicationLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IS_SYSTEM_APP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSystemApp = iprot.readBool();
              struct.setIsSystemAppIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMPORTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.importance = iprot.readString();
              struct.setImportanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionName = iprot.readString();
              struct.setVersionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.versionCode = iprot.readI32();
              struct.setVersionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // APP_SIGNATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.appSignatures = new java.util.ArrayList<java.lang.String>(_list0.size);
                java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.appSignatures.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setAppSignaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // INSTALLATION_PKG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.installationPkg = iprot.readString();
              struct.setInstallationPkgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PROCESSES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.processes = new java.util.ArrayList<PackageProcess>(_list3.size);
                PackageProcess _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new PackageProcess();
                  _elem4.read(iprot);
                  struct.processes.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setProcessesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IGNORING_BATTERY_OPTIMIZATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ignoringBatteryOptimizations = iprot.readBool();
              struct.setIgnoringBatteryOptimizationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProcessInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetPId()) {
        oprot.writeFieldBegin(P_ID_FIELD_DESC);
        oprot.writeI32(struct.pId);
        oprot.writeFieldEnd();
      }
      if (struct.pName != null) {
        if (struct.isSetPName()) {
          oprot.writeFieldBegin(P_NAME_FIELD_DESC);
          oprot.writeString(struct.pName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.applicationLabel != null) {
        if (struct.isSetApplicationLabel()) {
          oprot.writeFieldBegin(APPLICATION_LABEL_FIELD_DESC);
          oprot.writeString(struct.applicationLabel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsSystemApp()) {
        oprot.writeFieldBegin(IS_SYSTEM_APP_FIELD_DESC);
        oprot.writeBool(struct.isSystemApp);
        oprot.writeFieldEnd();
      }
      if (struct.importance != null) {
        if (struct.isSetImportance()) {
          oprot.writeFieldBegin(IMPORTANCE_FIELD_DESC);
          oprot.writeString(struct.importance);
          oprot.writeFieldEnd();
        }
      }
      if (struct.versionName != null) {
        if (struct.isSetVersionName()) {
          oprot.writeFieldBegin(VERSION_NAME_FIELD_DESC);
          oprot.writeString(struct.versionName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersionCode()) {
        oprot.writeFieldBegin(VERSION_CODE_FIELD_DESC);
        oprot.writeI32(struct.versionCode);
        oprot.writeFieldEnd();
      }
      if (struct.appSignatures != null) {
        if (struct.isSetAppSignatures()) {
          oprot.writeFieldBegin(APP_SIGNATURES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.appSignatures.size()));
            for (java.lang.String _iter6 : struct.appSignatures)
            {
              oprot.writeString(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.installationPkg != null) {
        if (struct.isSetInstallationPkg()) {
          oprot.writeFieldBegin(INSTALLATION_PKG_FIELD_DESC);
          oprot.writeString(struct.installationPkg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.processes != null) {
        if (struct.isSetProcesses()) {
          oprot.writeFieldBegin(PROCESSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.processes.size()));
            for (PackageProcess _iter7 : struct.processes)
            {
              _iter7.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIgnoringBatteryOptimizations()) {
        oprot.writeFieldBegin(IGNORING_BATTERY_OPTIMIZATIONS_FIELD_DESC);
        oprot.writeBool(struct.ignoringBatteryOptimizations);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProcessInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProcessInfoTupleScheme getScheme() {
      return new ProcessInfoTupleScheme();
    }
  }

  private static class ProcessInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProcessInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProcessInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPId()) {
        optionals.set(0);
      }
      if (struct.isSetPName()) {
        optionals.set(1);
      }
      if (struct.isSetApplicationLabel()) {
        optionals.set(2);
      }
      if (struct.isSetIsSystemApp()) {
        optionals.set(3);
      }
      if (struct.isSetImportance()) {
        optionals.set(4);
      }
      if (struct.isSetVersionName()) {
        optionals.set(5);
      }
      if (struct.isSetVersionCode()) {
        optionals.set(6);
      }
      if (struct.isSetAppSignatures()) {
        optionals.set(7);
      }
      if (struct.isSetInstallationPkg()) {
        optionals.set(8);
      }
      if (struct.isSetProcesses()) {
        optionals.set(9);
      }
      if (struct.isSetIgnoringBatteryOptimizations()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetPId()) {
        oprot.writeI32(struct.pId);
      }
      if (struct.isSetPName()) {
        oprot.writeString(struct.pName);
      }
      if (struct.isSetApplicationLabel()) {
        oprot.writeString(struct.applicationLabel);
      }
      if (struct.isSetIsSystemApp()) {
        oprot.writeBool(struct.isSystemApp);
      }
      if (struct.isSetImportance()) {
        oprot.writeString(struct.importance);
      }
      if (struct.isSetVersionName()) {
        oprot.writeString(struct.versionName);
      }
      if (struct.isSetVersionCode()) {
        oprot.writeI32(struct.versionCode);
      }
      if (struct.isSetAppSignatures()) {
        {
          oprot.writeI32(struct.appSignatures.size());
          for (java.lang.String _iter8 : struct.appSignatures)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetInstallationPkg()) {
        oprot.writeString(struct.installationPkg);
      }
      if (struct.isSetProcesses()) {
        {
          oprot.writeI32(struct.processes.size());
          for (PackageProcess _iter9 : struct.processes)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetIgnoringBatteryOptimizations()) {
        oprot.writeBool(struct.ignoringBatteryOptimizations);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProcessInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.pId = iprot.readI32();
        struct.setPIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pName = iprot.readString();
        struct.setPNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.applicationLabel = iprot.readString();
        struct.setApplicationLabelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.isSystemApp = iprot.readBool();
        struct.setIsSystemAppIsSet(true);
      }
      if (incoming.get(4)) {
        struct.importance = iprot.readString();
        struct.setImportanceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.versionName = iprot.readString();
        struct.setVersionNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.versionCode = iprot.readI32();
        struct.setVersionCodeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.appSignatures = new java.util.ArrayList<java.lang.String>(_list10.size);
          java.lang.String _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readString();
            struct.appSignatures.add(_elem11);
          }
        }
        struct.setAppSignaturesIsSet(true);
      }
      if (incoming.get(8)) {
        struct.installationPkg = iprot.readString();
        struct.setInstallationPkgIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.processes = new java.util.ArrayList<PackageProcess>(_list13.size);
          PackageProcess _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = new PackageProcess();
            _elem14.read(iprot);
            struct.processes.add(_elem14);
          }
        }
        struct.setProcessesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ignoringBatteryOptimizations = iprot.readBool();
        struct.setIgnoringBatteryOptimizationsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

