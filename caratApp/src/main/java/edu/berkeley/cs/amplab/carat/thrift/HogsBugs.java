/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.amplab.carat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-02-14")
public class HogsBugs implements org.apache.thrift.TBase<HogsBugs, HogsBugs._Fields>, java.io.Serializable, Cloneable, Comparable<HogsBugs> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HogsBugs");

  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField W_DISTANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("wDistance", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField X_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("xVals", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField Y_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("yVals", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField X_VALS_WITHOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("xValsWithout", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField Y_VALS_WITHOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("yValsWithout", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField EXPECTED_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("expectedValue", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField EXPECTED_VALUE_WITHOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("expectedValueWithout", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField ERROR_WITHOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("errorWithout", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField SAMPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("samples", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField SAMPLES_WITHOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("samplesWithout", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField APP_LABEL_FIELD_DESC = new org.apache.thrift.protocol.TField("appLabel", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField APP_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("appPriority", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new HogsBugsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new HogsBugsTupleSchemeFactory();

  public java.lang.String appName; // optional
  public double wDistance; // optional
  public java.util.List<java.lang.Double> xVals; // optional
  public java.util.List<java.lang.Double> yVals; // optional
  public java.util.List<java.lang.Double> xValsWithout; // optional
  public java.util.List<java.lang.Double> yValsWithout; // optional
  public double expectedValue; // optional
  public double expectedValueWithout; // optional
  public double error; // optional
  public double errorWithout; // optional
  public double samples; // optional
  public double samplesWithout; // optional
  public java.lang.String appLabel; // optional
  public java.lang.String appPriority; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_NAME((short)1, "appName"),
    W_DISTANCE((short)2, "wDistance"),
    X_VALS((short)3, "xVals"),
    Y_VALS((short)4, "yVals"),
    X_VALS_WITHOUT((short)5, "xValsWithout"),
    Y_VALS_WITHOUT((short)6, "yValsWithout"),
    EXPECTED_VALUE((short)7, "expectedValue"),
    EXPECTED_VALUE_WITHOUT((short)8, "expectedValueWithout"),
    ERROR((short)9, "error"),
    ERROR_WITHOUT((short)10, "errorWithout"),
    SAMPLES((short)11, "samples"),
    SAMPLES_WITHOUT((short)12, "samplesWithout"),
    APP_LABEL((short)13, "appLabel"),
    APP_PRIORITY((short)14, "appPriority");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_NAME
          return APP_NAME;
        case 2: // W_DISTANCE
          return W_DISTANCE;
        case 3: // X_VALS
          return X_VALS;
        case 4: // Y_VALS
          return Y_VALS;
        case 5: // X_VALS_WITHOUT
          return X_VALS_WITHOUT;
        case 6: // Y_VALS_WITHOUT
          return Y_VALS_WITHOUT;
        case 7: // EXPECTED_VALUE
          return EXPECTED_VALUE;
        case 8: // EXPECTED_VALUE_WITHOUT
          return EXPECTED_VALUE_WITHOUT;
        case 9: // ERROR
          return ERROR;
        case 10: // ERROR_WITHOUT
          return ERROR_WITHOUT;
        case 11: // SAMPLES
          return SAMPLES;
        case 12: // SAMPLES_WITHOUT
          return SAMPLES_WITHOUT;
        case 13: // APP_LABEL
          return APP_LABEL;
        case 14: // APP_PRIORITY
          return APP_PRIORITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WDISTANCE_ISSET_ID = 0;
  private static final int __EXPECTEDVALUE_ISSET_ID = 1;
  private static final int __EXPECTEDVALUEWITHOUT_ISSET_ID = 2;
  private static final int __ERROR_ISSET_ID = 3;
  private static final int __ERRORWITHOUT_ISSET_ID = 4;
  private static final int __SAMPLES_ISSET_ID = 5;
  private static final int __SAMPLESWITHOUT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.APP_NAME,_Fields.W_DISTANCE,_Fields.X_VALS,_Fields.Y_VALS,_Fields.X_VALS_WITHOUT,_Fields.Y_VALS_WITHOUT,_Fields.EXPECTED_VALUE,_Fields.EXPECTED_VALUE_WITHOUT,_Fields.ERROR,_Fields.ERROR_WITHOUT,_Fields.SAMPLES,_Fields.SAMPLES_WITHOUT,_Fields.APP_LABEL,_Fields.APP_PRIORITY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.W_DISTANCE, new org.apache.thrift.meta_data.FieldMetaData("wDistance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.X_VALS, new org.apache.thrift.meta_data.FieldMetaData("xVals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.Y_VALS, new org.apache.thrift.meta_data.FieldMetaData("yVals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.X_VALS_WITHOUT, new org.apache.thrift.meta_data.FieldMetaData("xValsWithout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.Y_VALS_WITHOUT, new org.apache.thrift.meta_data.FieldMetaData("yValsWithout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.EXPECTED_VALUE, new org.apache.thrift.meta_data.FieldMetaData("expectedValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXPECTED_VALUE_WITHOUT, new org.apache.thrift.meta_data.FieldMetaData("expectedValueWithout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ERROR_WITHOUT, new org.apache.thrift.meta_data.FieldMetaData("errorWithout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SAMPLES, new org.apache.thrift.meta_data.FieldMetaData("samples", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SAMPLES_WITHOUT, new org.apache.thrift.meta_data.FieldMetaData("samplesWithout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.APP_LABEL, new org.apache.thrift.meta_data.FieldMetaData("appLabel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("appPriority", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HogsBugs.class, metaDataMap);
  }

  public HogsBugs() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HogsBugs(HogsBugs other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    this.wDistance = other.wDistance;
    if (other.isSetXVals()) {
      java.util.List<java.lang.Double> __this__xVals = new java.util.ArrayList<java.lang.Double>(other.xVals);
      this.xVals = __this__xVals;
    }
    if (other.isSetYVals()) {
      java.util.List<java.lang.Double> __this__yVals = new java.util.ArrayList<java.lang.Double>(other.yVals);
      this.yVals = __this__yVals;
    }
    if (other.isSetXValsWithout()) {
      java.util.List<java.lang.Double> __this__xValsWithout = new java.util.ArrayList<java.lang.Double>(other.xValsWithout);
      this.xValsWithout = __this__xValsWithout;
    }
    if (other.isSetYValsWithout()) {
      java.util.List<java.lang.Double> __this__yValsWithout = new java.util.ArrayList<java.lang.Double>(other.yValsWithout);
      this.yValsWithout = __this__yValsWithout;
    }
    this.expectedValue = other.expectedValue;
    this.expectedValueWithout = other.expectedValueWithout;
    this.error = other.error;
    this.errorWithout = other.errorWithout;
    this.samples = other.samples;
    this.samplesWithout = other.samplesWithout;
    if (other.isSetAppLabel()) {
      this.appLabel = other.appLabel;
    }
    if (other.isSetAppPriority()) {
      this.appPriority = other.appPriority;
    }
  }

  public HogsBugs deepCopy() {
    return new HogsBugs(this);
  }

  @Override
  public void clear() {
    this.appName = null;
    setWDistanceIsSet(false);
    this.wDistance = 0.0;
    this.xVals = null;
    this.yVals = null;
    this.xValsWithout = null;
    this.yValsWithout = null;
    setExpectedValueIsSet(false);
    this.expectedValue = 0.0;
    setExpectedValueWithoutIsSet(false);
    this.expectedValueWithout = 0.0;
    setErrorIsSet(false);
    this.error = 0.0;
    setErrorWithoutIsSet(false);
    this.errorWithout = 0.0;
    setSamplesIsSet(false);
    this.samples = 0.0;
    setSamplesWithoutIsSet(false);
    this.samplesWithout = 0.0;
    this.appLabel = null;
    this.appPriority = null;
  }

  public java.lang.String getAppName() {
    return this.appName;
  }

  public HogsBugs setAppName(java.lang.String appName) {
    this.appName = appName;
    return this;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  public double getWDistance() {
    return this.wDistance;
  }

  public HogsBugs setWDistance(double wDistance) {
    this.wDistance = wDistance;
    setWDistanceIsSet(true);
    return this;
  }

  public void unsetWDistance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WDISTANCE_ISSET_ID);
  }

  /** Returns true if field wDistance is set (has been assigned a value) and false otherwise */
  public boolean isSetWDistance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WDISTANCE_ISSET_ID);
  }

  public void setWDistanceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WDISTANCE_ISSET_ID, value);
  }

  public int getXValsSize() {
    return (this.xVals == null) ? 0 : this.xVals.size();
  }

  public java.util.Iterator<java.lang.Double> getXValsIterator() {
    return (this.xVals == null) ? null : this.xVals.iterator();
  }

  public void addToXVals(double elem) {
    if (this.xVals == null) {
      this.xVals = new java.util.ArrayList<java.lang.Double>();
    }
    this.xVals.add(elem);
  }

  public java.util.List<java.lang.Double> getXVals() {
    return this.xVals;
  }

  public HogsBugs setXVals(java.util.List<java.lang.Double> xVals) {
    this.xVals = xVals;
    return this;
  }

  public void unsetXVals() {
    this.xVals = null;
  }

  /** Returns true if field xVals is set (has been assigned a value) and false otherwise */
  public boolean isSetXVals() {
    return this.xVals != null;
  }

  public void setXValsIsSet(boolean value) {
    if (!value) {
      this.xVals = null;
    }
  }

  public int getYValsSize() {
    return (this.yVals == null) ? 0 : this.yVals.size();
  }

  public java.util.Iterator<java.lang.Double> getYValsIterator() {
    return (this.yVals == null) ? null : this.yVals.iterator();
  }

  public void addToYVals(double elem) {
    if (this.yVals == null) {
      this.yVals = new java.util.ArrayList<java.lang.Double>();
    }
    this.yVals.add(elem);
  }

  public java.util.List<java.lang.Double> getYVals() {
    return this.yVals;
  }

  public HogsBugs setYVals(java.util.List<java.lang.Double> yVals) {
    this.yVals = yVals;
    return this;
  }

  public void unsetYVals() {
    this.yVals = null;
  }

  /** Returns true if field yVals is set (has been assigned a value) and false otherwise */
  public boolean isSetYVals() {
    return this.yVals != null;
  }

  public void setYValsIsSet(boolean value) {
    if (!value) {
      this.yVals = null;
    }
  }

  public int getXValsWithoutSize() {
    return (this.xValsWithout == null) ? 0 : this.xValsWithout.size();
  }

  public java.util.Iterator<java.lang.Double> getXValsWithoutIterator() {
    return (this.xValsWithout == null) ? null : this.xValsWithout.iterator();
  }

  public void addToXValsWithout(double elem) {
    if (this.xValsWithout == null) {
      this.xValsWithout = new java.util.ArrayList<java.lang.Double>();
    }
    this.xValsWithout.add(elem);
  }

  public java.util.List<java.lang.Double> getXValsWithout() {
    return this.xValsWithout;
  }

  public HogsBugs setXValsWithout(java.util.List<java.lang.Double> xValsWithout) {
    this.xValsWithout = xValsWithout;
    return this;
  }

  public void unsetXValsWithout() {
    this.xValsWithout = null;
  }

  /** Returns true if field xValsWithout is set (has been assigned a value) and false otherwise */
  public boolean isSetXValsWithout() {
    return this.xValsWithout != null;
  }

  public void setXValsWithoutIsSet(boolean value) {
    if (!value) {
      this.xValsWithout = null;
    }
  }

  public int getYValsWithoutSize() {
    return (this.yValsWithout == null) ? 0 : this.yValsWithout.size();
  }

  public java.util.Iterator<java.lang.Double> getYValsWithoutIterator() {
    return (this.yValsWithout == null) ? null : this.yValsWithout.iterator();
  }

  public void addToYValsWithout(double elem) {
    if (this.yValsWithout == null) {
      this.yValsWithout = new java.util.ArrayList<java.lang.Double>();
    }
    this.yValsWithout.add(elem);
  }

  public java.util.List<java.lang.Double> getYValsWithout() {
    return this.yValsWithout;
  }

  public HogsBugs setYValsWithout(java.util.List<java.lang.Double> yValsWithout) {
    this.yValsWithout = yValsWithout;
    return this;
  }

  public void unsetYValsWithout() {
    this.yValsWithout = null;
  }

  /** Returns true if field yValsWithout is set (has been assigned a value) and false otherwise */
  public boolean isSetYValsWithout() {
    return this.yValsWithout != null;
  }

  public void setYValsWithoutIsSet(boolean value) {
    if (!value) {
      this.yValsWithout = null;
    }
  }

  public double getExpectedValue() {
    return this.expectedValue;
  }

  public HogsBugs setExpectedValue(double expectedValue) {
    this.expectedValue = expectedValue;
    setExpectedValueIsSet(true);
    return this;
  }

  public void unsetExpectedValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPECTEDVALUE_ISSET_ID);
  }

  /** Returns true if field expectedValue is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectedValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPECTEDVALUE_ISSET_ID);
  }

  public void setExpectedValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPECTEDVALUE_ISSET_ID, value);
  }

  public double getExpectedValueWithout() {
    return this.expectedValueWithout;
  }

  public HogsBugs setExpectedValueWithout(double expectedValueWithout) {
    this.expectedValueWithout = expectedValueWithout;
    setExpectedValueWithoutIsSet(true);
    return this;
  }

  public void unsetExpectedValueWithout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPECTEDVALUEWITHOUT_ISSET_ID);
  }

  /** Returns true if field expectedValueWithout is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectedValueWithout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPECTEDVALUEWITHOUT_ISSET_ID);
  }

  public void setExpectedValueWithoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPECTEDVALUEWITHOUT_ISSET_ID, value);
  }

  public double getError() {
    return this.error;
  }

  public HogsBugs setError(double error) {
    this.error = error;
    setErrorIsSet(true);
    return this;
  }

  public void unsetError() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERROR_ISSET_ID);
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERROR_ISSET_ID);
  }

  public void setErrorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERROR_ISSET_ID, value);
  }

  public double getErrorWithout() {
    return this.errorWithout;
  }

  public HogsBugs setErrorWithout(double errorWithout) {
    this.errorWithout = errorWithout;
    setErrorWithoutIsSet(true);
    return this;
  }

  public void unsetErrorWithout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRORWITHOUT_ISSET_ID);
  }

  /** Returns true if field errorWithout is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorWithout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRORWITHOUT_ISSET_ID);
  }

  public void setErrorWithoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRORWITHOUT_ISSET_ID, value);
  }

  public double getSamples() {
    return this.samples;
  }

  public HogsBugs setSamples(double samples) {
    this.samples = samples;
    setSamplesIsSet(true);
    return this;
  }

  public void unsetSamples() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAMPLES_ISSET_ID);
  }

  /** Returns true if field samples is set (has been assigned a value) and false otherwise */
  public boolean isSetSamples() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAMPLES_ISSET_ID);
  }

  public void setSamplesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAMPLES_ISSET_ID, value);
  }

  public double getSamplesWithout() {
    return this.samplesWithout;
  }

  public HogsBugs setSamplesWithout(double samplesWithout) {
    this.samplesWithout = samplesWithout;
    setSamplesWithoutIsSet(true);
    return this;
  }

  public void unsetSamplesWithout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAMPLESWITHOUT_ISSET_ID);
  }

  /** Returns true if field samplesWithout is set (has been assigned a value) and false otherwise */
  public boolean isSetSamplesWithout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAMPLESWITHOUT_ISSET_ID);
  }

  public void setSamplesWithoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAMPLESWITHOUT_ISSET_ID, value);
  }

  public java.lang.String getAppLabel() {
    return this.appLabel;
  }

  public HogsBugs setAppLabel(java.lang.String appLabel) {
    this.appLabel = appLabel;
    return this;
  }

  public void unsetAppLabel() {
    this.appLabel = null;
  }

  /** Returns true if field appLabel is set (has been assigned a value) and false otherwise */
  public boolean isSetAppLabel() {
    return this.appLabel != null;
  }

  public void setAppLabelIsSet(boolean value) {
    if (!value) {
      this.appLabel = null;
    }
  }

  public java.lang.String getAppPriority() {
    return this.appPriority;
  }

  public HogsBugs setAppPriority(java.lang.String appPriority) {
    this.appPriority = appPriority;
    return this;
  }

  public void unsetAppPriority() {
    this.appPriority = null;
  }

  /** Returns true if field appPriority is set (has been assigned a value) and false otherwise */
  public boolean isSetAppPriority() {
    return this.appPriority != null;
  }

  public void setAppPriorityIsSet(boolean value) {
    if (!value) {
      this.appPriority = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((java.lang.String)value);
      }
      break;

    case W_DISTANCE:
      if (value == null) {
        unsetWDistance();
      } else {
        setWDistance((java.lang.Double)value);
      }
      break;

    case X_VALS:
      if (value == null) {
        unsetXVals();
      } else {
        setXVals((java.util.List<java.lang.Double>)value);
      }
      break;

    case Y_VALS:
      if (value == null) {
        unsetYVals();
      } else {
        setYVals((java.util.List<java.lang.Double>)value);
      }
      break;

    case X_VALS_WITHOUT:
      if (value == null) {
        unsetXValsWithout();
      } else {
        setXValsWithout((java.util.List<java.lang.Double>)value);
      }
      break;

    case Y_VALS_WITHOUT:
      if (value == null) {
        unsetYValsWithout();
      } else {
        setYValsWithout((java.util.List<java.lang.Double>)value);
      }
      break;

    case EXPECTED_VALUE:
      if (value == null) {
        unsetExpectedValue();
      } else {
        setExpectedValue((java.lang.Double)value);
      }
      break;

    case EXPECTED_VALUE_WITHOUT:
      if (value == null) {
        unsetExpectedValueWithout();
      } else {
        setExpectedValueWithout((java.lang.Double)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((java.lang.Double)value);
      }
      break;

    case ERROR_WITHOUT:
      if (value == null) {
        unsetErrorWithout();
      } else {
        setErrorWithout((java.lang.Double)value);
      }
      break;

    case SAMPLES:
      if (value == null) {
        unsetSamples();
      } else {
        setSamples((java.lang.Double)value);
      }
      break;

    case SAMPLES_WITHOUT:
      if (value == null) {
        unsetSamplesWithout();
      } else {
        setSamplesWithout((java.lang.Double)value);
      }
      break;

    case APP_LABEL:
      if (value == null) {
        unsetAppLabel();
      } else {
        setAppLabel((java.lang.String)value);
      }
      break;

    case APP_PRIORITY:
      if (value == null) {
        unsetAppPriority();
      } else {
        setAppPriority((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_NAME:
      return getAppName();

    case W_DISTANCE:
      return getWDistance();

    case X_VALS:
      return getXVals();

    case Y_VALS:
      return getYVals();

    case X_VALS_WITHOUT:
      return getXValsWithout();

    case Y_VALS_WITHOUT:
      return getYValsWithout();

    case EXPECTED_VALUE:
      return getExpectedValue();

    case EXPECTED_VALUE_WITHOUT:
      return getExpectedValueWithout();

    case ERROR:
      return getError();

    case ERROR_WITHOUT:
      return getErrorWithout();

    case SAMPLES:
      return getSamples();

    case SAMPLES_WITHOUT:
      return getSamplesWithout();

    case APP_LABEL:
      return getAppLabel();

    case APP_PRIORITY:
      return getAppPriority();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case APP_NAME:
      return isSetAppName();
    case W_DISTANCE:
      return isSetWDistance();
    case X_VALS:
      return isSetXVals();
    case Y_VALS:
      return isSetYVals();
    case X_VALS_WITHOUT:
      return isSetXValsWithout();
    case Y_VALS_WITHOUT:
      return isSetYValsWithout();
    case EXPECTED_VALUE:
      return isSetExpectedValue();
    case EXPECTED_VALUE_WITHOUT:
      return isSetExpectedValueWithout();
    case ERROR:
      return isSetError();
    case ERROR_WITHOUT:
      return isSetErrorWithout();
    case SAMPLES:
      return isSetSamples();
    case SAMPLES_WITHOUT:
      return isSetSamplesWithout();
    case APP_LABEL:
      return isSetAppLabel();
    case APP_PRIORITY:
      return isSetAppPriority();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof HogsBugs)
      return this.equals((HogsBugs)that);
    return false;
  }

  public boolean equals(HogsBugs that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_wDistance = true && this.isSetWDistance();
    boolean that_present_wDistance = true && that.isSetWDistance();
    if (this_present_wDistance || that_present_wDistance) {
      if (!(this_present_wDistance && that_present_wDistance))
        return false;
      if (this.wDistance != that.wDistance)
        return false;
    }

    boolean this_present_xVals = true && this.isSetXVals();
    boolean that_present_xVals = true && that.isSetXVals();
    if (this_present_xVals || that_present_xVals) {
      if (!(this_present_xVals && that_present_xVals))
        return false;
      if (!this.xVals.equals(that.xVals))
        return false;
    }

    boolean this_present_yVals = true && this.isSetYVals();
    boolean that_present_yVals = true && that.isSetYVals();
    if (this_present_yVals || that_present_yVals) {
      if (!(this_present_yVals && that_present_yVals))
        return false;
      if (!this.yVals.equals(that.yVals))
        return false;
    }

    boolean this_present_xValsWithout = true && this.isSetXValsWithout();
    boolean that_present_xValsWithout = true && that.isSetXValsWithout();
    if (this_present_xValsWithout || that_present_xValsWithout) {
      if (!(this_present_xValsWithout && that_present_xValsWithout))
        return false;
      if (!this.xValsWithout.equals(that.xValsWithout))
        return false;
    }

    boolean this_present_yValsWithout = true && this.isSetYValsWithout();
    boolean that_present_yValsWithout = true && that.isSetYValsWithout();
    if (this_present_yValsWithout || that_present_yValsWithout) {
      if (!(this_present_yValsWithout && that_present_yValsWithout))
        return false;
      if (!this.yValsWithout.equals(that.yValsWithout))
        return false;
    }

    boolean this_present_expectedValue = true && this.isSetExpectedValue();
    boolean that_present_expectedValue = true && that.isSetExpectedValue();
    if (this_present_expectedValue || that_present_expectedValue) {
      if (!(this_present_expectedValue && that_present_expectedValue))
        return false;
      if (this.expectedValue != that.expectedValue)
        return false;
    }

    boolean this_present_expectedValueWithout = true && this.isSetExpectedValueWithout();
    boolean that_present_expectedValueWithout = true && that.isSetExpectedValueWithout();
    if (this_present_expectedValueWithout || that_present_expectedValueWithout) {
      if (!(this_present_expectedValueWithout && that_present_expectedValueWithout))
        return false;
      if (this.expectedValueWithout != that.expectedValueWithout)
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (this.error != that.error)
        return false;
    }

    boolean this_present_errorWithout = true && this.isSetErrorWithout();
    boolean that_present_errorWithout = true && that.isSetErrorWithout();
    if (this_present_errorWithout || that_present_errorWithout) {
      if (!(this_present_errorWithout && that_present_errorWithout))
        return false;
      if (this.errorWithout != that.errorWithout)
        return false;
    }

    boolean this_present_samples = true && this.isSetSamples();
    boolean that_present_samples = true && that.isSetSamples();
    if (this_present_samples || that_present_samples) {
      if (!(this_present_samples && that_present_samples))
        return false;
      if (this.samples != that.samples)
        return false;
    }

    boolean this_present_samplesWithout = true && this.isSetSamplesWithout();
    boolean that_present_samplesWithout = true && that.isSetSamplesWithout();
    if (this_present_samplesWithout || that_present_samplesWithout) {
      if (!(this_present_samplesWithout && that_present_samplesWithout))
        return false;
      if (this.samplesWithout != that.samplesWithout)
        return false;
    }

    boolean this_present_appLabel = true && this.isSetAppLabel();
    boolean that_present_appLabel = true && that.isSetAppLabel();
    if (this_present_appLabel || that_present_appLabel) {
      if (!(this_present_appLabel && that_present_appLabel))
        return false;
      if (!this.appLabel.equals(that.appLabel))
        return false;
    }

    boolean this_present_appPriority = true && this.isSetAppPriority();
    boolean that_present_appPriority = true && that.isSetAppPriority();
    if (this_present_appPriority || that_present_appPriority) {
      if (!(this_present_appPriority && that_present_appPriority))
        return false;
      if (!this.appPriority.equals(that.appPriority))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAppName()) ? 131071 : 524287);
    if (isSetAppName())
      hashCode = hashCode * 8191 + appName.hashCode();

    hashCode = hashCode * 8191 + ((isSetWDistance()) ? 131071 : 524287);
    if (isSetWDistance())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(wDistance);

    hashCode = hashCode * 8191 + ((isSetXVals()) ? 131071 : 524287);
    if (isSetXVals())
      hashCode = hashCode * 8191 + xVals.hashCode();

    hashCode = hashCode * 8191 + ((isSetYVals()) ? 131071 : 524287);
    if (isSetYVals())
      hashCode = hashCode * 8191 + yVals.hashCode();

    hashCode = hashCode * 8191 + ((isSetXValsWithout()) ? 131071 : 524287);
    if (isSetXValsWithout())
      hashCode = hashCode * 8191 + xValsWithout.hashCode();

    hashCode = hashCode * 8191 + ((isSetYValsWithout()) ? 131071 : 524287);
    if (isSetYValsWithout())
      hashCode = hashCode * 8191 + yValsWithout.hashCode();

    hashCode = hashCode * 8191 + ((isSetExpectedValue()) ? 131071 : 524287);
    if (isSetExpectedValue())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expectedValue);

    hashCode = hashCode * 8191 + ((isSetExpectedValueWithout()) ? 131071 : 524287);
    if (isSetExpectedValueWithout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expectedValueWithout);

    hashCode = hashCode * 8191 + ((isSetError()) ? 131071 : 524287);
    if (isSetError())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(error);

    hashCode = hashCode * 8191 + ((isSetErrorWithout()) ? 131071 : 524287);
    if (isSetErrorWithout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(errorWithout);

    hashCode = hashCode * 8191 + ((isSetSamples()) ? 131071 : 524287);
    if (isSetSamples())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(samples);

    hashCode = hashCode * 8191 + ((isSetSamplesWithout()) ? 131071 : 524287);
    if (isSetSamplesWithout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(samplesWithout);

    hashCode = hashCode * 8191 + ((isSetAppLabel()) ? 131071 : 524287);
    if (isSetAppLabel())
      hashCode = hashCode * 8191 + appLabel.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppPriority()) ? 131071 : 524287);
    if (isSetAppPriority())
      hashCode = hashCode * 8191 + appPriority.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(HogsBugs other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWDistance()).compareTo(other.isSetWDistance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWDistance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wDistance, other.wDistance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXVals()).compareTo(other.isSetXVals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXVals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xVals, other.xVals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYVals()).compareTo(other.isSetYVals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYVals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yVals, other.yVals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXValsWithout()).compareTo(other.isSetXValsWithout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXValsWithout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xValsWithout, other.xValsWithout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYValsWithout()).compareTo(other.isSetYValsWithout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYValsWithout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yValsWithout, other.yValsWithout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExpectedValue()).compareTo(other.isSetExpectedValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectedValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectedValue, other.expectedValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExpectedValueWithout()).compareTo(other.isSetExpectedValueWithout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectedValueWithout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectedValueWithout, other.expectedValueWithout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetError()).compareTo(other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorWithout()).compareTo(other.isSetErrorWithout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorWithout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorWithout, other.errorWithout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSamples()).compareTo(other.isSetSamples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samples, other.samples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSamplesWithout()).compareTo(other.isSetSamplesWithout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamplesWithout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samplesWithout, other.samplesWithout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppLabel()).compareTo(other.isSetAppLabel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppLabel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appLabel, other.appLabel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAppPriority()).compareTo(other.isSetAppPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appPriority, other.appPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("HogsBugs(");
    boolean first = true;

    if (isSetAppName()) {
      sb.append("appName:");
      if (this.appName == null) {
        sb.append("null");
      } else {
        sb.append(this.appName);
      }
      first = false;
    }
    if (isSetWDistance()) {
      if (!first) sb.append(", ");
      sb.append("wDistance:");
      sb.append(this.wDistance);
      first = false;
    }
    if (isSetXVals()) {
      if (!first) sb.append(", ");
      sb.append("xVals:");
      if (this.xVals == null) {
        sb.append("null");
      } else {
        sb.append(this.xVals);
      }
      first = false;
    }
    if (isSetYVals()) {
      if (!first) sb.append(", ");
      sb.append("yVals:");
      if (this.yVals == null) {
        sb.append("null");
      } else {
        sb.append(this.yVals);
      }
      first = false;
    }
    if (isSetXValsWithout()) {
      if (!first) sb.append(", ");
      sb.append("xValsWithout:");
      if (this.xValsWithout == null) {
        sb.append("null");
      } else {
        sb.append(this.xValsWithout);
      }
      first = false;
    }
    if (isSetYValsWithout()) {
      if (!first) sb.append(", ");
      sb.append("yValsWithout:");
      if (this.yValsWithout == null) {
        sb.append("null");
      } else {
        sb.append(this.yValsWithout);
      }
      first = false;
    }
    if (isSetExpectedValue()) {
      if (!first) sb.append(", ");
      sb.append("expectedValue:");
      sb.append(this.expectedValue);
      first = false;
    }
    if (isSetExpectedValueWithout()) {
      if (!first) sb.append(", ");
      sb.append("expectedValueWithout:");
      sb.append(this.expectedValueWithout);
      first = false;
    }
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      sb.append(this.error);
      first = false;
    }
    if (isSetErrorWithout()) {
      if (!first) sb.append(", ");
      sb.append("errorWithout:");
      sb.append(this.errorWithout);
      first = false;
    }
    if (isSetSamples()) {
      if (!first) sb.append(", ");
      sb.append("samples:");
      sb.append(this.samples);
      first = false;
    }
    if (isSetSamplesWithout()) {
      if (!first) sb.append(", ");
      sb.append("samplesWithout:");
      sb.append(this.samplesWithout);
      first = false;
    }
    if (isSetAppLabel()) {
      if (!first) sb.append(", ");
      sb.append("appLabel:");
      if (this.appLabel == null) {
        sb.append("null");
      } else {
        sb.append(this.appLabel);
      }
      first = false;
    }
    if (isSetAppPriority()) {
      if (!first) sb.append(", ");
      sb.append("appPriority:");
      if (this.appPriority == null) {
        sb.append("null");
      } else {
        sb.append(this.appPriority);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HogsBugsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HogsBugsStandardScheme getScheme() {
      return new HogsBugsStandardScheme();
    }
  }

  private static class HogsBugsStandardScheme extends org.apache.thrift.scheme.StandardScheme<HogsBugs> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HogsBugs struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // W_DISTANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.wDistance = iprot.readDouble();
              struct.setWDistanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // X_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.xVals = new java.util.ArrayList<java.lang.Double>(_list96.size);
                double _elem97;
                for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                {
                  _elem97 = iprot.readDouble();
                  struct.xVals.add(_elem97);
                }
                iprot.readListEnd();
              }
              struct.setXValsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // Y_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                struct.yVals = new java.util.ArrayList<java.lang.Double>(_list99.size);
                double _elem100;
                for (int _i101 = 0; _i101 < _list99.size; ++_i101)
                {
                  _elem100 = iprot.readDouble();
                  struct.yVals.add(_elem100);
                }
                iprot.readListEnd();
              }
              struct.setYValsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // X_VALS_WITHOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                struct.xValsWithout = new java.util.ArrayList<java.lang.Double>(_list102.size);
                double _elem103;
                for (int _i104 = 0; _i104 < _list102.size; ++_i104)
                {
                  _elem103 = iprot.readDouble();
                  struct.xValsWithout.add(_elem103);
                }
                iprot.readListEnd();
              }
              struct.setXValsWithoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // Y_VALS_WITHOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list105 = iprot.readListBegin();
                struct.yValsWithout = new java.util.ArrayList<java.lang.Double>(_list105.size);
                double _elem106;
                for (int _i107 = 0; _i107 < _list105.size; ++_i107)
                {
                  _elem106 = iprot.readDouble();
                  struct.yValsWithout.add(_elem106);
                }
                iprot.readListEnd();
              }
              struct.setYValsWithoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXPECTED_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.expectedValue = iprot.readDouble();
              struct.setExpectedValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXPECTED_VALUE_WITHOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.expectedValueWithout = iprot.readDouble();
              struct.setExpectedValueWithoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.error = iprot.readDouble();
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ERROR_WITHOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.errorWithout = iprot.readDouble();
              struct.setErrorWithoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SAMPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.samples = iprot.readDouble();
              struct.setSamplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SAMPLES_WITHOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.samplesWithout = iprot.readDouble();
              struct.setSamplesWithoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // APP_LABEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appLabel = iprot.readString();
              struct.setAppLabelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // APP_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appPriority = iprot.readString();
              struct.setAppPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HogsBugs struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appName != null) {
        if (struct.isSetAppName()) {
          oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
          oprot.writeString(struct.appName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWDistance()) {
        oprot.writeFieldBegin(W_DISTANCE_FIELD_DESC);
        oprot.writeDouble(struct.wDistance);
        oprot.writeFieldEnd();
      }
      if (struct.xVals != null) {
        if (struct.isSetXVals()) {
          oprot.writeFieldBegin(X_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.xVals.size()));
            for (double _iter108 : struct.xVals)
            {
              oprot.writeDouble(_iter108);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.yVals != null) {
        if (struct.isSetYVals()) {
          oprot.writeFieldBegin(Y_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.yVals.size()));
            for (double _iter109 : struct.yVals)
            {
              oprot.writeDouble(_iter109);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.xValsWithout != null) {
        if (struct.isSetXValsWithout()) {
          oprot.writeFieldBegin(X_VALS_WITHOUT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.xValsWithout.size()));
            for (double _iter110 : struct.xValsWithout)
            {
              oprot.writeDouble(_iter110);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.yValsWithout != null) {
        if (struct.isSetYValsWithout()) {
          oprot.writeFieldBegin(Y_VALS_WITHOUT_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.yValsWithout.size()));
            for (double _iter111 : struct.yValsWithout)
            {
              oprot.writeDouble(_iter111);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpectedValue()) {
        oprot.writeFieldBegin(EXPECTED_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.expectedValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExpectedValueWithout()) {
        oprot.writeFieldBegin(EXPECTED_VALUE_WITHOUT_FIELD_DESC);
        oprot.writeDouble(struct.expectedValueWithout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        oprot.writeDouble(struct.error);
        oprot.writeFieldEnd();
      }
      if (struct.isSetErrorWithout()) {
        oprot.writeFieldBegin(ERROR_WITHOUT_FIELD_DESC);
        oprot.writeDouble(struct.errorWithout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSamples()) {
        oprot.writeFieldBegin(SAMPLES_FIELD_DESC);
        oprot.writeDouble(struct.samples);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSamplesWithout()) {
        oprot.writeFieldBegin(SAMPLES_WITHOUT_FIELD_DESC);
        oprot.writeDouble(struct.samplesWithout);
        oprot.writeFieldEnd();
      }
      if (struct.appLabel != null) {
        if (struct.isSetAppLabel()) {
          oprot.writeFieldBegin(APP_LABEL_FIELD_DESC);
          oprot.writeString(struct.appLabel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appPriority != null) {
        if (struct.isSetAppPriority()) {
          oprot.writeFieldBegin(APP_PRIORITY_FIELD_DESC);
          oprot.writeString(struct.appPriority);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HogsBugsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public HogsBugsTupleScheme getScheme() {
      return new HogsBugsTupleScheme();
    }
  }

  private static class HogsBugsTupleScheme extends org.apache.thrift.scheme.TupleScheme<HogsBugs> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HogsBugs struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAppName()) {
        optionals.set(0);
      }
      if (struct.isSetWDistance()) {
        optionals.set(1);
      }
      if (struct.isSetXVals()) {
        optionals.set(2);
      }
      if (struct.isSetYVals()) {
        optionals.set(3);
      }
      if (struct.isSetXValsWithout()) {
        optionals.set(4);
      }
      if (struct.isSetYValsWithout()) {
        optionals.set(5);
      }
      if (struct.isSetExpectedValue()) {
        optionals.set(6);
      }
      if (struct.isSetExpectedValueWithout()) {
        optionals.set(7);
      }
      if (struct.isSetError()) {
        optionals.set(8);
      }
      if (struct.isSetErrorWithout()) {
        optionals.set(9);
      }
      if (struct.isSetSamples()) {
        optionals.set(10);
      }
      if (struct.isSetSamplesWithout()) {
        optionals.set(11);
      }
      if (struct.isSetAppLabel()) {
        optionals.set(12);
      }
      if (struct.isSetAppPriority()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetAppName()) {
        oprot.writeString(struct.appName);
      }
      if (struct.isSetWDistance()) {
        oprot.writeDouble(struct.wDistance);
      }
      if (struct.isSetXVals()) {
        {
          oprot.writeI32(struct.xVals.size());
          for (double _iter112 : struct.xVals)
          {
            oprot.writeDouble(_iter112);
          }
        }
      }
      if (struct.isSetYVals()) {
        {
          oprot.writeI32(struct.yVals.size());
          for (double _iter113 : struct.yVals)
          {
            oprot.writeDouble(_iter113);
          }
        }
      }
      if (struct.isSetXValsWithout()) {
        {
          oprot.writeI32(struct.xValsWithout.size());
          for (double _iter114 : struct.xValsWithout)
          {
            oprot.writeDouble(_iter114);
          }
        }
      }
      if (struct.isSetYValsWithout()) {
        {
          oprot.writeI32(struct.yValsWithout.size());
          for (double _iter115 : struct.yValsWithout)
          {
            oprot.writeDouble(_iter115);
          }
        }
      }
      if (struct.isSetExpectedValue()) {
        oprot.writeDouble(struct.expectedValue);
      }
      if (struct.isSetExpectedValueWithout()) {
        oprot.writeDouble(struct.expectedValueWithout);
      }
      if (struct.isSetError()) {
        oprot.writeDouble(struct.error);
      }
      if (struct.isSetErrorWithout()) {
        oprot.writeDouble(struct.errorWithout);
      }
      if (struct.isSetSamples()) {
        oprot.writeDouble(struct.samples);
      }
      if (struct.isSetSamplesWithout()) {
        oprot.writeDouble(struct.samplesWithout);
      }
      if (struct.isSetAppLabel()) {
        oprot.writeString(struct.appLabel);
      }
      if (struct.isSetAppPriority()) {
        oprot.writeString(struct.appPriority);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HogsBugs struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wDistance = iprot.readDouble();
        struct.setWDistanceIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list116 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.xVals = new java.util.ArrayList<java.lang.Double>(_list116.size);
          double _elem117;
          for (int _i118 = 0; _i118 < _list116.size; ++_i118)
          {
            _elem117 = iprot.readDouble();
            struct.xVals.add(_elem117);
          }
        }
        struct.setXValsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.yVals = new java.util.ArrayList<java.lang.Double>(_list119.size);
          double _elem120;
          for (int _i121 = 0; _i121 < _list119.size; ++_i121)
          {
            _elem120 = iprot.readDouble();
            struct.yVals.add(_elem120);
          }
        }
        struct.setYValsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.xValsWithout = new java.util.ArrayList<java.lang.Double>(_list122.size);
          double _elem123;
          for (int _i124 = 0; _i124 < _list122.size; ++_i124)
          {
            _elem123 = iprot.readDouble();
            struct.xValsWithout.add(_elem123);
          }
        }
        struct.setXValsWithoutIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.yValsWithout = new java.util.ArrayList<java.lang.Double>(_list125.size);
          double _elem126;
          for (int _i127 = 0; _i127 < _list125.size; ++_i127)
          {
            _elem126 = iprot.readDouble();
            struct.yValsWithout.add(_elem126);
          }
        }
        struct.setYValsWithoutIsSet(true);
      }
      if (incoming.get(6)) {
        struct.expectedValue = iprot.readDouble();
        struct.setExpectedValueIsSet(true);
      }
      if (incoming.get(7)) {
        struct.expectedValueWithout = iprot.readDouble();
        struct.setExpectedValueWithoutIsSet(true);
      }
      if (incoming.get(8)) {
        struct.error = iprot.readDouble();
        struct.setErrorIsSet(true);
      }
      if (incoming.get(9)) {
        struct.errorWithout = iprot.readDouble();
        struct.setErrorWithoutIsSet(true);
      }
      if (incoming.get(10)) {
        struct.samples = iprot.readDouble();
        struct.setSamplesIsSet(true);
      }
      if (incoming.get(11)) {
        struct.samplesWithout = iprot.readDouble();
        struct.setSamplesWithoutIsSet(true);
      }
      if (incoming.get(12)) {
        struct.appLabel = iprot.readString();
        struct.setAppLabelIsSet(true);
      }
      if (incoming.get(13)) {
        struct.appPriority = iprot.readString();
        struct.setAppPriorityIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

