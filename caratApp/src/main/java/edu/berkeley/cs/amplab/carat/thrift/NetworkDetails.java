/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.amplab.carat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-02-14")
public class NetworkDetails implements org.apache.thrift.TBase<NetworkDetails, NetworkDetails._Fields>, java.io.Serializable, Cloneable, Comparable<NetworkDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NetworkDetails");

  private static final org.apache.thrift.protocol.TField NETWORK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("networkType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MOBILE_NETWORK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileNetworkType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MOBILE_DATA_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileDataStatus", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MOBILE_DATA_ACTIVITY_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileDataActivity", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ROAMING_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("roamingEnabled", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField WIFI_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("wifiStatus", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField WIFI_SIGNAL_STRENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("wifiSignalStrength", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField WIFI_LINK_SPEED_FIELD_DESC = new org.apache.thrift.protocol.TField("wifiLinkSpeed", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField NETWORK_STATISTICS_FIELD_DESC = new org.apache.thrift.protocol.TField("networkStatistics", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField WIFI_AP_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("wifiApStatus", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField NETWORK_OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("networkOperator", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SIM_OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("simOperator", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField MCC_FIELD_DESC = new org.apache.thrift.protocol.TField("mcc", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField MNC_FIELD_DESC = new org.apache.thrift.protocol.TField("mnc", org.apache.thrift.protocol.TType.STRING, (short)14);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NetworkDetailsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NetworkDetailsTupleSchemeFactory();

  public java.lang.String networkType; // optional
  public java.lang.String mobileNetworkType; // optional
  public java.lang.String mobileDataStatus; // optional
  public java.lang.String mobileDataActivity; // optional
  public boolean roamingEnabled; // optional
  public java.lang.String wifiStatus; // optional
  public int wifiSignalStrength; // optional
  public int wifiLinkSpeed; // optional
  public NetworkStatistics networkStatistics; // optional
  public java.lang.String wifiApStatus; // optional
  public java.lang.String networkOperator; // optional
  public java.lang.String simOperator; // optional
  public java.lang.String mcc; // optional
  public java.lang.String mnc; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NETWORK_TYPE((short)1, "networkType"),
    MOBILE_NETWORK_TYPE((short)2, "mobileNetworkType"),
    MOBILE_DATA_STATUS((short)3, "mobileDataStatus"),
    MOBILE_DATA_ACTIVITY((short)4, "mobileDataActivity"),
    ROAMING_ENABLED((short)5, "roamingEnabled"),
    WIFI_STATUS((short)6, "wifiStatus"),
    WIFI_SIGNAL_STRENGTH((short)7, "wifiSignalStrength"),
    WIFI_LINK_SPEED((short)8, "wifiLinkSpeed"),
    NETWORK_STATISTICS((short)9, "networkStatistics"),
    WIFI_AP_STATUS((short)10, "wifiApStatus"),
    NETWORK_OPERATOR((short)11, "networkOperator"),
    SIM_OPERATOR((short)12, "simOperator"),
    MCC((short)13, "mcc"),
    MNC((short)14, "mnc");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NETWORK_TYPE
          return NETWORK_TYPE;
        case 2: // MOBILE_NETWORK_TYPE
          return MOBILE_NETWORK_TYPE;
        case 3: // MOBILE_DATA_STATUS
          return MOBILE_DATA_STATUS;
        case 4: // MOBILE_DATA_ACTIVITY
          return MOBILE_DATA_ACTIVITY;
        case 5: // ROAMING_ENABLED
          return ROAMING_ENABLED;
        case 6: // WIFI_STATUS
          return WIFI_STATUS;
        case 7: // WIFI_SIGNAL_STRENGTH
          return WIFI_SIGNAL_STRENGTH;
        case 8: // WIFI_LINK_SPEED
          return WIFI_LINK_SPEED;
        case 9: // NETWORK_STATISTICS
          return NETWORK_STATISTICS;
        case 10: // WIFI_AP_STATUS
          return WIFI_AP_STATUS;
        case 11: // NETWORK_OPERATOR
          return NETWORK_OPERATOR;
        case 12: // SIM_OPERATOR
          return SIM_OPERATOR;
        case 13: // MCC
          return MCC;
        case 14: // MNC
          return MNC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ROAMINGENABLED_ISSET_ID = 0;
  private static final int __WIFISIGNALSTRENGTH_ISSET_ID = 1;
  private static final int __WIFILINKSPEED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NETWORK_TYPE,_Fields.MOBILE_NETWORK_TYPE,_Fields.MOBILE_DATA_STATUS,_Fields.MOBILE_DATA_ACTIVITY,_Fields.ROAMING_ENABLED,_Fields.WIFI_STATUS,_Fields.WIFI_SIGNAL_STRENGTH,_Fields.WIFI_LINK_SPEED,_Fields.NETWORK_STATISTICS,_Fields.WIFI_AP_STATUS,_Fields.NETWORK_OPERATOR,_Fields.SIM_OPERATOR,_Fields.MCC,_Fields.MNC};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NETWORK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("networkType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_NETWORK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mobileNetworkType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_DATA_STATUS, new org.apache.thrift.meta_data.FieldMetaData("mobileDataStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_DATA_ACTIVITY, new org.apache.thrift.meta_data.FieldMetaData("mobileDataActivity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROAMING_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("roamingEnabled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WIFI_STATUS, new org.apache.thrift.meta_data.FieldMetaData("wifiStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WIFI_SIGNAL_STRENGTH, new org.apache.thrift.meta_data.FieldMetaData("wifiSignalStrength", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WIFI_LINK_SPEED, new org.apache.thrift.meta_data.FieldMetaData("wifiLinkSpeed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NETWORK_STATISTICS, new org.apache.thrift.meta_data.FieldMetaData("networkStatistics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetworkStatistics.class)));
    tmpMap.put(_Fields.WIFI_AP_STATUS, new org.apache.thrift.meta_data.FieldMetaData("wifiApStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NETWORK_OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("networkOperator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIM_OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("simOperator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MCC, new org.apache.thrift.meta_data.FieldMetaData("mcc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MNC, new org.apache.thrift.meta_data.FieldMetaData("mnc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NetworkDetails.class, metaDataMap);
  }

  public NetworkDetails() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NetworkDetails(NetworkDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNetworkType()) {
      this.networkType = other.networkType;
    }
    if (other.isSetMobileNetworkType()) {
      this.mobileNetworkType = other.mobileNetworkType;
    }
    if (other.isSetMobileDataStatus()) {
      this.mobileDataStatus = other.mobileDataStatus;
    }
    if (other.isSetMobileDataActivity()) {
      this.mobileDataActivity = other.mobileDataActivity;
    }
    this.roamingEnabled = other.roamingEnabled;
    if (other.isSetWifiStatus()) {
      this.wifiStatus = other.wifiStatus;
    }
    this.wifiSignalStrength = other.wifiSignalStrength;
    this.wifiLinkSpeed = other.wifiLinkSpeed;
    if (other.isSetNetworkStatistics()) {
      this.networkStatistics = new NetworkStatistics(other.networkStatistics);
    }
    if (other.isSetWifiApStatus()) {
      this.wifiApStatus = other.wifiApStatus;
    }
    if (other.isSetNetworkOperator()) {
      this.networkOperator = other.networkOperator;
    }
    if (other.isSetSimOperator()) {
      this.simOperator = other.simOperator;
    }
    if (other.isSetMcc()) {
      this.mcc = other.mcc;
    }
    if (other.isSetMnc()) {
      this.mnc = other.mnc;
    }
  }

  public NetworkDetails deepCopy() {
    return new NetworkDetails(this);
  }

  @Override
  public void clear() {
    this.networkType = null;
    this.mobileNetworkType = null;
    this.mobileDataStatus = null;
    this.mobileDataActivity = null;
    setRoamingEnabledIsSet(false);
    this.roamingEnabled = false;
    this.wifiStatus = null;
    setWifiSignalStrengthIsSet(false);
    this.wifiSignalStrength = 0;
    setWifiLinkSpeedIsSet(false);
    this.wifiLinkSpeed = 0;
    this.networkStatistics = null;
    this.wifiApStatus = null;
    this.networkOperator = null;
    this.simOperator = null;
    this.mcc = null;
    this.mnc = null;
  }

  public java.lang.String getNetworkType() {
    return this.networkType;
  }

  public NetworkDetails setNetworkType(java.lang.String networkType) {
    this.networkType = networkType;
    return this;
  }

  public void unsetNetworkType() {
    this.networkType = null;
  }

  /** Returns true if field networkType is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkType() {
    return this.networkType != null;
  }

  public void setNetworkTypeIsSet(boolean value) {
    if (!value) {
      this.networkType = null;
    }
  }

  public java.lang.String getMobileNetworkType() {
    return this.mobileNetworkType;
  }

  public NetworkDetails setMobileNetworkType(java.lang.String mobileNetworkType) {
    this.mobileNetworkType = mobileNetworkType;
    return this;
  }

  public void unsetMobileNetworkType() {
    this.mobileNetworkType = null;
  }

  /** Returns true if field mobileNetworkType is set (has been assigned a value) and false otherwise */
  public boolean isSetMobileNetworkType() {
    return this.mobileNetworkType != null;
  }

  public void setMobileNetworkTypeIsSet(boolean value) {
    if (!value) {
      this.mobileNetworkType = null;
    }
  }

  public java.lang.String getMobileDataStatus() {
    return this.mobileDataStatus;
  }

  public NetworkDetails setMobileDataStatus(java.lang.String mobileDataStatus) {
    this.mobileDataStatus = mobileDataStatus;
    return this;
  }

  public void unsetMobileDataStatus() {
    this.mobileDataStatus = null;
  }

  /** Returns true if field mobileDataStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMobileDataStatus() {
    return this.mobileDataStatus != null;
  }

  public void setMobileDataStatusIsSet(boolean value) {
    if (!value) {
      this.mobileDataStatus = null;
    }
  }

  public java.lang.String getMobileDataActivity() {
    return this.mobileDataActivity;
  }

  public NetworkDetails setMobileDataActivity(java.lang.String mobileDataActivity) {
    this.mobileDataActivity = mobileDataActivity;
    return this;
  }

  public void unsetMobileDataActivity() {
    this.mobileDataActivity = null;
  }

  /** Returns true if field mobileDataActivity is set (has been assigned a value) and false otherwise */
  public boolean isSetMobileDataActivity() {
    return this.mobileDataActivity != null;
  }

  public void setMobileDataActivityIsSet(boolean value) {
    if (!value) {
      this.mobileDataActivity = null;
    }
  }

  public boolean isRoamingEnabled() {
    return this.roamingEnabled;
  }

  public NetworkDetails setRoamingEnabled(boolean roamingEnabled) {
    this.roamingEnabled = roamingEnabled;
    setRoamingEnabledIsSet(true);
    return this;
  }

  public void unsetRoamingEnabled() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROAMINGENABLED_ISSET_ID);
  }

  /** Returns true if field roamingEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetRoamingEnabled() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROAMINGENABLED_ISSET_ID);
  }

  public void setRoamingEnabledIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROAMINGENABLED_ISSET_ID, value);
  }

  public java.lang.String getWifiStatus() {
    return this.wifiStatus;
  }

  public NetworkDetails setWifiStatus(java.lang.String wifiStatus) {
    this.wifiStatus = wifiStatus;
    return this;
  }

  public void unsetWifiStatus() {
    this.wifiStatus = null;
  }

  /** Returns true if field wifiStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetWifiStatus() {
    return this.wifiStatus != null;
  }

  public void setWifiStatusIsSet(boolean value) {
    if (!value) {
      this.wifiStatus = null;
    }
  }

  public int getWifiSignalStrength() {
    return this.wifiSignalStrength;
  }

  public NetworkDetails setWifiSignalStrength(int wifiSignalStrength) {
    this.wifiSignalStrength = wifiSignalStrength;
    setWifiSignalStrengthIsSet(true);
    return this;
  }

  public void unsetWifiSignalStrength() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WIFISIGNALSTRENGTH_ISSET_ID);
  }

  /** Returns true if field wifiSignalStrength is set (has been assigned a value) and false otherwise */
  public boolean isSetWifiSignalStrength() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WIFISIGNALSTRENGTH_ISSET_ID);
  }

  public void setWifiSignalStrengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WIFISIGNALSTRENGTH_ISSET_ID, value);
  }

  public int getWifiLinkSpeed() {
    return this.wifiLinkSpeed;
  }

  public NetworkDetails setWifiLinkSpeed(int wifiLinkSpeed) {
    this.wifiLinkSpeed = wifiLinkSpeed;
    setWifiLinkSpeedIsSet(true);
    return this;
  }

  public void unsetWifiLinkSpeed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WIFILINKSPEED_ISSET_ID);
  }

  /** Returns true if field wifiLinkSpeed is set (has been assigned a value) and false otherwise */
  public boolean isSetWifiLinkSpeed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WIFILINKSPEED_ISSET_ID);
  }

  public void setWifiLinkSpeedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WIFILINKSPEED_ISSET_ID, value);
  }

  public NetworkStatistics getNetworkStatistics() {
    return this.networkStatistics;
  }

  public NetworkDetails setNetworkStatistics(NetworkStatistics networkStatistics) {
    this.networkStatistics = networkStatistics;
    return this;
  }

  public void unsetNetworkStatistics() {
    this.networkStatistics = null;
  }

  /** Returns true if field networkStatistics is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkStatistics() {
    return this.networkStatistics != null;
  }

  public void setNetworkStatisticsIsSet(boolean value) {
    if (!value) {
      this.networkStatistics = null;
    }
  }

  public java.lang.String getWifiApStatus() {
    return this.wifiApStatus;
  }

  public NetworkDetails setWifiApStatus(java.lang.String wifiApStatus) {
    this.wifiApStatus = wifiApStatus;
    return this;
  }

  public void unsetWifiApStatus() {
    this.wifiApStatus = null;
  }

  /** Returns true if field wifiApStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetWifiApStatus() {
    return this.wifiApStatus != null;
  }

  public void setWifiApStatusIsSet(boolean value) {
    if (!value) {
      this.wifiApStatus = null;
    }
  }

  public java.lang.String getNetworkOperator() {
    return this.networkOperator;
  }

  public NetworkDetails setNetworkOperator(java.lang.String networkOperator) {
    this.networkOperator = networkOperator;
    return this;
  }

  public void unsetNetworkOperator() {
    this.networkOperator = null;
  }

  /** Returns true if field networkOperator is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkOperator() {
    return this.networkOperator != null;
  }

  public void setNetworkOperatorIsSet(boolean value) {
    if (!value) {
      this.networkOperator = null;
    }
  }

  public java.lang.String getSimOperator() {
    return this.simOperator;
  }

  public NetworkDetails setSimOperator(java.lang.String simOperator) {
    this.simOperator = simOperator;
    return this;
  }

  public void unsetSimOperator() {
    this.simOperator = null;
  }

  /** Returns true if field simOperator is set (has been assigned a value) and false otherwise */
  public boolean isSetSimOperator() {
    return this.simOperator != null;
  }

  public void setSimOperatorIsSet(boolean value) {
    if (!value) {
      this.simOperator = null;
    }
  }

  public java.lang.String getMcc() {
    return this.mcc;
  }

  public NetworkDetails setMcc(java.lang.String mcc) {
    this.mcc = mcc;
    return this;
  }

  public void unsetMcc() {
    this.mcc = null;
  }

  /** Returns true if field mcc is set (has been assigned a value) and false otherwise */
  public boolean isSetMcc() {
    return this.mcc != null;
  }

  public void setMccIsSet(boolean value) {
    if (!value) {
      this.mcc = null;
    }
  }

  public java.lang.String getMnc() {
    return this.mnc;
  }

  public NetworkDetails setMnc(java.lang.String mnc) {
    this.mnc = mnc;
    return this;
  }

  public void unsetMnc() {
    this.mnc = null;
  }

  /** Returns true if field mnc is set (has been assigned a value) and false otherwise */
  public boolean isSetMnc() {
    return this.mnc != null;
  }

  public void setMncIsSet(boolean value) {
    if (!value) {
      this.mnc = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NETWORK_TYPE:
      if (value == null) {
        unsetNetworkType();
      } else {
        setNetworkType((java.lang.String)value);
      }
      break;

    case MOBILE_NETWORK_TYPE:
      if (value == null) {
        unsetMobileNetworkType();
      } else {
        setMobileNetworkType((java.lang.String)value);
      }
      break;

    case MOBILE_DATA_STATUS:
      if (value == null) {
        unsetMobileDataStatus();
      } else {
        setMobileDataStatus((java.lang.String)value);
      }
      break;

    case MOBILE_DATA_ACTIVITY:
      if (value == null) {
        unsetMobileDataActivity();
      } else {
        setMobileDataActivity((java.lang.String)value);
      }
      break;

    case ROAMING_ENABLED:
      if (value == null) {
        unsetRoamingEnabled();
      } else {
        setRoamingEnabled((java.lang.Boolean)value);
      }
      break;

    case WIFI_STATUS:
      if (value == null) {
        unsetWifiStatus();
      } else {
        setWifiStatus((java.lang.String)value);
      }
      break;

    case WIFI_SIGNAL_STRENGTH:
      if (value == null) {
        unsetWifiSignalStrength();
      } else {
        setWifiSignalStrength((java.lang.Integer)value);
      }
      break;

    case WIFI_LINK_SPEED:
      if (value == null) {
        unsetWifiLinkSpeed();
      } else {
        setWifiLinkSpeed((java.lang.Integer)value);
      }
      break;

    case NETWORK_STATISTICS:
      if (value == null) {
        unsetNetworkStatistics();
      } else {
        setNetworkStatistics((NetworkStatistics)value);
      }
      break;

    case WIFI_AP_STATUS:
      if (value == null) {
        unsetWifiApStatus();
      } else {
        setWifiApStatus((java.lang.String)value);
      }
      break;

    case NETWORK_OPERATOR:
      if (value == null) {
        unsetNetworkOperator();
      } else {
        setNetworkOperator((java.lang.String)value);
      }
      break;

    case SIM_OPERATOR:
      if (value == null) {
        unsetSimOperator();
      } else {
        setSimOperator((java.lang.String)value);
      }
      break;

    case MCC:
      if (value == null) {
        unsetMcc();
      } else {
        setMcc((java.lang.String)value);
      }
      break;

    case MNC:
      if (value == null) {
        unsetMnc();
      } else {
        setMnc((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NETWORK_TYPE:
      return getNetworkType();

    case MOBILE_NETWORK_TYPE:
      return getMobileNetworkType();

    case MOBILE_DATA_STATUS:
      return getMobileDataStatus();

    case MOBILE_DATA_ACTIVITY:
      return getMobileDataActivity();

    case ROAMING_ENABLED:
      return isRoamingEnabled();

    case WIFI_STATUS:
      return getWifiStatus();

    case WIFI_SIGNAL_STRENGTH:
      return getWifiSignalStrength();

    case WIFI_LINK_SPEED:
      return getWifiLinkSpeed();

    case NETWORK_STATISTICS:
      return getNetworkStatistics();

    case WIFI_AP_STATUS:
      return getWifiApStatus();

    case NETWORK_OPERATOR:
      return getNetworkOperator();

    case SIM_OPERATOR:
      return getSimOperator();

    case MCC:
      return getMcc();

    case MNC:
      return getMnc();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NETWORK_TYPE:
      return isSetNetworkType();
    case MOBILE_NETWORK_TYPE:
      return isSetMobileNetworkType();
    case MOBILE_DATA_STATUS:
      return isSetMobileDataStatus();
    case MOBILE_DATA_ACTIVITY:
      return isSetMobileDataActivity();
    case ROAMING_ENABLED:
      return isSetRoamingEnabled();
    case WIFI_STATUS:
      return isSetWifiStatus();
    case WIFI_SIGNAL_STRENGTH:
      return isSetWifiSignalStrength();
    case WIFI_LINK_SPEED:
      return isSetWifiLinkSpeed();
    case NETWORK_STATISTICS:
      return isSetNetworkStatistics();
    case WIFI_AP_STATUS:
      return isSetWifiApStatus();
    case NETWORK_OPERATOR:
      return isSetNetworkOperator();
    case SIM_OPERATOR:
      return isSetSimOperator();
    case MCC:
      return isSetMcc();
    case MNC:
      return isSetMnc();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof NetworkDetails)
      return this.equals((NetworkDetails)that);
    return false;
  }

  public boolean equals(NetworkDetails that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_networkType = true && this.isSetNetworkType();
    boolean that_present_networkType = true && that.isSetNetworkType();
    if (this_present_networkType || that_present_networkType) {
      if (!(this_present_networkType && that_present_networkType))
        return false;
      if (!this.networkType.equals(that.networkType))
        return false;
    }

    boolean this_present_mobileNetworkType = true && this.isSetMobileNetworkType();
    boolean that_present_mobileNetworkType = true && that.isSetMobileNetworkType();
    if (this_present_mobileNetworkType || that_present_mobileNetworkType) {
      if (!(this_present_mobileNetworkType && that_present_mobileNetworkType))
        return false;
      if (!this.mobileNetworkType.equals(that.mobileNetworkType))
        return false;
    }

    boolean this_present_mobileDataStatus = true && this.isSetMobileDataStatus();
    boolean that_present_mobileDataStatus = true && that.isSetMobileDataStatus();
    if (this_present_mobileDataStatus || that_present_mobileDataStatus) {
      if (!(this_present_mobileDataStatus && that_present_mobileDataStatus))
        return false;
      if (!this.mobileDataStatus.equals(that.mobileDataStatus))
        return false;
    }

    boolean this_present_mobileDataActivity = true && this.isSetMobileDataActivity();
    boolean that_present_mobileDataActivity = true && that.isSetMobileDataActivity();
    if (this_present_mobileDataActivity || that_present_mobileDataActivity) {
      if (!(this_present_mobileDataActivity && that_present_mobileDataActivity))
        return false;
      if (!this.mobileDataActivity.equals(that.mobileDataActivity))
        return false;
    }

    boolean this_present_roamingEnabled = true && this.isSetRoamingEnabled();
    boolean that_present_roamingEnabled = true && that.isSetRoamingEnabled();
    if (this_present_roamingEnabled || that_present_roamingEnabled) {
      if (!(this_present_roamingEnabled && that_present_roamingEnabled))
        return false;
      if (this.roamingEnabled != that.roamingEnabled)
        return false;
    }

    boolean this_present_wifiStatus = true && this.isSetWifiStatus();
    boolean that_present_wifiStatus = true && that.isSetWifiStatus();
    if (this_present_wifiStatus || that_present_wifiStatus) {
      if (!(this_present_wifiStatus && that_present_wifiStatus))
        return false;
      if (!this.wifiStatus.equals(that.wifiStatus))
        return false;
    }

    boolean this_present_wifiSignalStrength = true && this.isSetWifiSignalStrength();
    boolean that_present_wifiSignalStrength = true && that.isSetWifiSignalStrength();
    if (this_present_wifiSignalStrength || that_present_wifiSignalStrength) {
      if (!(this_present_wifiSignalStrength && that_present_wifiSignalStrength))
        return false;
      if (this.wifiSignalStrength != that.wifiSignalStrength)
        return false;
    }

    boolean this_present_wifiLinkSpeed = true && this.isSetWifiLinkSpeed();
    boolean that_present_wifiLinkSpeed = true && that.isSetWifiLinkSpeed();
    if (this_present_wifiLinkSpeed || that_present_wifiLinkSpeed) {
      if (!(this_present_wifiLinkSpeed && that_present_wifiLinkSpeed))
        return false;
      if (this.wifiLinkSpeed != that.wifiLinkSpeed)
        return false;
    }

    boolean this_present_networkStatistics = true && this.isSetNetworkStatistics();
    boolean that_present_networkStatistics = true && that.isSetNetworkStatistics();
    if (this_present_networkStatistics || that_present_networkStatistics) {
      if (!(this_present_networkStatistics && that_present_networkStatistics))
        return false;
      if (!this.networkStatistics.equals(that.networkStatistics))
        return false;
    }

    boolean this_present_wifiApStatus = true && this.isSetWifiApStatus();
    boolean that_present_wifiApStatus = true && that.isSetWifiApStatus();
    if (this_present_wifiApStatus || that_present_wifiApStatus) {
      if (!(this_present_wifiApStatus && that_present_wifiApStatus))
        return false;
      if (!this.wifiApStatus.equals(that.wifiApStatus))
        return false;
    }

    boolean this_present_networkOperator = true && this.isSetNetworkOperator();
    boolean that_present_networkOperator = true && that.isSetNetworkOperator();
    if (this_present_networkOperator || that_present_networkOperator) {
      if (!(this_present_networkOperator && that_present_networkOperator))
        return false;
      if (!this.networkOperator.equals(that.networkOperator))
        return false;
    }

    boolean this_present_simOperator = true && this.isSetSimOperator();
    boolean that_present_simOperator = true && that.isSetSimOperator();
    if (this_present_simOperator || that_present_simOperator) {
      if (!(this_present_simOperator && that_present_simOperator))
        return false;
      if (!this.simOperator.equals(that.simOperator))
        return false;
    }

    boolean this_present_mcc = true && this.isSetMcc();
    boolean that_present_mcc = true && that.isSetMcc();
    if (this_present_mcc || that_present_mcc) {
      if (!(this_present_mcc && that_present_mcc))
        return false;
      if (!this.mcc.equals(that.mcc))
        return false;
    }

    boolean this_present_mnc = true && this.isSetMnc();
    boolean that_present_mnc = true && that.isSetMnc();
    if (this_present_mnc || that_present_mnc) {
      if (!(this_present_mnc && that_present_mnc))
        return false;
      if (!this.mnc.equals(that.mnc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetNetworkType()) ? 131071 : 524287);
    if (isSetNetworkType())
      hashCode = hashCode * 8191 + networkType.hashCode();

    hashCode = hashCode * 8191 + ((isSetMobileNetworkType()) ? 131071 : 524287);
    if (isSetMobileNetworkType())
      hashCode = hashCode * 8191 + mobileNetworkType.hashCode();

    hashCode = hashCode * 8191 + ((isSetMobileDataStatus()) ? 131071 : 524287);
    if (isSetMobileDataStatus())
      hashCode = hashCode * 8191 + mobileDataStatus.hashCode();

    hashCode = hashCode * 8191 + ((isSetMobileDataActivity()) ? 131071 : 524287);
    if (isSetMobileDataActivity())
      hashCode = hashCode * 8191 + mobileDataActivity.hashCode();

    hashCode = hashCode * 8191 + ((isSetRoamingEnabled()) ? 131071 : 524287);
    if (isSetRoamingEnabled())
      hashCode = hashCode * 8191 + ((roamingEnabled) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetWifiStatus()) ? 131071 : 524287);
    if (isSetWifiStatus())
      hashCode = hashCode * 8191 + wifiStatus.hashCode();

    hashCode = hashCode * 8191 + ((isSetWifiSignalStrength()) ? 131071 : 524287);
    if (isSetWifiSignalStrength())
      hashCode = hashCode * 8191 + wifiSignalStrength;

    hashCode = hashCode * 8191 + ((isSetWifiLinkSpeed()) ? 131071 : 524287);
    if (isSetWifiLinkSpeed())
      hashCode = hashCode * 8191 + wifiLinkSpeed;

    hashCode = hashCode * 8191 + ((isSetNetworkStatistics()) ? 131071 : 524287);
    if (isSetNetworkStatistics())
      hashCode = hashCode * 8191 + networkStatistics.hashCode();

    hashCode = hashCode * 8191 + ((isSetWifiApStatus()) ? 131071 : 524287);
    if (isSetWifiApStatus())
      hashCode = hashCode * 8191 + wifiApStatus.hashCode();

    hashCode = hashCode * 8191 + ((isSetNetworkOperator()) ? 131071 : 524287);
    if (isSetNetworkOperator())
      hashCode = hashCode * 8191 + networkOperator.hashCode();

    hashCode = hashCode * 8191 + ((isSetSimOperator()) ? 131071 : 524287);
    if (isSetSimOperator())
      hashCode = hashCode * 8191 + simOperator.hashCode();

    hashCode = hashCode * 8191 + ((isSetMcc()) ? 131071 : 524287);
    if (isSetMcc())
      hashCode = hashCode * 8191 + mcc.hashCode();

    hashCode = hashCode * 8191 + ((isSetMnc()) ? 131071 : 524287);
    if (isSetMnc())
      hashCode = hashCode * 8191 + mnc.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NetworkDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNetworkType()).compareTo(other.isSetNetworkType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkType, other.networkType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMobileNetworkType()).compareTo(other.isSetMobileNetworkType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobileNetworkType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileNetworkType, other.mobileNetworkType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMobileDataStatus()).compareTo(other.isSetMobileDataStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobileDataStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileDataStatus, other.mobileDataStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMobileDataActivity()).compareTo(other.isSetMobileDataActivity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobileDataActivity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileDataActivity, other.mobileDataActivity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRoamingEnabled()).compareTo(other.isSetRoamingEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoamingEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roamingEnabled, other.roamingEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWifiStatus()).compareTo(other.isSetWifiStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWifiStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wifiStatus, other.wifiStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWifiSignalStrength()).compareTo(other.isSetWifiSignalStrength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWifiSignalStrength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wifiSignalStrength, other.wifiSignalStrength);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWifiLinkSpeed()).compareTo(other.isSetWifiLinkSpeed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWifiLinkSpeed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wifiLinkSpeed, other.wifiLinkSpeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNetworkStatistics()).compareTo(other.isSetNetworkStatistics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkStatistics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkStatistics, other.networkStatistics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWifiApStatus()).compareTo(other.isSetWifiApStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWifiApStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wifiApStatus, other.wifiApStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNetworkOperator()).compareTo(other.isSetNetworkOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkOperator, other.networkOperator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSimOperator()).compareTo(other.isSetSimOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSimOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.simOperator, other.simOperator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMcc()).compareTo(other.isSetMcc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMcc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mcc, other.mcc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMnc()).compareTo(other.isSetMnc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMnc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mnc, other.mnc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NetworkDetails(");
    boolean first = true;

    if (isSetNetworkType()) {
      sb.append("networkType:");
      if (this.networkType == null) {
        sb.append("null");
      } else {
        sb.append(this.networkType);
      }
      first = false;
    }
    if (isSetMobileNetworkType()) {
      if (!first) sb.append(", ");
      sb.append("mobileNetworkType:");
      if (this.mobileNetworkType == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileNetworkType);
      }
      first = false;
    }
    if (isSetMobileDataStatus()) {
      if (!first) sb.append(", ");
      sb.append("mobileDataStatus:");
      if (this.mobileDataStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileDataStatus);
      }
      first = false;
    }
    if (isSetMobileDataActivity()) {
      if (!first) sb.append(", ");
      sb.append("mobileDataActivity:");
      if (this.mobileDataActivity == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileDataActivity);
      }
      first = false;
    }
    if (isSetRoamingEnabled()) {
      if (!first) sb.append(", ");
      sb.append("roamingEnabled:");
      sb.append(this.roamingEnabled);
      first = false;
    }
    if (isSetWifiStatus()) {
      if (!first) sb.append(", ");
      sb.append("wifiStatus:");
      if (this.wifiStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.wifiStatus);
      }
      first = false;
    }
    if (isSetWifiSignalStrength()) {
      if (!first) sb.append(", ");
      sb.append("wifiSignalStrength:");
      sb.append(this.wifiSignalStrength);
      first = false;
    }
    if (isSetWifiLinkSpeed()) {
      if (!first) sb.append(", ");
      sb.append("wifiLinkSpeed:");
      sb.append(this.wifiLinkSpeed);
      first = false;
    }
    if (isSetNetworkStatistics()) {
      if (!first) sb.append(", ");
      sb.append("networkStatistics:");
      if (this.networkStatistics == null) {
        sb.append("null");
      } else {
        sb.append(this.networkStatistics);
      }
      first = false;
    }
    if (isSetWifiApStatus()) {
      if (!first) sb.append(", ");
      sb.append("wifiApStatus:");
      if (this.wifiApStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.wifiApStatus);
      }
      first = false;
    }
    if (isSetNetworkOperator()) {
      if (!first) sb.append(", ");
      sb.append("networkOperator:");
      if (this.networkOperator == null) {
        sb.append("null");
      } else {
        sb.append(this.networkOperator);
      }
      first = false;
    }
    if (isSetSimOperator()) {
      if (!first) sb.append(", ");
      sb.append("simOperator:");
      if (this.simOperator == null) {
        sb.append("null");
      } else {
        sb.append(this.simOperator);
      }
      first = false;
    }
    if (isSetMcc()) {
      if (!first) sb.append(", ");
      sb.append("mcc:");
      if (this.mcc == null) {
        sb.append("null");
      } else {
        sb.append(this.mcc);
      }
      first = false;
    }
    if (isSetMnc()) {
      if (!first) sb.append(", ");
      sb.append("mnc:");
      if (this.mnc == null) {
        sb.append("null");
      } else {
        sb.append(this.mnc);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (networkStatistics != null) {
      networkStatistics.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NetworkDetailsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NetworkDetailsStandardScheme getScheme() {
      return new NetworkDetailsStandardScheme();
    }
  }

  private static class NetworkDetailsStandardScheme extends org.apache.thrift.scheme.StandardScheme<NetworkDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NetworkDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NETWORK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.networkType = iprot.readString();
              struct.setNetworkTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MOBILE_NETWORK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobileNetworkType = iprot.readString();
              struct.setMobileNetworkTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MOBILE_DATA_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobileDataStatus = iprot.readString();
              struct.setMobileDataStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MOBILE_DATA_ACTIVITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobileDataActivity = iprot.readString();
              struct.setMobileDataActivityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ROAMING_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.roamingEnabled = iprot.readBool();
              struct.setRoamingEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WIFI_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wifiStatus = iprot.readString();
              struct.setWifiStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WIFI_SIGNAL_STRENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wifiSignalStrength = iprot.readI32();
              struct.setWifiSignalStrengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WIFI_LINK_SPEED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wifiLinkSpeed = iprot.readI32();
              struct.setWifiLinkSpeedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NETWORK_STATISTICS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.networkStatistics = new NetworkStatistics();
              struct.networkStatistics.read(iprot);
              struct.setNetworkStatisticsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WIFI_AP_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wifiApStatus = iprot.readString();
              struct.setWifiApStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NETWORK_OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.networkOperator = iprot.readString();
              struct.setNetworkOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SIM_OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.simOperator = iprot.readString();
              struct.setSimOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // MCC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mcc = iprot.readString();
              struct.setMccIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // MNC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mnc = iprot.readString();
              struct.setMncIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NetworkDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.networkType != null) {
        if (struct.isSetNetworkType()) {
          oprot.writeFieldBegin(NETWORK_TYPE_FIELD_DESC);
          oprot.writeString(struct.networkType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobileNetworkType != null) {
        if (struct.isSetMobileNetworkType()) {
          oprot.writeFieldBegin(MOBILE_NETWORK_TYPE_FIELD_DESC);
          oprot.writeString(struct.mobileNetworkType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobileDataStatus != null) {
        if (struct.isSetMobileDataStatus()) {
          oprot.writeFieldBegin(MOBILE_DATA_STATUS_FIELD_DESC);
          oprot.writeString(struct.mobileDataStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mobileDataActivity != null) {
        if (struct.isSetMobileDataActivity()) {
          oprot.writeFieldBegin(MOBILE_DATA_ACTIVITY_FIELD_DESC);
          oprot.writeString(struct.mobileDataActivity);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRoamingEnabled()) {
        oprot.writeFieldBegin(ROAMING_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.roamingEnabled);
        oprot.writeFieldEnd();
      }
      if (struct.wifiStatus != null) {
        if (struct.isSetWifiStatus()) {
          oprot.writeFieldBegin(WIFI_STATUS_FIELD_DESC);
          oprot.writeString(struct.wifiStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetWifiSignalStrength()) {
        oprot.writeFieldBegin(WIFI_SIGNAL_STRENGTH_FIELD_DESC);
        oprot.writeI32(struct.wifiSignalStrength);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWifiLinkSpeed()) {
        oprot.writeFieldBegin(WIFI_LINK_SPEED_FIELD_DESC);
        oprot.writeI32(struct.wifiLinkSpeed);
        oprot.writeFieldEnd();
      }
      if (struct.networkStatistics != null) {
        if (struct.isSetNetworkStatistics()) {
          oprot.writeFieldBegin(NETWORK_STATISTICS_FIELD_DESC);
          struct.networkStatistics.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.wifiApStatus != null) {
        if (struct.isSetWifiApStatus()) {
          oprot.writeFieldBegin(WIFI_AP_STATUS_FIELD_DESC);
          oprot.writeString(struct.wifiApStatus);
          oprot.writeFieldEnd();
        }
      }
      if (struct.networkOperator != null) {
        if (struct.isSetNetworkOperator()) {
          oprot.writeFieldBegin(NETWORK_OPERATOR_FIELD_DESC);
          oprot.writeString(struct.networkOperator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.simOperator != null) {
        if (struct.isSetSimOperator()) {
          oprot.writeFieldBegin(SIM_OPERATOR_FIELD_DESC);
          oprot.writeString(struct.simOperator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mcc != null) {
        if (struct.isSetMcc()) {
          oprot.writeFieldBegin(MCC_FIELD_DESC);
          oprot.writeString(struct.mcc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mnc != null) {
        if (struct.isSetMnc()) {
          oprot.writeFieldBegin(MNC_FIELD_DESC);
          oprot.writeString(struct.mnc);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NetworkDetailsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NetworkDetailsTupleScheme getScheme() {
      return new NetworkDetailsTupleScheme();
    }
  }

  private static class NetworkDetailsTupleScheme extends org.apache.thrift.scheme.TupleScheme<NetworkDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NetworkDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNetworkType()) {
        optionals.set(0);
      }
      if (struct.isSetMobileNetworkType()) {
        optionals.set(1);
      }
      if (struct.isSetMobileDataStatus()) {
        optionals.set(2);
      }
      if (struct.isSetMobileDataActivity()) {
        optionals.set(3);
      }
      if (struct.isSetRoamingEnabled()) {
        optionals.set(4);
      }
      if (struct.isSetWifiStatus()) {
        optionals.set(5);
      }
      if (struct.isSetWifiSignalStrength()) {
        optionals.set(6);
      }
      if (struct.isSetWifiLinkSpeed()) {
        optionals.set(7);
      }
      if (struct.isSetNetworkStatistics()) {
        optionals.set(8);
      }
      if (struct.isSetWifiApStatus()) {
        optionals.set(9);
      }
      if (struct.isSetNetworkOperator()) {
        optionals.set(10);
      }
      if (struct.isSetSimOperator()) {
        optionals.set(11);
      }
      if (struct.isSetMcc()) {
        optionals.set(12);
      }
      if (struct.isSetMnc()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetNetworkType()) {
        oprot.writeString(struct.networkType);
      }
      if (struct.isSetMobileNetworkType()) {
        oprot.writeString(struct.mobileNetworkType);
      }
      if (struct.isSetMobileDataStatus()) {
        oprot.writeString(struct.mobileDataStatus);
      }
      if (struct.isSetMobileDataActivity()) {
        oprot.writeString(struct.mobileDataActivity);
      }
      if (struct.isSetRoamingEnabled()) {
        oprot.writeBool(struct.roamingEnabled);
      }
      if (struct.isSetWifiStatus()) {
        oprot.writeString(struct.wifiStatus);
      }
      if (struct.isSetWifiSignalStrength()) {
        oprot.writeI32(struct.wifiSignalStrength);
      }
      if (struct.isSetWifiLinkSpeed()) {
        oprot.writeI32(struct.wifiLinkSpeed);
      }
      if (struct.isSetNetworkStatistics()) {
        struct.networkStatistics.write(oprot);
      }
      if (struct.isSetWifiApStatus()) {
        oprot.writeString(struct.wifiApStatus);
      }
      if (struct.isSetNetworkOperator()) {
        oprot.writeString(struct.networkOperator);
      }
      if (struct.isSetSimOperator()) {
        oprot.writeString(struct.simOperator);
      }
      if (struct.isSetMcc()) {
        oprot.writeString(struct.mcc);
      }
      if (struct.isSetMnc()) {
        oprot.writeString(struct.mnc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NetworkDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.networkType = iprot.readString();
        struct.setNetworkTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mobileNetworkType = iprot.readString();
        struct.setMobileNetworkTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.mobileDataStatus = iprot.readString();
        struct.setMobileDataStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mobileDataActivity = iprot.readString();
        struct.setMobileDataActivityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.roamingEnabled = iprot.readBool();
        struct.setRoamingEnabledIsSet(true);
      }
      if (incoming.get(5)) {
        struct.wifiStatus = iprot.readString();
        struct.setWifiStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.wifiSignalStrength = iprot.readI32();
        struct.setWifiSignalStrengthIsSet(true);
      }
      if (incoming.get(7)) {
        struct.wifiLinkSpeed = iprot.readI32();
        struct.setWifiLinkSpeedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.networkStatistics = new NetworkStatistics();
        struct.networkStatistics.read(iprot);
        struct.setNetworkStatisticsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.wifiApStatus = iprot.readString();
        struct.setWifiApStatusIsSet(true);
      }
      if (incoming.get(10)) {
        struct.networkOperator = iprot.readString();
        struct.setNetworkOperatorIsSet(true);
      }
      if (incoming.get(11)) {
        struct.simOperator = iprot.readString();
        struct.setSimOperatorIsSet(true);
      }
      if (incoming.get(12)) {
        struct.mcc = iprot.readString();
        struct.setMccIsSet(true);
      }
      if (incoming.get(13)) {
        struct.mnc = iprot.readString();
        struct.setMncIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

