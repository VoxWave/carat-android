/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.amplab.carat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-02-14")
public class DetailScreenReport implements org.apache.thrift.TBase<DetailScreenReport, DetailScreenReport._Fields>, java.io.Serializable, Cloneable, Comparable<DetailScreenReport> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DetailScreenReport");

  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField X_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("xVals", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField Y_VALS_FIELD_DESC = new org.apache.thrift.protocol.TField("yVals", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField EXPECTED_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("expectedValue", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ERROR_WITHOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("errorWithout", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField SAMPLES_FIELD_DESC = new org.apache.thrift.protocol.TField("samples", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField SAMPLES_WITHOUT_FIELD_DESC = new org.apache.thrift.protocol.TField("samplesWithout", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DetailScreenReportStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DetailScreenReportTupleSchemeFactory();

  public double score; // optional
  public java.util.List<java.lang.Double> xVals; // optional
  public java.util.List<java.lang.Double> yVals; // optional
  public double expectedValue; // optional
  public double error; // optional
  public double errorWithout; // optional
  public double samples; // optional
  public double samplesWithout; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SCORE((short)1, "score"),
    X_VALS((short)2, "xVals"),
    Y_VALS((short)3, "yVals"),
    EXPECTED_VALUE((short)4, "expectedValue"),
    ERROR((short)5, "error"),
    ERROR_WITHOUT((short)6, "errorWithout"),
    SAMPLES((short)7, "samples"),
    SAMPLES_WITHOUT((short)8, "samplesWithout");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SCORE
          return SCORE;
        case 2: // X_VALS
          return X_VALS;
        case 3: // Y_VALS
          return Y_VALS;
        case 4: // EXPECTED_VALUE
          return EXPECTED_VALUE;
        case 5: // ERROR
          return ERROR;
        case 6: // ERROR_WITHOUT
          return ERROR_WITHOUT;
        case 7: // SAMPLES
          return SAMPLES;
        case 8: // SAMPLES_WITHOUT
          return SAMPLES_WITHOUT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SCORE_ISSET_ID = 0;
  private static final int __EXPECTEDVALUE_ISSET_ID = 1;
  private static final int __ERROR_ISSET_ID = 2;
  private static final int __ERRORWITHOUT_ISSET_ID = 3;
  private static final int __SAMPLES_ISSET_ID = 4;
  private static final int __SAMPLESWITHOUT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.SCORE,_Fields.X_VALS,_Fields.Y_VALS,_Fields.EXPECTED_VALUE,_Fields.ERROR,_Fields.ERROR_WITHOUT,_Fields.SAMPLES,_Fields.SAMPLES_WITHOUT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.X_VALS, new org.apache.thrift.meta_data.FieldMetaData("xVals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.Y_VALS, new org.apache.thrift.meta_data.FieldMetaData("yVals", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.EXPECTED_VALUE, new org.apache.thrift.meta_data.FieldMetaData("expectedValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ERROR_WITHOUT, new org.apache.thrift.meta_data.FieldMetaData("errorWithout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SAMPLES, new org.apache.thrift.meta_data.FieldMetaData("samples", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SAMPLES_WITHOUT, new org.apache.thrift.meta_data.FieldMetaData("samplesWithout", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DetailScreenReport.class, metaDataMap);
  }

  public DetailScreenReport() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DetailScreenReport(DetailScreenReport other) {
    __isset_bitfield = other.__isset_bitfield;
    this.score = other.score;
    if (other.isSetXVals()) {
      java.util.List<java.lang.Double> __this__xVals = new java.util.ArrayList<java.lang.Double>(other.xVals);
      this.xVals = __this__xVals;
    }
    if (other.isSetYVals()) {
      java.util.List<java.lang.Double> __this__yVals = new java.util.ArrayList<java.lang.Double>(other.yVals);
      this.yVals = __this__yVals;
    }
    this.expectedValue = other.expectedValue;
    this.error = other.error;
    this.errorWithout = other.errorWithout;
    this.samples = other.samples;
    this.samplesWithout = other.samplesWithout;
  }

  public DetailScreenReport deepCopy() {
    return new DetailScreenReport(this);
  }

  @Override
  public void clear() {
    setScoreIsSet(false);
    this.score = 0.0;
    this.xVals = null;
    this.yVals = null;
    setExpectedValueIsSet(false);
    this.expectedValue = 0.0;
    setErrorIsSet(false);
    this.error = 0.0;
    setErrorWithoutIsSet(false);
    this.errorWithout = 0.0;
    setSamplesIsSet(false);
    this.samples = 0.0;
    setSamplesWithoutIsSet(false);
    this.samplesWithout = 0.0;
  }

  public double getScore() {
    return this.score;
  }

  public DetailScreenReport setScore(double score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public int getXValsSize() {
    return (this.xVals == null) ? 0 : this.xVals.size();
  }

  public java.util.Iterator<java.lang.Double> getXValsIterator() {
    return (this.xVals == null) ? null : this.xVals.iterator();
  }

  public void addToXVals(double elem) {
    if (this.xVals == null) {
      this.xVals = new java.util.ArrayList<java.lang.Double>();
    }
    this.xVals.add(elem);
  }

  public java.util.List<java.lang.Double> getXVals() {
    return this.xVals;
  }

  public DetailScreenReport setXVals(java.util.List<java.lang.Double> xVals) {
    this.xVals = xVals;
    return this;
  }

  public void unsetXVals() {
    this.xVals = null;
  }

  /** Returns true if field xVals is set (has been assigned a value) and false otherwise */
  public boolean isSetXVals() {
    return this.xVals != null;
  }

  public void setXValsIsSet(boolean value) {
    if (!value) {
      this.xVals = null;
    }
  }

  public int getYValsSize() {
    return (this.yVals == null) ? 0 : this.yVals.size();
  }

  public java.util.Iterator<java.lang.Double> getYValsIterator() {
    return (this.yVals == null) ? null : this.yVals.iterator();
  }

  public void addToYVals(double elem) {
    if (this.yVals == null) {
      this.yVals = new java.util.ArrayList<java.lang.Double>();
    }
    this.yVals.add(elem);
  }

  public java.util.List<java.lang.Double> getYVals() {
    return this.yVals;
  }

  public DetailScreenReport setYVals(java.util.List<java.lang.Double> yVals) {
    this.yVals = yVals;
    return this;
  }

  public void unsetYVals() {
    this.yVals = null;
  }

  /** Returns true if field yVals is set (has been assigned a value) and false otherwise */
  public boolean isSetYVals() {
    return this.yVals != null;
  }

  public void setYValsIsSet(boolean value) {
    if (!value) {
      this.yVals = null;
    }
  }

  public double getExpectedValue() {
    return this.expectedValue;
  }

  public DetailScreenReport setExpectedValue(double expectedValue) {
    this.expectedValue = expectedValue;
    setExpectedValueIsSet(true);
    return this;
  }

  public void unsetExpectedValue() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPECTEDVALUE_ISSET_ID);
  }

  /** Returns true if field expectedValue is set (has been assigned a value) and false otherwise */
  public boolean isSetExpectedValue() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPECTEDVALUE_ISSET_ID);
  }

  public void setExpectedValueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPECTEDVALUE_ISSET_ID, value);
  }

  public double getError() {
    return this.error;
  }

  public DetailScreenReport setError(double error) {
    this.error = error;
    setErrorIsSet(true);
    return this;
  }

  public void unsetError() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERROR_ISSET_ID);
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERROR_ISSET_ID);
  }

  public void setErrorIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERROR_ISSET_ID, value);
  }

  public double getErrorWithout() {
    return this.errorWithout;
  }

  public DetailScreenReport setErrorWithout(double errorWithout) {
    this.errorWithout = errorWithout;
    setErrorWithoutIsSet(true);
    return this;
  }

  public void unsetErrorWithout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ERRORWITHOUT_ISSET_ID);
  }

  /** Returns true if field errorWithout is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorWithout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ERRORWITHOUT_ISSET_ID);
  }

  public void setErrorWithoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ERRORWITHOUT_ISSET_ID, value);
  }

  public double getSamples() {
    return this.samples;
  }

  public DetailScreenReport setSamples(double samples) {
    this.samples = samples;
    setSamplesIsSet(true);
    return this;
  }

  public void unsetSamples() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAMPLES_ISSET_ID);
  }

  /** Returns true if field samples is set (has been assigned a value) and false otherwise */
  public boolean isSetSamples() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAMPLES_ISSET_ID);
  }

  public void setSamplesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAMPLES_ISSET_ID, value);
  }

  public double getSamplesWithout() {
    return this.samplesWithout;
  }

  public DetailScreenReport setSamplesWithout(double samplesWithout) {
    this.samplesWithout = samplesWithout;
    setSamplesWithoutIsSet(true);
    return this;
  }

  public void unsetSamplesWithout() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAMPLESWITHOUT_ISSET_ID);
  }

  /** Returns true if field samplesWithout is set (has been assigned a value) and false otherwise */
  public boolean isSetSamplesWithout() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAMPLESWITHOUT_ISSET_ID);
  }

  public void setSamplesWithoutIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAMPLESWITHOUT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((java.lang.Double)value);
      }
      break;

    case X_VALS:
      if (value == null) {
        unsetXVals();
      } else {
        setXVals((java.util.List<java.lang.Double>)value);
      }
      break;

    case Y_VALS:
      if (value == null) {
        unsetYVals();
      } else {
        setYVals((java.util.List<java.lang.Double>)value);
      }
      break;

    case EXPECTED_VALUE:
      if (value == null) {
        unsetExpectedValue();
      } else {
        setExpectedValue((java.lang.Double)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((java.lang.Double)value);
      }
      break;

    case ERROR_WITHOUT:
      if (value == null) {
        unsetErrorWithout();
      } else {
        setErrorWithout((java.lang.Double)value);
      }
      break;

    case SAMPLES:
      if (value == null) {
        unsetSamples();
      } else {
        setSamples((java.lang.Double)value);
      }
      break;

    case SAMPLES_WITHOUT:
      if (value == null) {
        unsetSamplesWithout();
      } else {
        setSamplesWithout((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SCORE:
      return getScore();

    case X_VALS:
      return getXVals();

    case Y_VALS:
      return getYVals();

    case EXPECTED_VALUE:
      return getExpectedValue();

    case ERROR:
      return getError();

    case ERROR_WITHOUT:
      return getErrorWithout();

    case SAMPLES:
      return getSamples();

    case SAMPLES_WITHOUT:
      return getSamplesWithout();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SCORE:
      return isSetScore();
    case X_VALS:
      return isSetXVals();
    case Y_VALS:
      return isSetYVals();
    case EXPECTED_VALUE:
      return isSetExpectedValue();
    case ERROR:
      return isSetError();
    case ERROR_WITHOUT:
      return isSetErrorWithout();
    case SAMPLES:
      return isSetSamples();
    case SAMPLES_WITHOUT:
      return isSetSamplesWithout();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DetailScreenReport)
      return this.equals((DetailScreenReport)that);
    return false;
  }

  public boolean equals(DetailScreenReport that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_score = true && this.isSetScore();
    boolean that_present_score = true && that.isSetScore();
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_xVals = true && this.isSetXVals();
    boolean that_present_xVals = true && that.isSetXVals();
    if (this_present_xVals || that_present_xVals) {
      if (!(this_present_xVals && that_present_xVals))
        return false;
      if (!this.xVals.equals(that.xVals))
        return false;
    }

    boolean this_present_yVals = true && this.isSetYVals();
    boolean that_present_yVals = true && that.isSetYVals();
    if (this_present_yVals || that_present_yVals) {
      if (!(this_present_yVals && that_present_yVals))
        return false;
      if (!this.yVals.equals(that.yVals))
        return false;
    }

    boolean this_present_expectedValue = true && this.isSetExpectedValue();
    boolean that_present_expectedValue = true && that.isSetExpectedValue();
    if (this_present_expectedValue || that_present_expectedValue) {
      if (!(this_present_expectedValue && that_present_expectedValue))
        return false;
      if (this.expectedValue != that.expectedValue)
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (this.error != that.error)
        return false;
    }

    boolean this_present_errorWithout = true && this.isSetErrorWithout();
    boolean that_present_errorWithout = true && that.isSetErrorWithout();
    if (this_present_errorWithout || that_present_errorWithout) {
      if (!(this_present_errorWithout && that_present_errorWithout))
        return false;
      if (this.errorWithout != that.errorWithout)
        return false;
    }

    boolean this_present_samples = true && this.isSetSamples();
    boolean that_present_samples = true && that.isSetSamples();
    if (this_present_samples || that_present_samples) {
      if (!(this_present_samples && that_present_samples))
        return false;
      if (this.samples != that.samples)
        return false;
    }

    boolean this_present_samplesWithout = true && this.isSetSamplesWithout();
    boolean that_present_samplesWithout = true && that.isSetSamplesWithout();
    if (this_present_samplesWithout || that_present_samplesWithout) {
      if (!(this_present_samplesWithout && that_present_samplesWithout))
        return false;
      if (this.samplesWithout != that.samplesWithout)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetScore()) ? 131071 : 524287);
    if (isSetScore())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(score);

    hashCode = hashCode * 8191 + ((isSetXVals()) ? 131071 : 524287);
    if (isSetXVals())
      hashCode = hashCode * 8191 + xVals.hashCode();

    hashCode = hashCode * 8191 + ((isSetYVals()) ? 131071 : 524287);
    if (isSetYVals())
      hashCode = hashCode * 8191 + yVals.hashCode();

    hashCode = hashCode * 8191 + ((isSetExpectedValue()) ? 131071 : 524287);
    if (isSetExpectedValue())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expectedValue);

    hashCode = hashCode * 8191 + ((isSetError()) ? 131071 : 524287);
    if (isSetError())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(error);

    hashCode = hashCode * 8191 + ((isSetErrorWithout()) ? 131071 : 524287);
    if (isSetErrorWithout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(errorWithout);

    hashCode = hashCode * 8191 + ((isSetSamples()) ? 131071 : 524287);
    if (isSetSamples())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(samples);

    hashCode = hashCode * 8191 + ((isSetSamplesWithout()) ? 131071 : 524287);
    if (isSetSamplesWithout())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(samplesWithout);

    return hashCode;
  }

  @Override
  public int compareTo(DetailScreenReport other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetXVals()).compareTo(other.isSetXVals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXVals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xVals, other.xVals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetYVals()).compareTo(other.isSetYVals());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYVals()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.yVals, other.yVals);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExpectedValue()).compareTo(other.isSetExpectedValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpectedValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expectedValue, other.expectedValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetError()).compareTo(other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorWithout()).compareTo(other.isSetErrorWithout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorWithout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorWithout, other.errorWithout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSamples()).compareTo(other.isSetSamples());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamples()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samples, other.samples);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSamplesWithout()).compareTo(other.isSetSamplesWithout());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSamplesWithout()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.samplesWithout, other.samplesWithout);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DetailScreenReport(");
    boolean first = true;

    if (isSetScore()) {
      sb.append("score:");
      sb.append(this.score);
      first = false;
    }
    if (isSetXVals()) {
      if (!first) sb.append(", ");
      sb.append("xVals:");
      if (this.xVals == null) {
        sb.append("null");
      } else {
        sb.append(this.xVals);
      }
      first = false;
    }
    if (isSetYVals()) {
      if (!first) sb.append(", ");
      sb.append("yVals:");
      if (this.yVals == null) {
        sb.append("null");
      } else {
        sb.append(this.yVals);
      }
      first = false;
    }
    if (isSetExpectedValue()) {
      if (!first) sb.append(", ");
      sb.append("expectedValue:");
      sb.append(this.expectedValue);
      first = false;
    }
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      sb.append(this.error);
      first = false;
    }
    if (isSetErrorWithout()) {
      if (!first) sb.append(", ");
      sb.append("errorWithout:");
      sb.append(this.errorWithout);
      first = false;
    }
    if (isSetSamples()) {
      if (!first) sb.append(", ");
      sb.append("samples:");
      sb.append(this.samples);
      first = false;
    }
    if (isSetSamplesWithout()) {
      if (!first) sb.append(", ");
      sb.append("samplesWithout:");
      sb.append(this.samplesWithout);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DetailScreenReportStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DetailScreenReportStandardScheme getScheme() {
      return new DetailScreenReportStandardScheme();
    }
  }

  private static class DetailScreenReportStandardScheme extends org.apache.thrift.scheme.StandardScheme<DetailScreenReport> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DetailScreenReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.score = iprot.readDouble();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // X_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                struct.xVals = new java.util.ArrayList<java.lang.Double>(_list80.size);
                double _elem81;
                for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                {
                  _elem81 = iprot.readDouble();
                  struct.xVals.add(_elem81);
                }
                iprot.readListEnd();
              }
              struct.setXValsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // Y_VALS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list83 = iprot.readListBegin();
                struct.yVals = new java.util.ArrayList<java.lang.Double>(_list83.size);
                double _elem84;
                for (int _i85 = 0; _i85 < _list83.size; ++_i85)
                {
                  _elem84 = iprot.readDouble();
                  struct.yVals.add(_elem84);
                }
                iprot.readListEnd();
              }
              struct.setYValsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXPECTED_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.expectedValue = iprot.readDouble();
              struct.setExpectedValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.error = iprot.readDouble();
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ERROR_WITHOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.errorWithout = iprot.readDouble();
              struct.setErrorWithoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SAMPLES
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.samples = iprot.readDouble();
              struct.setSamplesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SAMPLES_WITHOUT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.samplesWithout = iprot.readDouble();
              struct.setSamplesWithoutIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DetailScreenReport struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetScore()) {
        oprot.writeFieldBegin(SCORE_FIELD_DESC);
        oprot.writeDouble(struct.score);
        oprot.writeFieldEnd();
      }
      if (struct.xVals != null) {
        if (struct.isSetXVals()) {
          oprot.writeFieldBegin(X_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.xVals.size()));
            for (double _iter86 : struct.xVals)
            {
              oprot.writeDouble(_iter86);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.yVals != null) {
        if (struct.isSetYVals()) {
          oprot.writeFieldBegin(Y_VALS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.yVals.size()));
            for (double _iter87 : struct.yVals)
            {
              oprot.writeDouble(_iter87);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpectedValue()) {
        oprot.writeFieldBegin(EXPECTED_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.expectedValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetError()) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        oprot.writeDouble(struct.error);
        oprot.writeFieldEnd();
      }
      if (struct.isSetErrorWithout()) {
        oprot.writeFieldBegin(ERROR_WITHOUT_FIELD_DESC);
        oprot.writeDouble(struct.errorWithout);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSamples()) {
        oprot.writeFieldBegin(SAMPLES_FIELD_DESC);
        oprot.writeDouble(struct.samples);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSamplesWithout()) {
        oprot.writeFieldBegin(SAMPLES_WITHOUT_FIELD_DESC);
        oprot.writeDouble(struct.samplesWithout);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DetailScreenReportTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DetailScreenReportTupleScheme getScheme() {
      return new DetailScreenReportTupleScheme();
    }
  }

  private static class DetailScreenReportTupleScheme extends org.apache.thrift.scheme.TupleScheme<DetailScreenReport> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DetailScreenReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetScore()) {
        optionals.set(0);
      }
      if (struct.isSetXVals()) {
        optionals.set(1);
      }
      if (struct.isSetYVals()) {
        optionals.set(2);
      }
      if (struct.isSetExpectedValue()) {
        optionals.set(3);
      }
      if (struct.isSetError()) {
        optionals.set(4);
      }
      if (struct.isSetErrorWithout()) {
        optionals.set(5);
      }
      if (struct.isSetSamples()) {
        optionals.set(6);
      }
      if (struct.isSetSamplesWithout()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetScore()) {
        oprot.writeDouble(struct.score);
      }
      if (struct.isSetXVals()) {
        {
          oprot.writeI32(struct.xVals.size());
          for (double _iter88 : struct.xVals)
          {
            oprot.writeDouble(_iter88);
          }
        }
      }
      if (struct.isSetYVals()) {
        {
          oprot.writeI32(struct.yVals.size());
          for (double _iter89 : struct.yVals)
          {
            oprot.writeDouble(_iter89);
          }
        }
      }
      if (struct.isSetExpectedValue()) {
        oprot.writeDouble(struct.expectedValue);
      }
      if (struct.isSetError()) {
        oprot.writeDouble(struct.error);
      }
      if (struct.isSetErrorWithout()) {
        oprot.writeDouble(struct.errorWithout);
      }
      if (struct.isSetSamples()) {
        oprot.writeDouble(struct.samples);
      }
      if (struct.isSetSamplesWithout()) {
        oprot.writeDouble(struct.samplesWithout);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DetailScreenReport struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.score = iprot.readDouble();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.xVals = new java.util.ArrayList<java.lang.Double>(_list90.size);
          double _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = iprot.readDouble();
            struct.xVals.add(_elem91);
          }
        }
        struct.setXValsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.yVals = new java.util.ArrayList<java.lang.Double>(_list93.size);
          double _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = iprot.readDouble();
            struct.yVals.add(_elem94);
          }
        }
        struct.setYValsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.expectedValue = iprot.readDouble();
        struct.setExpectedValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.error = iprot.readDouble();
        struct.setErrorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.errorWithout = iprot.readDouble();
        struct.setErrorWithoutIsSet(true);
      }
      if (incoming.get(6)) {
        struct.samples = iprot.readDouble();
        struct.setSamplesIsSet(true);
      }
      if (incoming.get(7)) {
        struct.samplesWithout = iprot.readDouble();
        struct.setSamplesWithoutIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

