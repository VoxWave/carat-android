/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.amplab.carat.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-2-13")
public class Questionnaire implements org.apache.thrift.TBase<Questionnaire, Questionnaire._Fields>, java.io.Serializable, Cloneable, Comparable<Questionnaire> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Questionnaire");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PREREQUISITES_FIELD_DESC = new org.apache.thrift.protocol.TField("prerequisites", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField COOLDOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("cooldown", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EXPIRATION_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("expirationDate", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NEW_USER_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("newUserLimit", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField REPEAT_FIELD_DESC = new org.apache.thrift.protocol.TField("repeat", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField REPEAT_COOLDOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("repeatCooldown", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField REPEAT_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("repeatLimit", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField REPEAT_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("repeatDays", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField ACTION_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("actionTitle", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ACTION_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("actionText", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuestionnaireStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuestionnaireTupleSchemeFactory());
  }

  public int id; // required
  public List<Integer> prerequisites; // optional
  public long cooldown; // optional
  public long expirationDate; // optional
  public long newUserLimit; // optional
  public boolean repeat; // optional
  public long repeatCooldown; // optional
  public long repeatLimit; // optional
  public long repeatDays; // optional
  public String actionTitle; // optional
  public String actionText; // optional
  public List<QuestionnaireItem> items; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PREREQUISITES((short)2, "prerequisites"),
    COOLDOWN((short)3, "cooldown"),
    EXPIRATION_DATE((short)4, "expirationDate"),
    NEW_USER_LIMIT((short)5, "newUserLimit"),
    REPEAT((short)6, "repeat"),
    REPEAT_COOLDOWN((short)7, "repeatCooldown"),
    REPEAT_LIMIT((short)8, "repeatLimit"),
    REPEAT_DAYS((short)9, "repeatDays"),
    ACTION_TITLE((short)10, "actionTitle"),
    ACTION_TEXT((short)11, "actionText"),
    ITEMS((short)12, "items");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PREREQUISITES
          return PREREQUISITES;
        case 3: // COOLDOWN
          return COOLDOWN;
        case 4: // EXPIRATION_DATE
          return EXPIRATION_DATE;
        case 5: // NEW_USER_LIMIT
          return NEW_USER_LIMIT;
        case 6: // REPEAT
          return REPEAT;
        case 7: // REPEAT_COOLDOWN
          return REPEAT_COOLDOWN;
        case 8: // REPEAT_LIMIT
          return REPEAT_LIMIT;
        case 9: // REPEAT_DAYS
          return REPEAT_DAYS;
        case 10: // ACTION_TITLE
          return ACTION_TITLE;
        case 11: // ACTION_TEXT
          return ACTION_TEXT;
        case 12: // ITEMS
          return ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __COOLDOWN_ISSET_ID = 1;
  private static final int __EXPIRATIONDATE_ISSET_ID = 2;
  private static final int __NEWUSERLIMIT_ISSET_ID = 3;
  private static final int __REPEAT_ISSET_ID = 4;
  private static final int __REPEATCOOLDOWN_ISSET_ID = 5;
  private static final int __REPEATLIMIT_ISSET_ID = 6;
  private static final int __REPEATDAYS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PREREQUISITES,_Fields.COOLDOWN,_Fields.EXPIRATION_DATE,_Fields.NEW_USER_LIMIT,_Fields.REPEAT,_Fields.REPEAT_COOLDOWN,_Fields.REPEAT_LIMIT,_Fields.REPEAT_DAYS,_Fields.ACTION_TITLE,_Fields.ACTION_TEXT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PREREQUISITES, new org.apache.thrift.meta_data.FieldMetaData("prerequisites", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.COOLDOWN, new org.apache.thrift.meta_data.FieldMetaData("cooldown", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXPIRATION_DATE, new org.apache.thrift.meta_data.FieldMetaData("expirationDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEW_USER_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("newUserLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPEAT, new org.apache.thrift.meta_data.FieldMetaData("repeat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.REPEAT_COOLDOWN, new org.apache.thrift.meta_data.FieldMetaData("repeatCooldown", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPEAT_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("repeatLimit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REPEAT_DAYS, new org.apache.thrift.meta_data.FieldMetaData("repeatDays", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTION_TITLE, new org.apache.thrift.meta_data.FieldMetaData("actionTitle", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_TEXT, new org.apache.thrift.meta_data.FieldMetaData("actionText", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, QuestionnaireItem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Questionnaire.class, metaDataMap);
  }

  public Questionnaire() {
  }

  public Questionnaire(
    int id,
    List<QuestionnaireItem> items)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.items = items;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Questionnaire(Questionnaire other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetPrerequisites()) {
      List<Integer> __this__prerequisites = new ArrayList<Integer>(other.prerequisites);
      this.prerequisites = __this__prerequisites;
    }
    this.cooldown = other.cooldown;
    this.expirationDate = other.expirationDate;
    this.newUserLimit = other.newUserLimit;
    this.repeat = other.repeat;
    this.repeatCooldown = other.repeatCooldown;
    this.repeatLimit = other.repeatLimit;
    this.repeatDays = other.repeatDays;
    if (other.isSetActionTitle()) {
      this.actionTitle = other.actionTitle;
    }
    if (other.isSetActionText()) {
      this.actionText = other.actionText;
    }
    if (other.isSetItems()) {
      List<QuestionnaireItem> __this__items = new ArrayList<QuestionnaireItem>(other.items.size());
      for (QuestionnaireItem other_element : other.items) {
        __this__items.add(new QuestionnaireItem(other_element));
      }
      this.items = __this__items;
    }
  }

  public Questionnaire deepCopy() {
    return new Questionnaire(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.prerequisites = null;
    setCooldownIsSet(false);
    this.cooldown = 0;
    setExpirationDateIsSet(false);
    this.expirationDate = 0;
    setNewUserLimitIsSet(false);
    this.newUserLimit = 0;
    setRepeatIsSet(false);
    this.repeat = false;
    setRepeatCooldownIsSet(false);
    this.repeatCooldown = 0;
    setRepeatLimitIsSet(false);
    this.repeatLimit = 0;
    setRepeatDaysIsSet(false);
    this.repeatDays = 0;
    this.actionTitle = null;
    this.actionText = null;
    this.items = null;
  }

  public int getId() {
    return this.id;
  }

  public Questionnaire setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public int getPrerequisitesSize() {
    return (this.prerequisites == null) ? 0 : this.prerequisites.size();
  }

  public java.util.Iterator<Integer> getPrerequisitesIterator() {
    return (this.prerequisites == null) ? null : this.prerequisites.iterator();
  }

  public void addToPrerequisites(int elem) {
    if (this.prerequisites == null) {
      this.prerequisites = new ArrayList<Integer>();
    }
    this.prerequisites.add(elem);
  }

  public List<Integer> getPrerequisites() {
    return this.prerequisites;
  }

  public Questionnaire setPrerequisites(List<Integer> prerequisites) {
    this.prerequisites = prerequisites;
    return this;
  }

  public void unsetPrerequisites() {
    this.prerequisites = null;
  }

  /** Returns true if field prerequisites is set (has been assigned a value) and false otherwise */
  public boolean isSetPrerequisites() {
    return this.prerequisites != null;
  }

  public void setPrerequisitesIsSet(boolean value) {
    if (!value) {
      this.prerequisites = null;
    }
  }

  public long getCooldown() {
    return this.cooldown;
  }

  public Questionnaire setCooldown(long cooldown) {
    this.cooldown = cooldown;
    setCooldownIsSet(true);
    return this;
  }

  public void unsetCooldown() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COOLDOWN_ISSET_ID);
  }

  /** Returns true if field cooldown is set (has been assigned a value) and false otherwise */
  public boolean isSetCooldown() {
    return EncodingUtils.testBit(__isset_bitfield, __COOLDOWN_ISSET_ID);
  }

  public void setCooldownIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COOLDOWN_ISSET_ID, value);
  }

  public long getExpirationDate() {
    return this.expirationDate;
  }

  public Questionnaire setExpirationDate(long expirationDate) {
    this.expirationDate = expirationDate;
    setExpirationDateIsSet(true);
    return this;
  }

  public void unsetExpirationDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIRATIONDATE_ISSET_ID);
  }

  /** Returns true if field expirationDate is set (has been assigned a value) and false otherwise */
  public boolean isSetExpirationDate() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIRATIONDATE_ISSET_ID);
  }

  public void setExpirationDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIRATIONDATE_ISSET_ID, value);
  }

  public long getNewUserLimit() {
    return this.newUserLimit;
  }

  public Questionnaire setNewUserLimit(long newUserLimit) {
    this.newUserLimit = newUserLimit;
    setNewUserLimitIsSet(true);
    return this;
  }

  public void unsetNewUserLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEWUSERLIMIT_ISSET_ID);
  }

  /** Returns true if field newUserLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetNewUserLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __NEWUSERLIMIT_ISSET_ID);
  }

  public void setNewUserLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEWUSERLIMIT_ISSET_ID, value);
  }

  public boolean isRepeat() {
    return this.repeat;
  }

  public Questionnaire setRepeat(boolean repeat) {
    this.repeat = repeat;
    setRepeatIsSet(true);
    return this;
  }

  public void unsetRepeat() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPEAT_ISSET_ID);
  }

  /** Returns true if field repeat is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeat() {
    return EncodingUtils.testBit(__isset_bitfield, __REPEAT_ISSET_ID);
  }

  public void setRepeatIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPEAT_ISSET_ID, value);
  }

  public long getRepeatCooldown() {
    return this.repeatCooldown;
  }

  public Questionnaire setRepeatCooldown(long repeatCooldown) {
    this.repeatCooldown = repeatCooldown;
    setRepeatCooldownIsSet(true);
    return this;
  }

  public void unsetRepeatCooldown() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPEATCOOLDOWN_ISSET_ID);
  }

  /** Returns true if field repeatCooldown is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeatCooldown() {
    return EncodingUtils.testBit(__isset_bitfield, __REPEATCOOLDOWN_ISSET_ID);
  }

  public void setRepeatCooldownIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPEATCOOLDOWN_ISSET_ID, value);
  }

  public long getRepeatLimit() {
    return this.repeatLimit;
  }

  public Questionnaire setRepeatLimit(long repeatLimit) {
    this.repeatLimit = repeatLimit;
    setRepeatLimitIsSet(true);
    return this;
  }

  public void unsetRepeatLimit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPEATLIMIT_ISSET_ID);
  }

  /** Returns true if field repeatLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeatLimit() {
    return EncodingUtils.testBit(__isset_bitfield, __REPEATLIMIT_ISSET_ID);
  }

  public void setRepeatLimitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPEATLIMIT_ISSET_ID, value);
  }

  public long getRepeatDays() {
    return this.repeatDays;
  }

  public Questionnaire setRepeatDays(long repeatDays) {
    this.repeatDays = repeatDays;
    setRepeatDaysIsSet(true);
    return this;
  }

  public void unsetRepeatDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPEATDAYS_ISSET_ID);
  }

  /** Returns true if field repeatDays is set (has been assigned a value) and false otherwise */
  public boolean isSetRepeatDays() {
    return EncodingUtils.testBit(__isset_bitfield, __REPEATDAYS_ISSET_ID);
  }

  public void setRepeatDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPEATDAYS_ISSET_ID, value);
  }

  public String getActionTitle() {
    return this.actionTitle;
  }

  public Questionnaire setActionTitle(String actionTitle) {
    this.actionTitle = actionTitle;
    return this;
  }

  public void unsetActionTitle() {
    this.actionTitle = null;
  }

  /** Returns true if field actionTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetActionTitle() {
    return this.actionTitle != null;
  }

  public void setActionTitleIsSet(boolean value) {
    if (!value) {
      this.actionTitle = null;
    }
  }

  public String getActionText() {
    return this.actionText;
  }

  public Questionnaire setActionText(String actionText) {
    this.actionText = actionText;
    return this;
  }

  public void unsetActionText() {
    this.actionText = null;
  }

  /** Returns true if field actionText is set (has been assigned a value) and false otherwise */
  public boolean isSetActionText() {
    return this.actionText != null;
  }

  public void setActionTextIsSet(boolean value) {
    if (!value) {
      this.actionText = null;
    }
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public java.util.Iterator<QuestionnaireItem> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(QuestionnaireItem elem) {
    if (this.items == null) {
      this.items = new ArrayList<QuestionnaireItem>();
    }
    this.items.add(elem);
  }

  public List<QuestionnaireItem> getItems() {
    return this.items;
  }

  public Questionnaire setItems(List<QuestionnaireItem> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case PREREQUISITES:
      if (value == null) {
        unsetPrerequisites();
      } else {
        setPrerequisites((List<Integer>)value);
      }
      break;

    case COOLDOWN:
      if (value == null) {
        unsetCooldown();
      } else {
        setCooldown((Long)value);
      }
      break;

    case EXPIRATION_DATE:
      if (value == null) {
        unsetExpirationDate();
      } else {
        setExpirationDate((Long)value);
      }
      break;

    case NEW_USER_LIMIT:
      if (value == null) {
        unsetNewUserLimit();
      } else {
        setNewUserLimit((Long)value);
      }
      break;

    case REPEAT:
      if (value == null) {
        unsetRepeat();
      } else {
        setRepeat((Boolean)value);
      }
      break;

    case REPEAT_COOLDOWN:
      if (value == null) {
        unsetRepeatCooldown();
      } else {
        setRepeatCooldown((Long)value);
      }
      break;

    case REPEAT_LIMIT:
      if (value == null) {
        unsetRepeatLimit();
      } else {
        setRepeatLimit((Long)value);
      }
      break;

    case REPEAT_DAYS:
      if (value == null) {
        unsetRepeatDays();
      } else {
        setRepeatDays((Long)value);
      }
      break;

    case ACTION_TITLE:
      if (value == null) {
        unsetActionTitle();
      } else {
        setActionTitle((String)value);
      }
      break;

    case ACTION_TEXT:
      if (value == null) {
        unsetActionText();
      } else {
        setActionText((String)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((List<QuestionnaireItem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case PREREQUISITES:
      return getPrerequisites();

    case COOLDOWN:
      return Long.valueOf(getCooldown());

    case EXPIRATION_DATE:
      return Long.valueOf(getExpirationDate());

    case NEW_USER_LIMIT:
      return Long.valueOf(getNewUserLimit());

    case REPEAT:
      return Boolean.valueOf(isRepeat());

    case REPEAT_COOLDOWN:
      return Long.valueOf(getRepeatCooldown());

    case REPEAT_LIMIT:
      return Long.valueOf(getRepeatLimit());

    case REPEAT_DAYS:
      return Long.valueOf(getRepeatDays());

    case ACTION_TITLE:
      return getActionTitle();

    case ACTION_TEXT:
      return getActionText();

    case ITEMS:
      return getItems();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PREREQUISITES:
      return isSetPrerequisites();
    case COOLDOWN:
      return isSetCooldown();
    case EXPIRATION_DATE:
      return isSetExpirationDate();
    case NEW_USER_LIMIT:
      return isSetNewUserLimit();
    case REPEAT:
      return isSetRepeat();
    case REPEAT_COOLDOWN:
      return isSetRepeatCooldown();
    case REPEAT_LIMIT:
      return isSetRepeatLimit();
    case REPEAT_DAYS:
      return isSetRepeatDays();
    case ACTION_TITLE:
      return isSetActionTitle();
    case ACTION_TEXT:
      return isSetActionText();
    case ITEMS:
      return isSetItems();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Questionnaire)
      return this.equals((Questionnaire)that);
    return false;
  }

  public boolean equals(Questionnaire that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_prerequisites = true && this.isSetPrerequisites();
    boolean that_present_prerequisites = true && that.isSetPrerequisites();
    if (this_present_prerequisites || that_present_prerequisites) {
      if (!(this_present_prerequisites && that_present_prerequisites))
        return false;
      if (!this.prerequisites.equals(that.prerequisites))
        return false;
    }

    boolean this_present_cooldown = true && this.isSetCooldown();
    boolean that_present_cooldown = true && that.isSetCooldown();
    if (this_present_cooldown || that_present_cooldown) {
      if (!(this_present_cooldown && that_present_cooldown))
        return false;
      if (this.cooldown != that.cooldown)
        return false;
    }

    boolean this_present_expirationDate = true && this.isSetExpirationDate();
    boolean that_present_expirationDate = true && that.isSetExpirationDate();
    if (this_present_expirationDate || that_present_expirationDate) {
      if (!(this_present_expirationDate && that_present_expirationDate))
        return false;
      if (this.expirationDate != that.expirationDate)
        return false;
    }

    boolean this_present_newUserLimit = true && this.isSetNewUserLimit();
    boolean that_present_newUserLimit = true && that.isSetNewUserLimit();
    if (this_present_newUserLimit || that_present_newUserLimit) {
      if (!(this_present_newUserLimit && that_present_newUserLimit))
        return false;
      if (this.newUserLimit != that.newUserLimit)
        return false;
    }

    boolean this_present_repeat = true && this.isSetRepeat();
    boolean that_present_repeat = true && that.isSetRepeat();
    if (this_present_repeat || that_present_repeat) {
      if (!(this_present_repeat && that_present_repeat))
        return false;
      if (this.repeat != that.repeat)
        return false;
    }

    boolean this_present_repeatCooldown = true && this.isSetRepeatCooldown();
    boolean that_present_repeatCooldown = true && that.isSetRepeatCooldown();
    if (this_present_repeatCooldown || that_present_repeatCooldown) {
      if (!(this_present_repeatCooldown && that_present_repeatCooldown))
        return false;
      if (this.repeatCooldown != that.repeatCooldown)
        return false;
    }

    boolean this_present_repeatLimit = true && this.isSetRepeatLimit();
    boolean that_present_repeatLimit = true && that.isSetRepeatLimit();
    if (this_present_repeatLimit || that_present_repeatLimit) {
      if (!(this_present_repeatLimit && that_present_repeatLimit))
        return false;
      if (this.repeatLimit != that.repeatLimit)
        return false;
    }

    boolean this_present_repeatDays = true && this.isSetRepeatDays();
    boolean that_present_repeatDays = true && that.isSetRepeatDays();
    if (this_present_repeatDays || that_present_repeatDays) {
      if (!(this_present_repeatDays && that_present_repeatDays))
        return false;
      if (this.repeatDays != that.repeatDays)
        return false;
    }

    boolean this_present_actionTitle = true && this.isSetActionTitle();
    boolean that_present_actionTitle = true && that.isSetActionTitle();
    if (this_present_actionTitle || that_present_actionTitle) {
      if (!(this_present_actionTitle && that_present_actionTitle))
        return false;
      if (!this.actionTitle.equals(that.actionTitle))
        return false;
    }

    boolean this_present_actionText = true && this.isSetActionText();
    boolean that_present_actionText = true && that.isSetActionText();
    if (this_present_actionText || that_present_actionText) {
      if (!(this_present_actionText && that_present_actionText))
        return false;
      if (!this.actionText.equals(that.actionText))
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_prerequisites = true && (isSetPrerequisites());
    list.add(present_prerequisites);
    if (present_prerequisites)
      list.add(prerequisites);

    boolean present_cooldown = true && (isSetCooldown());
    list.add(present_cooldown);
    if (present_cooldown)
      list.add(cooldown);

    boolean present_expirationDate = true && (isSetExpirationDate());
    list.add(present_expirationDate);
    if (present_expirationDate)
      list.add(expirationDate);

    boolean present_newUserLimit = true && (isSetNewUserLimit());
    list.add(present_newUserLimit);
    if (present_newUserLimit)
      list.add(newUserLimit);

    boolean present_repeat = true && (isSetRepeat());
    list.add(present_repeat);
    if (present_repeat)
      list.add(repeat);

    boolean present_repeatCooldown = true && (isSetRepeatCooldown());
    list.add(present_repeatCooldown);
    if (present_repeatCooldown)
      list.add(repeatCooldown);

    boolean present_repeatLimit = true && (isSetRepeatLimit());
    list.add(present_repeatLimit);
    if (present_repeatLimit)
      list.add(repeatLimit);

    boolean present_repeatDays = true && (isSetRepeatDays());
    list.add(present_repeatDays);
    if (present_repeatDays)
      list.add(repeatDays);

    boolean present_actionTitle = true && (isSetActionTitle());
    list.add(present_actionTitle);
    if (present_actionTitle)
      list.add(actionTitle);

    boolean present_actionText = true && (isSetActionText());
    list.add(present_actionText);
    if (present_actionText)
      list.add(actionText);

    boolean present_items = true && (isSetItems());
    list.add(present_items);
    if (present_items)
      list.add(items);

    return list.hashCode();
  }

  @Override
  public int compareTo(Questionnaire other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrerequisites()).compareTo(other.isSetPrerequisites());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrerequisites()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prerequisites, other.prerequisites);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCooldown()).compareTo(other.isSetCooldown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCooldown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cooldown, other.cooldown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpirationDate()).compareTo(other.isSetExpirationDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpirationDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expirationDate, other.expirationDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewUserLimit()).compareTo(other.isSetNewUserLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewUserLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newUserLimit, other.newUserLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeat()).compareTo(other.isSetRepeat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeat, other.repeat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeatCooldown()).compareTo(other.isSetRepeatCooldown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeatCooldown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeatCooldown, other.repeatCooldown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeatLimit()).compareTo(other.isSetRepeatLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeatLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeatLimit, other.repeatLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRepeatDays()).compareTo(other.isSetRepeatDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRepeatDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.repeatDays, other.repeatDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionTitle()).compareTo(other.isSetActionTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionTitle, other.actionTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionText()).compareTo(other.isSetActionText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionText, other.actionText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Questionnaire(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (isSetPrerequisites()) {
      if (!first) sb.append(", ");
      sb.append("prerequisites:");
      if (this.prerequisites == null) {
        sb.append("null");
      } else {
        sb.append(this.prerequisites);
      }
      first = false;
    }
    if (isSetCooldown()) {
      if (!first) sb.append(", ");
      sb.append("cooldown:");
      sb.append(this.cooldown);
      first = false;
    }
    if (isSetExpirationDate()) {
      if (!first) sb.append(", ");
      sb.append("expirationDate:");
      sb.append(this.expirationDate);
      first = false;
    }
    if (isSetNewUserLimit()) {
      if (!first) sb.append(", ");
      sb.append("newUserLimit:");
      sb.append(this.newUserLimit);
      first = false;
    }
    if (isSetRepeat()) {
      if (!first) sb.append(", ");
      sb.append("repeat:");
      sb.append(this.repeat);
      first = false;
    }
    if (isSetRepeatCooldown()) {
      if (!first) sb.append(", ");
      sb.append("repeatCooldown:");
      sb.append(this.repeatCooldown);
      first = false;
    }
    if (isSetRepeatLimit()) {
      if (!first) sb.append(", ");
      sb.append("repeatLimit:");
      sb.append(this.repeatLimit);
      first = false;
    }
    if (isSetRepeatDays()) {
      if (!first) sb.append(", ");
      sb.append("repeatDays:");
      sb.append(this.repeatDays);
      first = false;
    }
    if (isSetActionTitle()) {
      if (!first) sb.append(", ");
      sb.append("actionTitle:");
      if (this.actionTitle == null) {
        sb.append("null");
      } else {
        sb.append(this.actionTitle);
      }
      first = false;
    }
    if (isSetActionText()) {
      if (!first) sb.append(", ");
      sb.append("actionText:");
      if (this.actionText == null) {
        sb.append("null");
      } else {
        sb.append(this.actionText);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("items:");
    if (this.items == null) {
      sb.append("null");
    } else {
      sb.append(this.items);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (items == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'items' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuestionnaireStandardSchemeFactory implements SchemeFactory {
    public QuestionnaireStandardScheme getScheme() {
      return new QuestionnaireStandardScheme();
    }
  }

  private static class QuestionnaireStandardScheme extends StandardScheme<Questionnaire> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Questionnaire struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PREREQUISITES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                struct.prerequisites = new ArrayList<Integer>(_list152.size);
                int _elem153;
                for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                {
                  _elem153 = iprot.readI32();
                  struct.prerequisites.add(_elem153);
                }
                iprot.readListEnd();
              }
              struct.setPrerequisitesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COOLDOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cooldown = iprot.readI64();
              struct.setCooldownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXPIRATION_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expirationDate = iprot.readI64();
              struct.setExpirationDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NEW_USER_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.newUserLimit = iprot.readI64();
              struct.setNewUserLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REPEAT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.repeat = iprot.readBool();
              struct.setRepeatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REPEAT_COOLDOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.repeatCooldown = iprot.readI64();
              struct.setRepeatCooldownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REPEAT_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.repeatLimit = iprot.readI64();
              struct.setRepeatLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REPEAT_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.repeatDays = iprot.readI64();
              struct.setRepeatDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ACTION_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionTitle = iprot.readString();
              struct.setActionTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACTION_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionText = iprot.readString();
              struct.setActionTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list155 = iprot.readListBegin();
                struct.items = new ArrayList<QuestionnaireItem>(_list155.size);
                QuestionnaireItem _elem156;
                for (int _i157 = 0; _i157 < _list155.size; ++_i157)
                {
                  _elem156 = new QuestionnaireItem();
                  _elem156.read(iprot);
                  struct.items.add(_elem156);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Questionnaire struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.prerequisites != null) {
        if (struct.isSetPrerequisites()) {
          oprot.writeFieldBegin(PREREQUISITES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.prerequisites.size()));
            for (int _iter158 : struct.prerequisites)
            {
              oprot.writeI32(_iter158);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCooldown()) {
        oprot.writeFieldBegin(COOLDOWN_FIELD_DESC);
        oprot.writeI64(struct.cooldown);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExpirationDate()) {
        oprot.writeFieldBegin(EXPIRATION_DATE_FIELD_DESC);
        oprot.writeI64(struct.expirationDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNewUserLimit()) {
        oprot.writeFieldBegin(NEW_USER_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.newUserLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRepeat()) {
        oprot.writeFieldBegin(REPEAT_FIELD_DESC);
        oprot.writeBool(struct.repeat);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRepeatCooldown()) {
        oprot.writeFieldBegin(REPEAT_COOLDOWN_FIELD_DESC);
        oprot.writeI64(struct.repeatCooldown);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRepeatLimit()) {
        oprot.writeFieldBegin(REPEAT_LIMIT_FIELD_DESC);
        oprot.writeI64(struct.repeatLimit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRepeatDays()) {
        oprot.writeFieldBegin(REPEAT_DAYS_FIELD_DESC);
        oprot.writeI64(struct.repeatDays);
        oprot.writeFieldEnd();
      }
      if (struct.actionTitle != null) {
        if (struct.isSetActionTitle()) {
          oprot.writeFieldBegin(ACTION_TITLE_FIELD_DESC);
          oprot.writeString(struct.actionTitle);
          oprot.writeFieldEnd();
        }
      }
      if (struct.actionText != null) {
        if (struct.isSetActionText()) {
          oprot.writeFieldBegin(ACTION_TEXT_FIELD_DESC);
          oprot.writeString(struct.actionText);
          oprot.writeFieldEnd();
        }
      }
      if (struct.items != null) {
        oprot.writeFieldBegin(ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.items.size()));
          for (QuestionnaireItem _iter159 : struct.items)
          {
            _iter159.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuestionnaireTupleSchemeFactory implements SchemeFactory {
    public QuestionnaireTupleScheme getScheme() {
      return new QuestionnaireTupleScheme();
    }
  }

  private static class QuestionnaireTupleScheme extends TupleScheme<Questionnaire> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Questionnaire struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      {
        oprot.writeI32(struct.items.size());
        for (QuestionnaireItem _iter160 : struct.items)
        {
          _iter160.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetPrerequisites()) {
        optionals.set(0);
      }
      if (struct.isSetCooldown()) {
        optionals.set(1);
      }
      if (struct.isSetExpirationDate()) {
        optionals.set(2);
      }
      if (struct.isSetNewUserLimit()) {
        optionals.set(3);
      }
      if (struct.isSetRepeat()) {
        optionals.set(4);
      }
      if (struct.isSetRepeatCooldown()) {
        optionals.set(5);
      }
      if (struct.isSetRepeatLimit()) {
        optionals.set(6);
      }
      if (struct.isSetRepeatDays()) {
        optionals.set(7);
      }
      if (struct.isSetActionTitle()) {
        optionals.set(8);
      }
      if (struct.isSetActionText()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetPrerequisites()) {
        {
          oprot.writeI32(struct.prerequisites.size());
          for (int _iter161 : struct.prerequisites)
          {
            oprot.writeI32(_iter161);
          }
        }
      }
      if (struct.isSetCooldown()) {
        oprot.writeI64(struct.cooldown);
      }
      if (struct.isSetExpirationDate()) {
        oprot.writeI64(struct.expirationDate);
      }
      if (struct.isSetNewUserLimit()) {
        oprot.writeI64(struct.newUserLimit);
      }
      if (struct.isSetRepeat()) {
        oprot.writeBool(struct.repeat);
      }
      if (struct.isSetRepeatCooldown()) {
        oprot.writeI64(struct.repeatCooldown);
      }
      if (struct.isSetRepeatLimit()) {
        oprot.writeI64(struct.repeatLimit);
      }
      if (struct.isSetRepeatDays()) {
        oprot.writeI64(struct.repeatDays);
      }
      if (struct.isSetActionTitle()) {
        oprot.writeString(struct.actionTitle);
      }
      if (struct.isSetActionText()) {
        oprot.writeString(struct.actionText);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Questionnaire struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list162 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.items = new ArrayList<QuestionnaireItem>(_list162.size);
        QuestionnaireItem _elem163;
        for (int _i164 = 0; _i164 < _list162.size; ++_i164)
        {
          _elem163 = new QuestionnaireItem();
          _elem163.read(iprot);
          struct.items.add(_elem163);
        }
      }
      struct.setItemsIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.prerequisites = new ArrayList<Integer>(_list165.size);
          int _elem166;
          for (int _i167 = 0; _i167 < _list165.size; ++_i167)
          {
            _elem166 = iprot.readI32();
            struct.prerequisites.add(_elem166);
          }
        }
        struct.setPrerequisitesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cooldown = iprot.readI64();
        struct.setCooldownIsSet(true);
      }
      if (incoming.get(2)) {
        struct.expirationDate = iprot.readI64();
        struct.setExpirationDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.newUserLimit = iprot.readI64();
        struct.setNewUserLimitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.repeat = iprot.readBool();
        struct.setRepeatIsSet(true);
      }
      if (incoming.get(5)) {
        struct.repeatCooldown = iprot.readI64();
        struct.setRepeatCooldownIsSet(true);
      }
      if (incoming.get(6)) {
        struct.repeatLimit = iprot.readI64();
        struct.setRepeatLimitIsSet(true);
      }
      if (incoming.get(7)) {
        struct.repeatDays = iprot.readI64();
        struct.setRepeatDaysIsSet(true);
      }
      if (incoming.get(8)) {
        struct.actionTitle = iprot.readString();
        struct.setActionTitleIsSet(true);
      }
      if (incoming.get(9)) {
        struct.actionText = iprot.readString();
        struct.setActionTextIsSet(true);
      }
    }
  }

}

