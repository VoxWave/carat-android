/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.amplab.carat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-02-14")
public class BatteryDetails implements org.apache.thrift.TBase<BatteryDetails, BatteryDetails._Fields>, java.io.Serializable, Cloneable, Comparable<BatteryDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BatteryDetails");

  private static final org.apache.thrift.protocol.TField BATTERY_CHARGER_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryCharger", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BATTERY_HEALTH_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryHealth", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BATTERY_VOLTAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryVoltage", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField BATTERY_TEMPERATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryTemperature", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField BATTERY_TECHNOLOGY_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryTechnology", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BATTERY_CAPACITY_FIELD_DESC = new org.apache.thrift.protocol.TField("batteryCapacity", org.apache.thrift.protocol.TType.DOUBLE, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new BatteryDetailsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new BatteryDetailsTupleSchemeFactory();

  public java.lang.String batteryCharger; // optional
  public java.lang.String batteryHealth; // optional
  public double batteryVoltage; // optional
  public double batteryTemperature; // optional
  public java.lang.String batteryTechnology; // optional
  public double batteryCapacity; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BATTERY_CHARGER((short)1, "batteryCharger"),
    BATTERY_HEALTH((short)2, "batteryHealth"),
    BATTERY_VOLTAGE((short)3, "batteryVoltage"),
    BATTERY_TEMPERATURE((short)4, "batteryTemperature"),
    BATTERY_TECHNOLOGY((short)5, "batteryTechnology"),
    BATTERY_CAPACITY((short)6, "batteryCapacity");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BATTERY_CHARGER
          return BATTERY_CHARGER;
        case 2: // BATTERY_HEALTH
          return BATTERY_HEALTH;
        case 3: // BATTERY_VOLTAGE
          return BATTERY_VOLTAGE;
        case 4: // BATTERY_TEMPERATURE
          return BATTERY_TEMPERATURE;
        case 5: // BATTERY_TECHNOLOGY
          return BATTERY_TECHNOLOGY;
        case 6: // BATTERY_CAPACITY
          return BATTERY_CAPACITY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BATTERYVOLTAGE_ISSET_ID = 0;
  private static final int __BATTERYTEMPERATURE_ISSET_ID = 1;
  private static final int __BATTERYCAPACITY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BATTERY_CHARGER,_Fields.BATTERY_HEALTH,_Fields.BATTERY_VOLTAGE,_Fields.BATTERY_TEMPERATURE,_Fields.BATTERY_TECHNOLOGY,_Fields.BATTERY_CAPACITY};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BATTERY_CHARGER, new org.apache.thrift.meta_data.FieldMetaData("batteryCharger", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATTERY_HEALTH, new org.apache.thrift.meta_data.FieldMetaData("batteryHealth", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATTERY_VOLTAGE, new org.apache.thrift.meta_data.FieldMetaData("batteryVoltage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BATTERY_TEMPERATURE, new org.apache.thrift.meta_data.FieldMetaData("batteryTemperature", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BATTERY_TECHNOLOGY, new org.apache.thrift.meta_data.FieldMetaData("batteryTechnology", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATTERY_CAPACITY, new org.apache.thrift.meta_data.FieldMetaData("batteryCapacity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BatteryDetails.class, metaDataMap);
  }

  public BatteryDetails() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BatteryDetails(BatteryDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBatteryCharger()) {
      this.batteryCharger = other.batteryCharger;
    }
    if (other.isSetBatteryHealth()) {
      this.batteryHealth = other.batteryHealth;
    }
    this.batteryVoltage = other.batteryVoltage;
    this.batteryTemperature = other.batteryTemperature;
    if (other.isSetBatteryTechnology()) {
      this.batteryTechnology = other.batteryTechnology;
    }
    this.batteryCapacity = other.batteryCapacity;
  }

  public BatteryDetails deepCopy() {
    return new BatteryDetails(this);
  }

  @Override
  public void clear() {
    this.batteryCharger = null;
    this.batteryHealth = null;
    setBatteryVoltageIsSet(false);
    this.batteryVoltage = 0.0;
    setBatteryTemperatureIsSet(false);
    this.batteryTemperature = 0.0;
    this.batteryTechnology = null;
    setBatteryCapacityIsSet(false);
    this.batteryCapacity = 0.0;
  }

  public java.lang.String getBatteryCharger() {
    return this.batteryCharger;
  }

  public BatteryDetails setBatteryCharger(java.lang.String batteryCharger) {
    this.batteryCharger = batteryCharger;
    return this;
  }

  public void unsetBatteryCharger() {
    this.batteryCharger = null;
  }

  /** Returns true if field batteryCharger is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryCharger() {
    return this.batteryCharger != null;
  }

  public void setBatteryChargerIsSet(boolean value) {
    if (!value) {
      this.batteryCharger = null;
    }
  }

  public java.lang.String getBatteryHealth() {
    return this.batteryHealth;
  }

  public BatteryDetails setBatteryHealth(java.lang.String batteryHealth) {
    this.batteryHealth = batteryHealth;
    return this;
  }

  public void unsetBatteryHealth() {
    this.batteryHealth = null;
  }

  /** Returns true if field batteryHealth is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryHealth() {
    return this.batteryHealth != null;
  }

  public void setBatteryHealthIsSet(boolean value) {
    if (!value) {
      this.batteryHealth = null;
    }
  }

  public double getBatteryVoltage() {
    return this.batteryVoltage;
  }

  public BatteryDetails setBatteryVoltage(double batteryVoltage) {
    this.batteryVoltage = batteryVoltage;
    setBatteryVoltageIsSet(true);
    return this;
  }

  public void unsetBatteryVoltage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BATTERYVOLTAGE_ISSET_ID);
  }

  /** Returns true if field batteryVoltage is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryVoltage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BATTERYVOLTAGE_ISSET_ID);
  }

  public void setBatteryVoltageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BATTERYVOLTAGE_ISSET_ID, value);
  }

  public double getBatteryTemperature() {
    return this.batteryTemperature;
  }

  public BatteryDetails setBatteryTemperature(double batteryTemperature) {
    this.batteryTemperature = batteryTemperature;
    setBatteryTemperatureIsSet(true);
    return this;
  }

  public void unsetBatteryTemperature() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BATTERYTEMPERATURE_ISSET_ID);
  }

  /** Returns true if field batteryTemperature is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryTemperature() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BATTERYTEMPERATURE_ISSET_ID);
  }

  public void setBatteryTemperatureIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BATTERYTEMPERATURE_ISSET_ID, value);
  }

  public java.lang.String getBatteryTechnology() {
    return this.batteryTechnology;
  }

  public BatteryDetails setBatteryTechnology(java.lang.String batteryTechnology) {
    this.batteryTechnology = batteryTechnology;
    return this;
  }

  public void unsetBatteryTechnology() {
    this.batteryTechnology = null;
  }

  /** Returns true if field batteryTechnology is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryTechnology() {
    return this.batteryTechnology != null;
  }

  public void setBatteryTechnologyIsSet(boolean value) {
    if (!value) {
      this.batteryTechnology = null;
    }
  }

  public double getBatteryCapacity() {
    return this.batteryCapacity;
  }

  public BatteryDetails setBatteryCapacity(double batteryCapacity) {
    this.batteryCapacity = batteryCapacity;
    setBatteryCapacityIsSet(true);
    return this;
  }

  public void unsetBatteryCapacity() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BATTERYCAPACITY_ISSET_ID);
  }

  /** Returns true if field batteryCapacity is set (has been assigned a value) and false otherwise */
  public boolean isSetBatteryCapacity() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BATTERYCAPACITY_ISSET_ID);
  }

  public void setBatteryCapacityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BATTERYCAPACITY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BATTERY_CHARGER:
      if (value == null) {
        unsetBatteryCharger();
      } else {
        setBatteryCharger((java.lang.String)value);
      }
      break;

    case BATTERY_HEALTH:
      if (value == null) {
        unsetBatteryHealth();
      } else {
        setBatteryHealth((java.lang.String)value);
      }
      break;

    case BATTERY_VOLTAGE:
      if (value == null) {
        unsetBatteryVoltage();
      } else {
        setBatteryVoltage((java.lang.Double)value);
      }
      break;

    case BATTERY_TEMPERATURE:
      if (value == null) {
        unsetBatteryTemperature();
      } else {
        setBatteryTemperature((java.lang.Double)value);
      }
      break;

    case BATTERY_TECHNOLOGY:
      if (value == null) {
        unsetBatteryTechnology();
      } else {
        setBatteryTechnology((java.lang.String)value);
      }
      break;

    case BATTERY_CAPACITY:
      if (value == null) {
        unsetBatteryCapacity();
      } else {
        setBatteryCapacity((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BATTERY_CHARGER:
      return getBatteryCharger();

    case BATTERY_HEALTH:
      return getBatteryHealth();

    case BATTERY_VOLTAGE:
      return getBatteryVoltage();

    case BATTERY_TEMPERATURE:
      return getBatteryTemperature();

    case BATTERY_TECHNOLOGY:
      return getBatteryTechnology();

    case BATTERY_CAPACITY:
      return getBatteryCapacity();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BATTERY_CHARGER:
      return isSetBatteryCharger();
    case BATTERY_HEALTH:
      return isSetBatteryHealth();
    case BATTERY_VOLTAGE:
      return isSetBatteryVoltage();
    case BATTERY_TEMPERATURE:
      return isSetBatteryTemperature();
    case BATTERY_TECHNOLOGY:
      return isSetBatteryTechnology();
    case BATTERY_CAPACITY:
      return isSetBatteryCapacity();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof BatteryDetails)
      return this.equals((BatteryDetails)that);
    return false;
  }

  public boolean equals(BatteryDetails that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_batteryCharger = true && this.isSetBatteryCharger();
    boolean that_present_batteryCharger = true && that.isSetBatteryCharger();
    if (this_present_batteryCharger || that_present_batteryCharger) {
      if (!(this_present_batteryCharger && that_present_batteryCharger))
        return false;
      if (!this.batteryCharger.equals(that.batteryCharger))
        return false;
    }

    boolean this_present_batteryHealth = true && this.isSetBatteryHealth();
    boolean that_present_batteryHealth = true && that.isSetBatteryHealth();
    if (this_present_batteryHealth || that_present_batteryHealth) {
      if (!(this_present_batteryHealth && that_present_batteryHealth))
        return false;
      if (!this.batteryHealth.equals(that.batteryHealth))
        return false;
    }

    boolean this_present_batteryVoltage = true && this.isSetBatteryVoltage();
    boolean that_present_batteryVoltage = true && that.isSetBatteryVoltage();
    if (this_present_batteryVoltage || that_present_batteryVoltage) {
      if (!(this_present_batteryVoltage && that_present_batteryVoltage))
        return false;
      if (this.batteryVoltage != that.batteryVoltage)
        return false;
    }

    boolean this_present_batteryTemperature = true && this.isSetBatteryTemperature();
    boolean that_present_batteryTemperature = true && that.isSetBatteryTemperature();
    if (this_present_batteryTemperature || that_present_batteryTemperature) {
      if (!(this_present_batteryTemperature && that_present_batteryTemperature))
        return false;
      if (this.batteryTemperature != that.batteryTemperature)
        return false;
    }

    boolean this_present_batteryTechnology = true && this.isSetBatteryTechnology();
    boolean that_present_batteryTechnology = true && that.isSetBatteryTechnology();
    if (this_present_batteryTechnology || that_present_batteryTechnology) {
      if (!(this_present_batteryTechnology && that_present_batteryTechnology))
        return false;
      if (!this.batteryTechnology.equals(that.batteryTechnology))
        return false;
    }

    boolean this_present_batteryCapacity = true && this.isSetBatteryCapacity();
    boolean that_present_batteryCapacity = true && that.isSetBatteryCapacity();
    if (this_present_batteryCapacity || that_present_batteryCapacity) {
      if (!(this_present_batteryCapacity && that_present_batteryCapacity))
        return false;
      if (this.batteryCapacity != that.batteryCapacity)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBatteryCharger()) ? 131071 : 524287);
    if (isSetBatteryCharger())
      hashCode = hashCode * 8191 + batteryCharger.hashCode();

    hashCode = hashCode * 8191 + ((isSetBatteryHealth()) ? 131071 : 524287);
    if (isSetBatteryHealth())
      hashCode = hashCode * 8191 + batteryHealth.hashCode();

    hashCode = hashCode * 8191 + ((isSetBatteryVoltage()) ? 131071 : 524287);
    if (isSetBatteryVoltage())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(batteryVoltage);

    hashCode = hashCode * 8191 + ((isSetBatteryTemperature()) ? 131071 : 524287);
    if (isSetBatteryTemperature())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(batteryTemperature);

    hashCode = hashCode * 8191 + ((isSetBatteryTechnology()) ? 131071 : 524287);
    if (isSetBatteryTechnology())
      hashCode = hashCode * 8191 + batteryTechnology.hashCode();

    hashCode = hashCode * 8191 + ((isSetBatteryCapacity()) ? 131071 : 524287);
    if (isSetBatteryCapacity())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(batteryCapacity);

    return hashCode;
  }

  @Override
  public int compareTo(BatteryDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBatteryCharger()).compareTo(other.isSetBatteryCharger());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryCharger()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryCharger, other.batteryCharger);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBatteryHealth()).compareTo(other.isSetBatteryHealth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryHealth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryHealth, other.batteryHealth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBatteryVoltage()).compareTo(other.isSetBatteryVoltage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryVoltage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryVoltage, other.batteryVoltage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBatteryTemperature()).compareTo(other.isSetBatteryTemperature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryTemperature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryTemperature, other.batteryTemperature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBatteryTechnology()).compareTo(other.isSetBatteryTechnology());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryTechnology()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryTechnology, other.batteryTechnology);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBatteryCapacity()).compareTo(other.isSetBatteryCapacity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatteryCapacity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batteryCapacity, other.batteryCapacity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("BatteryDetails(");
    boolean first = true;

    if (isSetBatteryCharger()) {
      sb.append("batteryCharger:");
      if (this.batteryCharger == null) {
        sb.append("null");
      } else {
        sb.append(this.batteryCharger);
      }
      first = false;
    }
    if (isSetBatteryHealth()) {
      if (!first) sb.append(", ");
      sb.append("batteryHealth:");
      if (this.batteryHealth == null) {
        sb.append("null");
      } else {
        sb.append(this.batteryHealth);
      }
      first = false;
    }
    if (isSetBatteryVoltage()) {
      if (!first) sb.append(", ");
      sb.append("batteryVoltage:");
      sb.append(this.batteryVoltage);
      first = false;
    }
    if (isSetBatteryTemperature()) {
      if (!first) sb.append(", ");
      sb.append("batteryTemperature:");
      sb.append(this.batteryTemperature);
      first = false;
    }
    if (isSetBatteryTechnology()) {
      if (!first) sb.append(", ");
      sb.append("batteryTechnology:");
      if (this.batteryTechnology == null) {
        sb.append("null");
      } else {
        sb.append(this.batteryTechnology);
      }
      first = false;
    }
    if (isSetBatteryCapacity()) {
      if (!first) sb.append(", ");
      sb.append("batteryCapacity:");
      sb.append(this.batteryCapacity);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BatteryDetailsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BatteryDetailsStandardScheme getScheme() {
      return new BatteryDetailsStandardScheme();
    }
  }

  private static class BatteryDetailsStandardScheme extends org.apache.thrift.scheme.StandardScheme<BatteryDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BatteryDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BATTERY_CHARGER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batteryCharger = iprot.readString();
              struct.setBatteryChargerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BATTERY_HEALTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batteryHealth = iprot.readString();
              struct.setBatteryHealthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BATTERY_VOLTAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.batteryVoltage = iprot.readDouble();
              struct.setBatteryVoltageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BATTERY_TEMPERATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.batteryTemperature = iprot.readDouble();
              struct.setBatteryTemperatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BATTERY_TECHNOLOGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batteryTechnology = iprot.readString();
              struct.setBatteryTechnologyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BATTERY_CAPACITY
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.batteryCapacity = iprot.readDouble();
              struct.setBatteryCapacityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BatteryDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.batteryCharger != null) {
        if (struct.isSetBatteryCharger()) {
          oprot.writeFieldBegin(BATTERY_CHARGER_FIELD_DESC);
          oprot.writeString(struct.batteryCharger);
          oprot.writeFieldEnd();
        }
      }
      if (struct.batteryHealth != null) {
        if (struct.isSetBatteryHealth()) {
          oprot.writeFieldBegin(BATTERY_HEALTH_FIELD_DESC);
          oprot.writeString(struct.batteryHealth);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBatteryVoltage()) {
        oprot.writeFieldBegin(BATTERY_VOLTAGE_FIELD_DESC);
        oprot.writeDouble(struct.batteryVoltage);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBatteryTemperature()) {
        oprot.writeFieldBegin(BATTERY_TEMPERATURE_FIELD_DESC);
        oprot.writeDouble(struct.batteryTemperature);
        oprot.writeFieldEnd();
      }
      if (struct.batteryTechnology != null) {
        if (struct.isSetBatteryTechnology()) {
          oprot.writeFieldBegin(BATTERY_TECHNOLOGY_FIELD_DESC);
          oprot.writeString(struct.batteryTechnology);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBatteryCapacity()) {
        oprot.writeFieldBegin(BATTERY_CAPACITY_FIELD_DESC);
        oprot.writeDouble(struct.batteryCapacity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BatteryDetailsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public BatteryDetailsTupleScheme getScheme() {
      return new BatteryDetailsTupleScheme();
    }
  }

  private static class BatteryDetailsTupleScheme extends org.apache.thrift.scheme.TupleScheme<BatteryDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BatteryDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBatteryCharger()) {
        optionals.set(0);
      }
      if (struct.isSetBatteryHealth()) {
        optionals.set(1);
      }
      if (struct.isSetBatteryVoltage()) {
        optionals.set(2);
      }
      if (struct.isSetBatteryTemperature()) {
        optionals.set(3);
      }
      if (struct.isSetBatteryTechnology()) {
        optionals.set(4);
      }
      if (struct.isSetBatteryCapacity()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetBatteryCharger()) {
        oprot.writeString(struct.batteryCharger);
      }
      if (struct.isSetBatteryHealth()) {
        oprot.writeString(struct.batteryHealth);
      }
      if (struct.isSetBatteryVoltage()) {
        oprot.writeDouble(struct.batteryVoltage);
      }
      if (struct.isSetBatteryTemperature()) {
        oprot.writeDouble(struct.batteryTemperature);
      }
      if (struct.isSetBatteryTechnology()) {
        oprot.writeString(struct.batteryTechnology);
      }
      if (struct.isSetBatteryCapacity()) {
        oprot.writeDouble(struct.batteryCapacity);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BatteryDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.batteryCharger = iprot.readString();
        struct.setBatteryChargerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.batteryHealth = iprot.readString();
        struct.setBatteryHealthIsSet(true);
      }
      if (incoming.get(2)) {
        struct.batteryVoltage = iprot.readDouble();
        struct.setBatteryVoltageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.batteryTemperature = iprot.readDouble();
        struct.setBatteryTemperatureIsSet(true);
      }
      if (incoming.get(4)) {
        struct.batteryTechnology = iprot.readString();
        struct.setBatteryTechnologyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.batteryCapacity = iprot.readDouble();
        struct.setBatteryCapacityIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

