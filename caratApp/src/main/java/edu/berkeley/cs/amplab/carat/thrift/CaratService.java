/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.berkeley.cs.amplab.carat.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-02-14")
public class CaratService {

  public interface Iface {

    public void registerMe(Registration registration) throws org.apache.thrift.TException;

    public boolean uploadSample(Sample sample) throws org.apache.thrift.TException;

    public Reports getReports(java.lang.String uuId, java.util.List<Feature> features) throws org.apache.thrift.TException;

    public HogBugReport getHogOrBugReport(java.lang.String uuId, java.util.List<Feature> features) throws org.apache.thrift.TException;

    public HogBugReport getQuickHogsAndMaybeRegister(Registration registration, java.util.List<java.lang.String> processList) throws org.apache.thrift.TException;

    public java.util.List<Questionnaire> getQuestionnaires(java.lang.String uuId) throws org.apache.thrift.TException;

    public boolean uploadAnswers(Answers answers) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void registerMe(Registration registration, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void uploadSample(Sample sample, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getReports(java.lang.String uuId, java.util.List<Feature> features, org.apache.thrift.async.AsyncMethodCallback<Reports> resultHandler) throws org.apache.thrift.TException;

    public void getHogOrBugReport(java.lang.String uuId, java.util.List<Feature> features, org.apache.thrift.async.AsyncMethodCallback<HogBugReport> resultHandler) throws org.apache.thrift.TException;

    public void getQuickHogsAndMaybeRegister(Registration registration, java.util.List<java.lang.String> processList, org.apache.thrift.async.AsyncMethodCallback<HogBugReport> resultHandler) throws org.apache.thrift.TException;

    public void getQuestionnaires(java.lang.String uuId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Questionnaire>> resultHandler) throws org.apache.thrift.TException;

    public void uploadAnswers(Answers answers, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void registerMe(Registration registration) throws org.apache.thrift.TException
    {
      send_registerMe(registration);
    }

    public void send_registerMe(Registration registration) throws org.apache.thrift.TException
    {
      registerMe_args args = new registerMe_args();
      args.setRegistration(registration);
      sendBaseOneway("registerMe", args);
    }

    public boolean uploadSample(Sample sample) throws org.apache.thrift.TException
    {
      send_uploadSample(sample);
      return recv_uploadSample();
    }

    public void send_uploadSample(Sample sample) throws org.apache.thrift.TException
    {
      uploadSample_args args = new uploadSample_args();
      args.setSample(sample);
      sendBase("uploadSample", args);
    }

    public boolean recv_uploadSample() throws org.apache.thrift.TException
    {
      uploadSample_result result = new uploadSample_result();
      receiveBase(result, "uploadSample");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadSample failed: unknown result");
    }

    public Reports getReports(java.lang.String uuId, java.util.List<Feature> features) throws org.apache.thrift.TException
    {
      send_getReports(uuId, features);
      return recv_getReports();
    }

    public void send_getReports(java.lang.String uuId, java.util.List<Feature> features) throws org.apache.thrift.TException
    {
      getReports_args args = new getReports_args();
      args.setUuId(uuId);
      args.setFeatures(features);
      sendBase("getReports", args);
    }

    public Reports recv_getReports() throws org.apache.thrift.TException
    {
      getReports_result result = new getReports_result();
      receiveBase(result, "getReports");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReports failed: unknown result");
    }

    public HogBugReport getHogOrBugReport(java.lang.String uuId, java.util.List<Feature> features) throws org.apache.thrift.TException
    {
      send_getHogOrBugReport(uuId, features);
      return recv_getHogOrBugReport();
    }

    public void send_getHogOrBugReport(java.lang.String uuId, java.util.List<Feature> features) throws org.apache.thrift.TException
    {
      getHogOrBugReport_args args = new getHogOrBugReport_args();
      args.setUuId(uuId);
      args.setFeatures(features);
      sendBase("getHogOrBugReport", args);
    }

    public HogBugReport recv_getHogOrBugReport() throws org.apache.thrift.TException
    {
      getHogOrBugReport_result result = new getHogOrBugReport_result();
      receiveBase(result, "getHogOrBugReport");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getHogOrBugReport failed: unknown result");
    }

    public HogBugReport getQuickHogsAndMaybeRegister(Registration registration, java.util.List<java.lang.String> processList) throws org.apache.thrift.TException
    {
      send_getQuickHogsAndMaybeRegister(registration, processList);
      return recv_getQuickHogsAndMaybeRegister();
    }

    public void send_getQuickHogsAndMaybeRegister(Registration registration, java.util.List<java.lang.String> processList) throws org.apache.thrift.TException
    {
      getQuickHogsAndMaybeRegister_args args = new getQuickHogsAndMaybeRegister_args();
      args.setRegistration(registration);
      args.setProcessList(processList);
      sendBase("getQuickHogsAndMaybeRegister", args);
    }

    public HogBugReport recv_getQuickHogsAndMaybeRegister() throws org.apache.thrift.TException
    {
      getQuickHogsAndMaybeRegister_result result = new getQuickHogsAndMaybeRegister_result();
      receiveBase(result, "getQuickHogsAndMaybeRegister");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQuickHogsAndMaybeRegister failed: unknown result");
    }

    public java.util.List<Questionnaire> getQuestionnaires(java.lang.String uuId) throws org.apache.thrift.TException
    {
      send_getQuestionnaires(uuId);
      return recv_getQuestionnaires();
    }

    public void send_getQuestionnaires(java.lang.String uuId) throws org.apache.thrift.TException
    {
      getQuestionnaires_args args = new getQuestionnaires_args();
      args.setUuId(uuId);
      sendBase("getQuestionnaires", args);
    }

    public java.util.List<Questionnaire> recv_getQuestionnaires() throws org.apache.thrift.TException
    {
      getQuestionnaires_result result = new getQuestionnaires_result();
      receiveBase(result, "getQuestionnaires");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQuestionnaires failed: unknown result");
    }

    public boolean uploadAnswers(Answers answers) throws org.apache.thrift.TException
    {
      send_uploadAnswers(answers);
      return recv_uploadAnswers();
    }

    public void send_uploadAnswers(Answers answers) throws org.apache.thrift.TException
    {
      uploadAnswers_args args = new uploadAnswers_args();
      args.setAnswers(answers);
      sendBase("uploadAnswers", args);
    }

    public boolean recv_uploadAnswers() throws org.apache.thrift.TException
    {
      uploadAnswers_result result = new uploadAnswers_result();
      receiveBase(result, "uploadAnswers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadAnswers failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void registerMe(Registration registration, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerMe_call method_call = new registerMe_call(registration, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerMe_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private Registration registration;
      public registerMe_call(Registration registration, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.registration = registration;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerMe", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
        registerMe_args args = new registerMe_args();
        args.setRegistration(registration);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void uploadSample(Sample sample, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadSample_call method_call = new uploadSample_call(sample, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadSample_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Sample sample;
      public uploadSample_call(Sample sample, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sample = sample;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadSample", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadSample_args args = new uploadSample_args();
        args.setSample(sample);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadSample();
      }
    }

    public void getReports(java.lang.String uuId, java.util.List<Feature> features, org.apache.thrift.async.AsyncMethodCallback<Reports> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReports_call method_call = new getReports_call(uuId, features, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReports_call extends org.apache.thrift.async.TAsyncMethodCall<Reports> {
      private java.lang.String uuId;
      private java.util.List<Feature> features;
      public getReports_call(java.lang.String uuId, java.util.List<Feature> features, org.apache.thrift.async.AsyncMethodCallback<Reports> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uuId = uuId;
        this.features = features;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReports", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReports_args args = new getReports_args();
        args.setUuId(uuId);
        args.setFeatures(features);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Reports getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReports();
      }
    }

    public void getHogOrBugReport(java.lang.String uuId, java.util.List<Feature> features, org.apache.thrift.async.AsyncMethodCallback<HogBugReport> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getHogOrBugReport_call method_call = new getHogOrBugReport_call(uuId, features, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getHogOrBugReport_call extends org.apache.thrift.async.TAsyncMethodCall<HogBugReport> {
      private java.lang.String uuId;
      private java.util.List<Feature> features;
      public getHogOrBugReport_call(java.lang.String uuId, java.util.List<Feature> features, org.apache.thrift.async.AsyncMethodCallback<HogBugReport> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uuId = uuId;
        this.features = features;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getHogOrBugReport", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getHogOrBugReport_args args = new getHogOrBugReport_args();
        args.setUuId(uuId);
        args.setFeatures(features);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HogBugReport getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getHogOrBugReport();
      }
    }

    public void getQuickHogsAndMaybeRegister(Registration registration, java.util.List<java.lang.String> processList, org.apache.thrift.async.AsyncMethodCallback<HogBugReport> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getQuickHogsAndMaybeRegister_call method_call = new getQuickHogsAndMaybeRegister_call(registration, processList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQuickHogsAndMaybeRegister_call extends org.apache.thrift.async.TAsyncMethodCall<HogBugReport> {
      private Registration registration;
      private java.util.List<java.lang.String> processList;
      public getQuickHogsAndMaybeRegister_call(Registration registration, java.util.List<java.lang.String> processList, org.apache.thrift.async.AsyncMethodCallback<HogBugReport> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.registration = registration;
        this.processList = processList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQuickHogsAndMaybeRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQuickHogsAndMaybeRegister_args args = new getQuickHogsAndMaybeRegister_args();
        args.setRegistration(registration);
        args.setProcessList(processList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HogBugReport getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQuickHogsAndMaybeRegister();
      }
    }

    public void getQuestionnaires(java.lang.String uuId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Questionnaire>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getQuestionnaires_call method_call = new getQuestionnaires_call(uuId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQuestionnaires_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Questionnaire>> {
      private java.lang.String uuId;
      public getQuestionnaires_call(java.lang.String uuId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Questionnaire>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uuId = uuId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQuestionnaires", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQuestionnaires_args args = new getQuestionnaires_args();
        args.setUuId(uuId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Questionnaire> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQuestionnaires();
      }
    }

    public void uploadAnswers(Answers answers, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadAnswers_call method_call = new uploadAnswers_call(answers, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadAnswers_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private Answers answers;
      public uploadAnswers_call(Answers answers, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.answers = answers;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadAnswers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadAnswers_args args = new uploadAnswers_args();
        args.setAnswers(answers);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadAnswers();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("registerMe", new registerMe());
      processMap.put("uploadSample", new uploadSample());
      processMap.put("getReports", new getReports());
      processMap.put("getHogOrBugReport", new getHogOrBugReport());
      processMap.put("getQuickHogsAndMaybeRegister", new getQuickHogsAndMaybeRegister());
      processMap.put("getQuestionnaires", new getQuestionnaires());
      processMap.put("uploadAnswers", new uploadAnswers());
      return processMap;
    }

    public static class registerMe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerMe_args> {
      public registerMe() {
        super("registerMe");
      }

      public registerMe_args getEmptyArgsInstance() {
        return new registerMe_args();
      }

      protected boolean isOneway() {
        return true;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public org.apache.thrift.TBase getResult(I iface, registerMe_args args) throws org.apache.thrift.TException {
        iface.registerMe(args.registration);
        return null;
      }
    }

    public static class uploadSample<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadSample_args> {
      public uploadSample() {
        super("uploadSample");
      }

      public uploadSample_args getEmptyArgsInstance() {
        return new uploadSample_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public uploadSample_result getResult(I iface, uploadSample_args args) throws org.apache.thrift.TException {
        uploadSample_result result = new uploadSample_result();
        result.success = iface.uploadSample(args.sample);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getReports<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReports_args> {
      public getReports() {
        super("getReports");
      }

      public getReports_args getEmptyArgsInstance() {
        return new getReports_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getReports_result getResult(I iface, getReports_args args) throws org.apache.thrift.TException {
        getReports_result result = new getReports_result();
        result.success = iface.getReports(args.uuId, args.features);
        return result;
      }
    }

    public static class getHogOrBugReport<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getHogOrBugReport_args> {
      public getHogOrBugReport() {
        super("getHogOrBugReport");
      }

      public getHogOrBugReport_args getEmptyArgsInstance() {
        return new getHogOrBugReport_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getHogOrBugReport_result getResult(I iface, getHogOrBugReport_args args) throws org.apache.thrift.TException {
        getHogOrBugReport_result result = new getHogOrBugReport_result();
        result.success = iface.getHogOrBugReport(args.uuId, args.features);
        return result;
      }
    }

    public static class getQuickHogsAndMaybeRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQuickHogsAndMaybeRegister_args> {
      public getQuickHogsAndMaybeRegister() {
        super("getQuickHogsAndMaybeRegister");
      }

      public getQuickHogsAndMaybeRegister_args getEmptyArgsInstance() {
        return new getQuickHogsAndMaybeRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getQuickHogsAndMaybeRegister_result getResult(I iface, getQuickHogsAndMaybeRegister_args args) throws org.apache.thrift.TException {
        getQuickHogsAndMaybeRegister_result result = new getQuickHogsAndMaybeRegister_result();
        result.success = iface.getQuickHogsAndMaybeRegister(args.registration, args.processList);
        return result;
      }
    }

    public static class getQuestionnaires<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQuestionnaires_args> {
      public getQuestionnaires() {
        super("getQuestionnaires");
      }

      public getQuestionnaires_args getEmptyArgsInstance() {
        return new getQuestionnaires_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getQuestionnaires_result getResult(I iface, getQuestionnaires_args args) throws org.apache.thrift.TException {
        getQuestionnaires_result result = new getQuestionnaires_result();
        result.success = iface.getQuestionnaires(args.uuId);
        return result;
      }
    }

    public static class uploadAnswers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadAnswers_args> {
      public uploadAnswers() {
        super("uploadAnswers");
      }

      public uploadAnswers_args getEmptyArgsInstance() {
        return new uploadAnswers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public uploadAnswers_result getResult(I iface, uploadAnswers_args args) throws org.apache.thrift.TException {
        uploadAnswers_result result = new uploadAnswers_result();
        result.success = iface.uploadAnswers(args.answers);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("registerMe", new registerMe());
      processMap.put("uploadSample", new uploadSample());
      processMap.put("getReports", new getReports());
      processMap.put("getHogOrBugReport", new getHogOrBugReport());
      processMap.put("getQuickHogsAndMaybeRegister", new getQuickHogsAndMaybeRegister());
      processMap.put("getQuestionnaires", new getQuestionnaires());
      processMap.put("uploadAnswers", new uploadAnswers());
      return processMap;
    }

    public static class registerMe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerMe_args, Void> {
      public registerMe() {
        super("registerMe");
      }

      public registerMe_args getEmptyArgsInstance() {
        return new registerMe_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(java.lang.Exception e) {
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
            } else {
              _LOGGER.error("Exception inside oneway handler", e);
            }
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, registerMe_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.registerMe(args.registration,resultHandler);
      }
    }

    public static class uploadSample<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadSample_args, java.lang.Boolean> {
      public uploadSample() {
        super("uploadSample");
      }

      public uploadSample_args getEmptyArgsInstance() {
        return new uploadSample_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            uploadSample_result result = new uploadSample_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            uploadSample_result result = new uploadSample_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadSample_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.uploadSample(args.sample,resultHandler);
      }
    }

    public static class getReports<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getReports_args, Reports> {
      public getReports() {
        super("getReports");
      }

      public getReports_args getEmptyArgsInstance() {
        return new getReports_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Reports> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Reports>() { 
          public void onComplete(Reports o) {
            getReports_result result = new getReports_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getReports_result result = new getReports_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getReports_args args, org.apache.thrift.async.AsyncMethodCallback<Reports> resultHandler) throws org.apache.thrift.TException {
        iface.getReports(args.uuId, args.features,resultHandler);
      }
    }

    public static class getHogOrBugReport<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getHogOrBugReport_args, HogBugReport> {
      public getHogOrBugReport() {
        super("getHogOrBugReport");
      }

      public getHogOrBugReport_args getEmptyArgsInstance() {
        return new getHogOrBugReport_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<HogBugReport> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<HogBugReport>() { 
          public void onComplete(HogBugReport o) {
            getHogOrBugReport_result result = new getHogOrBugReport_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getHogOrBugReport_result result = new getHogOrBugReport_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getHogOrBugReport_args args, org.apache.thrift.async.AsyncMethodCallback<HogBugReport> resultHandler) throws org.apache.thrift.TException {
        iface.getHogOrBugReport(args.uuId, args.features,resultHandler);
      }
    }

    public static class getQuickHogsAndMaybeRegister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getQuickHogsAndMaybeRegister_args, HogBugReport> {
      public getQuickHogsAndMaybeRegister() {
        super("getQuickHogsAndMaybeRegister");
      }

      public getQuickHogsAndMaybeRegister_args getEmptyArgsInstance() {
        return new getQuickHogsAndMaybeRegister_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<HogBugReport> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<HogBugReport>() { 
          public void onComplete(HogBugReport o) {
            getQuickHogsAndMaybeRegister_result result = new getQuickHogsAndMaybeRegister_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getQuickHogsAndMaybeRegister_result result = new getQuickHogsAndMaybeRegister_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getQuickHogsAndMaybeRegister_args args, org.apache.thrift.async.AsyncMethodCallback<HogBugReport> resultHandler) throws org.apache.thrift.TException {
        iface.getQuickHogsAndMaybeRegister(args.registration, args.processList,resultHandler);
      }
    }

    public static class getQuestionnaires<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getQuestionnaires_args, java.util.List<Questionnaire>> {
      public getQuestionnaires() {
        super("getQuestionnaires");
      }

      public getQuestionnaires_args getEmptyArgsInstance() {
        return new getQuestionnaires_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Questionnaire>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Questionnaire>>() { 
          public void onComplete(java.util.List<Questionnaire> o) {
            getQuestionnaires_result result = new getQuestionnaires_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getQuestionnaires_result result = new getQuestionnaires_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getQuestionnaires_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Questionnaire>> resultHandler) throws org.apache.thrift.TException {
        iface.getQuestionnaires(args.uuId,resultHandler);
      }
    }

    public static class uploadAnswers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadAnswers_args, java.lang.Boolean> {
      public uploadAnswers() {
        super("uploadAnswers");
      }

      public uploadAnswers_args getEmptyArgsInstance() {
        return new uploadAnswers_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            uploadAnswers_result result = new uploadAnswers_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            uploadAnswers_result result = new uploadAnswers_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadAnswers_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.uploadAnswers(args.answers,resultHandler);
      }
    }

  }

  public static class registerMe_args implements org.apache.thrift.TBase<registerMe_args, registerMe_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerMe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerMe_args");

    private static final org.apache.thrift.protocol.TField REGISTRATION_FIELD_DESC = new org.apache.thrift.protocol.TField("registration", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerMe_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerMe_argsTupleSchemeFactory();

    public Registration registration; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTRATION((short)1, "registration");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTRATION
            return REGISTRATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTRATION, new org.apache.thrift.meta_data.FieldMetaData("registration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Registration.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerMe_args.class, metaDataMap);
    }

    public registerMe_args() {
    }

    public registerMe_args(
      Registration registration)
    {
      this();
      this.registration = registration;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerMe_args(registerMe_args other) {
      if (other.isSetRegistration()) {
        this.registration = new Registration(other.registration);
      }
    }

    public registerMe_args deepCopy() {
      return new registerMe_args(this);
    }

    @Override
    public void clear() {
      this.registration = null;
    }

    public Registration getRegistration() {
      return this.registration;
    }

    public registerMe_args setRegistration(Registration registration) {
      this.registration = registration;
      return this;
    }

    public void unsetRegistration() {
      this.registration = null;
    }

    /** Returns true if field registration is set (has been assigned a value) and false otherwise */
    public boolean isSetRegistration() {
      return this.registration != null;
    }

    public void setRegistrationIsSet(boolean value) {
      if (!value) {
        this.registration = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REGISTRATION:
        if (value == null) {
          unsetRegistration();
        } else {
          setRegistration((Registration)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTRATION:
        return getRegistration();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REGISTRATION:
        return isSetRegistration();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerMe_args)
        return this.equals((registerMe_args)that);
      return false;
    }

    public boolean equals(registerMe_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_registration = true && this.isSetRegistration();
      boolean that_present_registration = true && that.isSetRegistration();
      if (this_present_registration || that_present_registration) {
        if (!(this_present_registration && that_present_registration))
          return false;
        if (!this.registration.equals(that.registration))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRegistration()) ? 131071 : 524287);
      if (isSetRegistration())
        hashCode = hashCode * 8191 + registration.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerMe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRegistration()).compareTo(other.isSetRegistration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegistration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registration, other.registration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerMe_args(");
      boolean first = true;

      sb.append("registration:");
      if (this.registration == null) {
        sb.append("null");
      } else {
        sb.append(this.registration);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (registration != null) {
        registration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerMe_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerMe_argsStandardScheme getScheme() {
        return new registerMe_argsStandardScheme();
      }
    }

    private static class registerMe_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerMe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerMe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTRATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registration = new Registration();
                struct.registration.read(iprot);
                struct.setRegistrationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerMe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.registration != null) {
          oprot.writeFieldBegin(REGISTRATION_FIELD_DESC);
          struct.registration.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerMe_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerMe_argsTupleScheme getScheme() {
        return new registerMe_argsTupleScheme();
      }
    }

    private static class registerMe_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerMe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerMe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRegistration()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRegistration()) {
          struct.registration.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerMe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.registration = new Registration();
          struct.registration.read(iprot);
          struct.setRegistrationIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class uploadSample_args implements org.apache.thrift.TBase<uploadSample_args, uploadSample_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadSample_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadSample_args");

    private static final org.apache.thrift.protocol.TField SAMPLE_FIELD_DESC = new org.apache.thrift.protocol.TField("sample", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadSample_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadSample_argsTupleSchemeFactory();

    public Sample sample; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SAMPLE((short)1, "sample");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SAMPLE
            return SAMPLE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SAMPLE, new org.apache.thrift.meta_data.FieldMetaData("sample", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Sample.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadSample_args.class, metaDataMap);
    }

    public uploadSample_args() {
    }

    public uploadSample_args(
      Sample sample)
    {
      this();
      this.sample = sample;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadSample_args(uploadSample_args other) {
      if (other.isSetSample()) {
        this.sample = new Sample(other.sample);
      }
    }

    public uploadSample_args deepCopy() {
      return new uploadSample_args(this);
    }

    @Override
    public void clear() {
      this.sample = null;
    }

    public Sample getSample() {
      return this.sample;
    }

    public uploadSample_args setSample(Sample sample) {
      this.sample = sample;
      return this;
    }

    public void unsetSample() {
      this.sample = null;
    }

    /** Returns true if field sample is set (has been assigned a value) and false otherwise */
    public boolean isSetSample() {
      return this.sample != null;
    }

    public void setSampleIsSet(boolean value) {
      if (!value) {
        this.sample = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SAMPLE:
        if (value == null) {
          unsetSample();
        } else {
          setSample((Sample)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SAMPLE:
        return getSample();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SAMPLE:
        return isSetSample();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadSample_args)
        return this.equals((uploadSample_args)that);
      return false;
    }

    public boolean equals(uploadSample_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sample = true && this.isSetSample();
      boolean that_present_sample = true && that.isSetSample();
      if (this_present_sample || that_present_sample) {
        if (!(this_present_sample && that_present_sample))
          return false;
        if (!this.sample.equals(that.sample))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSample()) ? 131071 : 524287);
      if (isSetSample())
        hashCode = hashCode * 8191 + sample.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(uploadSample_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSample()).compareTo(other.isSetSample());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSample()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sample, other.sample);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uploadSample_args(");
      boolean first = true;

      sb.append("sample:");
      if (this.sample == null) {
        sb.append("null");
      } else {
        sb.append(this.sample);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (sample != null) {
        sample.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadSample_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadSample_argsStandardScheme getScheme() {
        return new uploadSample_argsStandardScheme();
      }
    }

    private static class uploadSample_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadSample_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadSample_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SAMPLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sample = new Sample();
                struct.sample.read(iprot);
                struct.setSampleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadSample_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sample != null) {
          oprot.writeFieldBegin(SAMPLE_FIELD_DESC);
          struct.sample.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadSample_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadSample_argsTupleScheme getScheme() {
        return new uploadSample_argsTupleScheme();
      }
    }

    private static class uploadSample_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadSample_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadSample_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSample()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSample()) {
          struct.sample.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadSample_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sample = new Sample();
          struct.sample.read(iprot);
          struct.setSampleIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class uploadSample_result implements org.apache.thrift.TBase<uploadSample_result, uploadSample_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadSample_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadSample_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadSample_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadSample_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadSample_result.class, metaDataMap);
    }

    public uploadSample_result() {
    }

    public uploadSample_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadSample_result(uploadSample_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public uploadSample_result deepCopy() {
      return new uploadSample_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public uploadSample_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadSample_result)
        return this.equals((uploadSample_result)that);
      return false;
    }

    public boolean equals(uploadSample_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(uploadSample_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uploadSample_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadSample_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadSample_resultStandardScheme getScheme() {
        return new uploadSample_resultStandardScheme();
      }
    }

    private static class uploadSample_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadSample_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadSample_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadSample_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadSample_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadSample_resultTupleScheme getScheme() {
        return new uploadSample_resultTupleScheme();
      }
    }

    private static class uploadSample_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadSample_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadSample_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadSample_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getReports_args implements org.apache.thrift.TBase<getReports_args, getReports_args._Fields>, java.io.Serializable, Cloneable, Comparable<getReports_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReports_args");

    private static final org.apache.thrift.protocol.TField UU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("features", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReports_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReports_argsTupleSchemeFactory();

    public java.lang.String uuId; // required
    public java.util.List<Feature> features; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UU_ID((short)1, "uuId"),
      FEATURES((short)2, "features");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UU_ID
            return UU_ID;
          case 2: // FEATURES
            return FEATURES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UU_ID, new org.apache.thrift.meta_data.FieldMetaData("uuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEATURES, new org.apache.thrift.meta_data.FieldMetaData("features", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "FeatureList")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReports_args.class, metaDataMap);
    }

    public getReports_args() {
    }

    public getReports_args(
      java.lang.String uuId,
      java.util.List<Feature> features)
    {
      this();
      this.uuId = uuId;
      this.features = features;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReports_args(getReports_args other) {
      if (other.isSetUuId()) {
        this.uuId = other.uuId;
      }
      if (other.isSetFeatures()) {
        java.util.List<Feature> __this__features = new java.util.ArrayList<Feature>(other.features.size());
        for (Feature other_element : other.features) {
          __this__features.add(new Feature(other_element));
        }
        this.features = __this__features;
      }
    }

    public getReports_args deepCopy() {
      return new getReports_args(this);
    }

    @Override
    public void clear() {
      this.uuId = null;
      this.features = null;
    }

    public java.lang.String getUuId() {
      return this.uuId;
    }

    public getReports_args setUuId(java.lang.String uuId) {
      this.uuId = uuId;
      return this;
    }

    public void unsetUuId() {
      this.uuId = null;
    }

    /** Returns true if field uuId is set (has been assigned a value) and false otherwise */
    public boolean isSetUuId() {
      return this.uuId != null;
    }

    public void setUuIdIsSet(boolean value) {
      if (!value) {
        this.uuId = null;
      }
    }

    public int getFeaturesSize() {
      return (this.features == null) ? 0 : this.features.size();
    }

    public java.util.Iterator<Feature> getFeaturesIterator() {
      return (this.features == null) ? null : this.features.iterator();
    }

    public void addToFeatures(Feature elem) {
      if (this.features == null) {
        this.features = new java.util.ArrayList<Feature>();
      }
      this.features.add(elem);
    }

    public java.util.List<Feature> getFeatures() {
      return this.features;
    }

    public getReports_args setFeatures(java.util.List<Feature> features) {
      this.features = features;
      return this;
    }

    public void unsetFeatures() {
      this.features = null;
    }

    /** Returns true if field features is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatures() {
      return this.features != null;
    }

    public void setFeaturesIsSet(boolean value) {
      if (!value) {
        this.features = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UU_ID:
        if (value == null) {
          unsetUuId();
        } else {
          setUuId((java.lang.String)value);
        }
        break;

      case FEATURES:
        if (value == null) {
          unsetFeatures();
        } else {
          setFeatures((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UU_ID:
        return getUuId();

      case FEATURES:
        return getFeatures();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UU_ID:
        return isSetUuId();
      case FEATURES:
        return isSetFeatures();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getReports_args)
        return this.equals((getReports_args)that);
      return false;
    }

    public boolean equals(getReports_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uuId = true && this.isSetUuId();
      boolean that_present_uuId = true && that.isSetUuId();
      if (this_present_uuId || that_present_uuId) {
        if (!(this_present_uuId && that_present_uuId))
          return false;
        if (!this.uuId.equals(that.uuId))
          return false;
      }

      boolean this_present_features = true && this.isSetFeatures();
      boolean that_present_features = true && that.isSetFeatures();
      if (this_present_features || that_present_features) {
        if (!(this_present_features && that_present_features))
          return false;
        if (!this.features.equals(that.features))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUuId()) ? 131071 : 524287);
      if (isSetUuId())
        hashCode = hashCode * 8191 + uuId.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeatures()) ? 131071 : 524287);
      if (isSetFeatures())
        hashCode = hashCode * 8191 + features.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getReports_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUuId()).compareTo(other.isSetUuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuId, other.uuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeatures()).compareTo(other.isSetFeatures());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatures()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.features, other.features);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReports_args(");
      boolean first = true;

      sb.append("uuId:");
      if (this.uuId == null) {
        sb.append("null");
      } else {
        sb.append(this.uuId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("features:");
      if (this.features == null) {
        sb.append("null");
      } else {
        sb.append(this.features);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReports_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReports_argsStandardScheme getScheme() {
        return new getReports_argsStandardScheme();
      }
    }

    private static class getReports_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReports_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReports_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uuId = iprot.readString();
                struct.setUuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEATURES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.features = new java.util.ArrayList<Feature>(_list184.size);
                  Feature _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = new Feature();
                    _elem185.read(iprot);
                    struct.features.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setFeaturesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReports_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uuId != null) {
          oprot.writeFieldBegin(UU_ID_FIELD_DESC);
          oprot.writeString(struct.uuId);
          oprot.writeFieldEnd();
        }
        if (struct.features != null) {
          oprot.writeFieldBegin(FEATURES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.features.size()));
            for (Feature _iter187 : struct.features)
            {
              _iter187.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReports_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReports_argsTupleScheme getScheme() {
        return new getReports_argsTupleScheme();
      }
    }

    private static class getReports_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReports_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReports_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUuId()) {
          optionals.set(0);
        }
        if (struct.isSetFeatures()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUuId()) {
          oprot.writeString(struct.uuId);
        }
        if (struct.isSetFeatures()) {
          {
            oprot.writeI32(struct.features.size());
            for (Feature _iter188 : struct.features)
            {
              _iter188.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReports_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uuId = iprot.readString();
          struct.setUuIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.features = new java.util.ArrayList<Feature>(_list189.size);
            Feature _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = new Feature();
              _elem190.read(iprot);
              struct.features.add(_elem190);
            }
          }
          struct.setFeaturesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getReports_result implements org.apache.thrift.TBase<getReports_result, getReports_result._Fields>, java.io.Serializable, Cloneable, Comparable<getReports_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReports_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getReports_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getReports_resultTupleSchemeFactory();

    public Reports success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Reports.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReports_result.class, metaDataMap);
    }

    public getReports_result() {
    }

    public getReports_result(
      Reports success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReports_result(getReports_result other) {
      if (other.isSetSuccess()) {
        this.success = new Reports(other.success);
      }
    }

    public getReports_result deepCopy() {
      return new getReports_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Reports getSuccess() {
      return this.success;
    }

    public getReports_result setSuccess(Reports success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Reports)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getReports_result)
        return this.equals((getReports_result)that);
      return false;
    }

    public boolean equals(getReports_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getReports_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getReports_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReports_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReports_resultStandardScheme getScheme() {
        return new getReports_resultStandardScheme();
      }
    }

    private static class getReports_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getReports_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReports_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Reports();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReports_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReports_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getReports_resultTupleScheme getScheme() {
        return new getReports_resultTupleScheme();
      }
    }

    private static class getReports_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getReports_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReports_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReports_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Reports();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getHogOrBugReport_args implements org.apache.thrift.TBase<getHogOrBugReport_args, getHogOrBugReport_args._Fields>, java.io.Serializable, Cloneable, Comparable<getHogOrBugReport_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHogOrBugReport_args");

    private static final org.apache.thrift.protocol.TField UU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("features", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHogOrBugReport_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHogOrBugReport_argsTupleSchemeFactory();

    public java.lang.String uuId; // required
    public java.util.List<Feature> features; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UU_ID((short)1, "uuId"),
      FEATURES((short)2, "features");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UU_ID
            return UU_ID;
          case 2: // FEATURES
            return FEATURES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UU_ID, new org.apache.thrift.meta_data.FieldMetaData("uuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FEATURES, new org.apache.thrift.meta_data.FieldMetaData("features", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST          , "FeatureList")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHogOrBugReport_args.class, metaDataMap);
    }

    public getHogOrBugReport_args() {
    }

    public getHogOrBugReport_args(
      java.lang.String uuId,
      java.util.List<Feature> features)
    {
      this();
      this.uuId = uuId;
      this.features = features;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHogOrBugReport_args(getHogOrBugReport_args other) {
      if (other.isSetUuId()) {
        this.uuId = other.uuId;
      }
      if (other.isSetFeatures()) {
        java.util.List<Feature> __this__features = new java.util.ArrayList<Feature>(other.features.size());
        for (Feature other_element : other.features) {
          __this__features.add(new Feature(other_element));
        }
        this.features = __this__features;
      }
    }

    public getHogOrBugReport_args deepCopy() {
      return new getHogOrBugReport_args(this);
    }

    @Override
    public void clear() {
      this.uuId = null;
      this.features = null;
    }

    public java.lang.String getUuId() {
      return this.uuId;
    }

    public getHogOrBugReport_args setUuId(java.lang.String uuId) {
      this.uuId = uuId;
      return this;
    }

    public void unsetUuId() {
      this.uuId = null;
    }

    /** Returns true if field uuId is set (has been assigned a value) and false otherwise */
    public boolean isSetUuId() {
      return this.uuId != null;
    }

    public void setUuIdIsSet(boolean value) {
      if (!value) {
        this.uuId = null;
      }
    }

    public int getFeaturesSize() {
      return (this.features == null) ? 0 : this.features.size();
    }

    public java.util.Iterator<Feature> getFeaturesIterator() {
      return (this.features == null) ? null : this.features.iterator();
    }

    public void addToFeatures(Feature elem) {
      if (this.features == null) {
        this.features = new java.util.ArrayList<Feature>();
      }
      this.features.add(elem);
    }

    public java.util.List<Feature> getFeatures() {
      return this.features;
    }

    public getHogOrBugReport_args setFeatures(java.util.List<Feature> features) {
      this.features = features;
      return this;
    }

    public void unsetFeatures() {
      this.features = null;
    }

    /** Returns true if field features is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatures() {
      return this.features != null;
    }

    public void setFeaturesIsSet(boolean value) {
      if (!value) {
        this.features = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UU_ID:
        if (value == null) {
          unsetUuId();
        } else {
          setUuId((java.lang.String)value);
        }
        break;

      case FEATURES:
        if (value == null) {
          unsetFeatures();
        } else {
          setFeatures((java.util.List<Feature>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UU_ID:
        return getUuId();

      case FEATURES:
        return getFeatures();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UU_ID:
        return isSetUuId();
      case FEATURES:
        return isSetFeatures();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getHogOrBugReport_args)
        return this.equals((getHogOrBugReport_args)that);
      return false;
    }

    public boolean equals(getHogOrBugReport_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uuId = true && this.isSetUuId();
      boolean that_present_uuId = true && that.isSetUuId();
      if (this_present_uuId || that_present_uuId) {
        if (!(this_present_uuId && that_present_uuId))
          return false;
        if (!this.uuId.equals(that.uuId))
          return false;
      }

      boolean this_present_features = true && this.isSetFeatures();
      boolean that_present_features = true && that.isSetFeatures();
      if (this_present_features || that_present_features) {
        if (!(this_present_features && that_present_features))
          return false;
        if (!this.features.equals(that.features))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUuId()) ? 131071 : 524287);
      if (isSetUuId())
        hashCode = hashCode * 8191 + uuId.hashCode();

      hashCode = hashCode * 8191 + ((isSetFeatures()) ? 131071 : 524287);
      if (isSetFeatures())
        hashCode = hashCode * 8191 + features.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getHogOrBugReport_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUuId()).compareTo(other.isSetUuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuId, other.uuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFeatures()).compareTo(other.isSetFeatures());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatures()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.features, other.features);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getHogOrBugReport_args(");
      boolean first = true;

      sb.append("uuId:");
      if (this.uuId == null) {
        sb.append("null");
      } else {
        sb.append(this.uuId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("features:");
      if (this.features == null) {
        sb.append("null");
      } else {
        sb.append(this.features);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHogOrBugReport_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHogOrBugReport_argsStandardScheme getScheme() {
        return new getHogOrBugReport_argsStandardScheme();
      }
    }

    private static class getHogOrBugReport_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHogOrBugReport_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHogOrBugReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uuId = iprot.readString();
                struct.setUuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FEATURES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.features = new java.util.ArrayList<Feature>(_list192.size);
                  Feature _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    _elem193 = new Feature();
                    _elem193.read(iprot);
                    struct.features.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setFeaturesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHogOrBugReport_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uuId != null) {
          oprot.writeFieldBegin(UU_ID_FIELD_DESC);
          oprot.writeString(struct.uuId);
          oprot.writeFieldEnd();
        }
        if (struct.features != null) {
          oprot.writeFieldBegin(FEATURES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.features.size()));
            for (Feature _iter195 : struct.features)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHogOrBugReport_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHogOrBugReport_argsTupleScheme getScheme() {
        return new getHogOrBugReport_argsTupleScheme();
      }
    }

    private static class getHogOrBugReport_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHogOrBugReport_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHogOrBugReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUuId()) {
          optionals.set(0);
        }
        if (struct.isSetFeatures()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUuId()) {
          oprot.writeString(struct.uuId);
        }
        if (struct.isSetFeatures()) {
          {
            oprot.writeI32(struct.features.size());
            for (Feature _iter196 : struct.features)
            {
              _iter196.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHogOrBugReport_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uuId = iprot.readString();
          struct.setUuIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.features = new java.util.ArrayList<Feature>(_list197.size);
            Feature _elem198;
            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
            {
              _elem198 = new Feature();
              _elem198.read(iprot);
              struct.features.add(_elem198);
            }
          }
          struct.setFeaturesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getHogOrBugReport_result implements org.apache.thrift.TBase<getHogOrBugReport_result, getHogOrBugReport_result._Fields>, java.io.Serializable, Cloneable, Comparable<getHogOrBugReport_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getHogOrBugReport_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getHogOrBugReport_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getHogOrBugReport_resultTupleSchemeFactory();

    public HogBugReport success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HogBugReport.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getHogOrBugReport_result.class, metaDataMap);
    }

    public getHogOrBugReport_result() {
    }

    public getHogOrBugReport_result(
      HogBugReport success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHogOrBugReport_result(getHogOrBugReport_result other) {
      if (other.isSetSuccess()) {
        this.success = new HogBugReport(other.success);
      }
    }

    public getHogOrBugReport_result deepCopy() {
      return new getHogOrBugReport_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public HogBugReport getSuccess() {
      return this.success;
    }

    public getHogOrBugReport_result setSuccess(HogBugReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HogBugReport)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getHogOrBugReport_result)
        return this.equals((getHogOrBugReport_result)that);
      return false;
    }

    public boolean equals(getHogOrBugReport_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getHogOrBugReport_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getHogOrBugReport_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getHogOrBugReport_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHogOrBugReport_resultStandardScheme getScheme() {
        return new getHogOrBugReport_resultStandardScheme();
      }
    }

    private static class getHogOrBugReport_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getHogOrBugReport_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getHogOrBugReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HogBugReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getHogOrBugReport_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getHogOrBugReport_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getHogOrBugReport_resultTupleScheme getScheme() {
        return new getHogOrBugReport_resultTupleScheme();
      }
    }

    private static class getHogOrBugReport_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getHogOrBugReport_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getHogOrBugReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getHogOrBugReport_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HogBugReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getQuickHogsAndMaybeRegister_args implements org.apache.thrift.TBase<getQuickHogsAndMaybeRegister_args, getQuickHogsAndMaybeRegister_args._Fields>, java.io.Serializable, Cloneable, Comparable<getQuickHogsAndMaybeRegister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuickHogsAndMaybeRegister_args");

    private static final org.apache.thrift.protocol.TField REGISTRATION_FIELD_DESC = new org.apache.thrift.protocol.TField("registration", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PROCESS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("processList", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getQuickHogsAndMaybeRegister_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getQuickHogsAndMaybeRegister_argsTupleSchemeFactory();

    public Registration registration; // required
    public java.util.List<java.lang.String> processList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REGISTRATION((short)1, "registration"),
      PROCESS_LIST((short)2, "processList");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGISTRATION
            return REGISTRATION;
          case 2: // PROCESS_LIST
            return PROCESS_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGISTRATION, new org.apache.thrift.meta_data.FieldMetaData("registration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Registration.class)));
      tmpMap.put(_Fields.PROCESS_LIST, new org.apache.thrift.meta_data.FieldMetaData("processList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuickHogsAndMaybeRegister_args.class, metaDataMap);
    }

    public getQuickHogsAndMaybeRegister_args() {
    }

    public getQuickHogsAndMaybeRegister_args(
      Registration registration,
      java.util.List<java.lang.String> processList)
    {
      this();
      this.registration = registration;
      this.processList = processList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuickHogsAndMaybeRegister_args(getQuickHogsAndMaybeRegister_args other) {
      if (other.isSetRegistration()) {
        this.registration = new Registration(other.registration);
      }
      if (other.isSetProcessList()) {
        java.util.List<java.lang.String> __this__processList = new java.util.ArrayList<java.lang.String>(other.processList);
        this.processList = __this__processList;
      }
    }

    public getQuickHogsAndMaybeRegister_args deepCopy() {
      return new getQuickHogsAndMaybeRegister_args(this);
    }

    @Override
    public void clear() {
      this.registration = null;
      this.processList = null;
    }

    public Registration getRegistration() {
      return this.registration;
    }

    public getQuickHogsAndMaybeRegister_args setRegistration(Registration registration) {
      this.registration = registration;
      return this;
    }

    public void unsetRegistration() {
      this.registration = null;
    }

    /** Returns true if field registration is set (has been assigned a value) and false otherwise */
    public boolean isSetRegistration() {
      return this.registration != null;
    }

    public void setRegistrationIsSet(boolean value) {
      if (!value) {
        this.registration = null;
      }
    }

    public int getProcessListSize() {
      return (this.processList == null) ? 0 : this.processList.size();
    }

    public java.util.Iterator<java.lang.String> getProcessListIterator() {
      return (this.processList == null) ? null : this.processList.iterator();
    }

    public void addToProcessList(java.lang.String elem) {
      if (this.processList == null) {
        this.processList = new java.util.ArrayList<java.lang.String>();
      }
      this.processList.add(elem);
    }

    public java.util.List<java.lang.String> getProcessList() {
      return this.processList;
    }

    public getQuickHogsAndMaybeRegister_args setProcessList(java.util.List<java.lang.String> processList) {
      this.processList = processList;
      return this;
    }

    public void unsetProcessList() {
      this.processList = null;
    }

    /** Returns true if field processList is set (has been assigned a value) and false otherwise */
    public boolean isSetProcessList() {
      return this.processList != null;
    }

    public void setProcessListIsSet(boolean value) {
      if (!value) {
        this.processList = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case REGISTRATION:
        if (value == null) {
          unsetRegistration();
        } else {
          setRegistration((Registration)value);
        }
        break;

      case PROCESS_LIST:
        if (value == null) {
          unsetProcessList();
        } else {
          setProcessList((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case REGISTRATION:
        return getRegistration();

      case PROCESS_LIST:
        return getProcessList();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case REGISTRATION:
        return isSetRegistration();
      case PROCESS_LIST:
        return isSetProcessList();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuickHogsAndMaybeRegister_args)
        return this.equals((getQuickHogsAndMaybeRegister_args)that);
      return false;
    }

    public boolean equals(getQuickHogsAndMaybeRegister_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_registration = true && this.isSetRegistration();
      boolean that_present_registration = true && that.isSetRegistration();
      if (this_present_registration || that_present_registration) {
        if (!(this_present_registration && that_present_registration))
          return false;
        if (!this.registration.equals(that.registration))
          return false;
      }

      boolean this_present_processList = true && this.isSetProcessList();
      boolean that_present_processList = true && that.isSetProcessList();
      if (this_present_processList || that_present_processList) {
        if (!(this_present_processList && that_present_processList))
          return false;
        if (!this.processList.equals(that.processList))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRegistration()) ? 131071 : 524287);
      if (isSetRegistration())
        hashCode = hashCode * 8191 + registration.hashCode();

      hashCode = hashCode * 8191 + ((isSetProcessList()) ? 131071 : 524287);
      if (isSetProcessList())
        hashCode = hashCode * 8191 + processList.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getQuickHogsAndMaybeRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRegistration()).compareTo(other.isSetRegistration());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegistration()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.registration, other.registration);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProcessList()).compareTo(other.isSetProcessList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProcessList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processList, other.processList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getQuickHogsAndMaybeRegister_args(");
      boolean first = true;

      sb.append("registration:");
      if (this.registration == null) {
        sb.append("null");
      } else {
        sb.append(this.registration);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("processList:");
      if (this.processList == null) {
        sb.append("null");
      } else {
        sb.append(this.processList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (registration != null) {
        registration.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuickHogsAndMaybeRegister_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQuickHogsAndMaybeRegister_argsStandardScheme getScheme() {
        return new getQuickHogsAndMaybeRegister_argsStandardScheme();
      }
    }

    private static class getQuickHogsAndMaybeRegister_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getQuickHogsAndMaybeRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuickHogsAndMaybeRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGISTRATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.registration = new Registration();
                struct.registration.read(iprot);
                struct.setRegistrationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROCESS_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.processList = new java.util.ArrayList<java.lang.String>(_list200.size);
                  java.lang.String _elem201;
                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                  {
                    _elem201 = iprot.readString();
                    struct.processList.add(_elem201);
                  }
                  iprot.readListEnd();
                }
                struct.setProcessListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuickHogsAndMaybeRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.registration != null) {
          oprot.writeFieldBegin(REGISTRATION_FIELD_DESC);
          struct.registration.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.processList != null) {
          oprot.writeFieldBegin(PROCESS_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.processList.size()));
            for (java.lang.String _iter203 : struct.processList)
            {
              oprot.writeString(_iter203);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuickHogsAndMaybeRegister_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQuickHogsAndMaybeRegister_argsTupleScheme getScheme() {
        return new getQuickHogsAndMaybeRegister_argsTupleScheme();
      }
    }

    private static class getQuickHogsAndMaybeRegister_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getQuickHogsAndMaybeRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuickHogsAndMaybeRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRegistration()) {
          optionals.set(0);
        }
        if (struct.isSetProcessList()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRegistration()) {
          struct.registration.write(oprot);
        }
        if (struct.isSetProcessList()) {
          {
            oprot.writeI32(struct.processList.size());
            for (java.lang.String _iter204 : struct.processList)
            {
              oprot.writeString(_iter204);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuickHogsAndMaybeRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.registration = new Registration();
          struct.registration.read(iprot);
          struct.setRegistrationIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.processList = new java.util.ArrayList<java.lang.String>(_list205.size);
            java.lang.String _elem206;
            for (int _i207 = 0; _i207 < _list205.size; ++_i207)
            {
              _elem206 = iprot.readString();
              struct.processList.add(_elem206);
            }
          }
          struct.setProcessListIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getQuickHogsAndMaybeRegister_result implements org.apache.thrift.TBase<getQuickHogsAndMaybeRegister_result, getQuickHogsAndMaybeRegister_result._Fields>, java.io.Serializable, Cloneable, Comparable<getQuickHogsAndMaybeRegister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuickHogsAndMaybeRegister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getQuickHogsAndMaybeRegister_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getQuickHogsAndMaybeRegister_resultTupleSchemeFactory();

    public HogBugReport success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HogBugReport.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuickHogsAndMaybeRegister_result.class, metaDataMap);
    }

    public getQuickHogsAndMaybeRegister_result() {
    }

    public getQuickHogsAndMaybeRegister_result(
      HogBugReport success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuickHogsAndMaybeRegister_result(getQuickHogsAndMaybeRegister_result other) {
      if (other.isSetSuccess()) {
        this.success = new HogBugReport(other.success);
      }
    }

    public getQuickHogsAndMaybeRegister_result deepCopy() {
      return new getQuickHogsAndMaybeRegister_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public HogBugReport getSuccess() {
      return this.success;
    }

    public getQuickHogsAndMaybeRegister_result setSuccess(HogBugReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HogBugReport)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuickHogsAndMaybeRegister_result)
        return this.equals((getQuickHogsAndMaybeRegister_result)that);
      return false;
    }

    public boolean equals(getQuickHogsAndMaybeRegister_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getQuickHogsAndMaybeRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getQuickHogsAndMaybeRegister_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuickHogsAndMaybeRegister_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQuickHogsAndMaybeRegister_resultStandardScheme getScheme() {
        return new getQuickHogsAndMaybeRegister_resultStandardScheme();
      }
    }

    private static class getQuickHogsAndMaybeRegister_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getQuickHogsAndMaybeRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuickHogsAndMaybeRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HogBugReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuickHogsAndMaybeRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuickHogsAndMaybeRegister_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQuickHogsAndMaybeRegister_resultTupleScheme getScheme() {
        return new getQuickHogsAndMaybeRegister_resultTupleScheme();
      }
    }

    private static class getQuickHogsAndMaybeRegister_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getQuickHogsAndMaybeRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuickHogsAndMaybeRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuickHogsAndMaybeRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new HogBugReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getQuestionnaires_args implements org.apache.thrift.TBase<getQuestionnaires_args, getQuestionnaires_args._Fields>, java.io.Serializable, Cloneable, Comparable<getQuestionnaires_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuestionnaires_args");

    private static final org.apache.thrift.protocol.TField UU_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getQuestionnaires_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getQuestionnaires_argsTupleSchemeFactory();

    public java.lang.String uuId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UU_ID((short)1, "uuId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UU_ID
            return UU_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UU_ID, new org.apache.thrift.meta_data.FieldMetaData("uuId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuestionnaires_args.class, metaDataMap);
    }

    public getQuestionnaires_args() {
    }

    public getQuestionnaires_args(
      java.lang.String uuId)
    {
      this();
      this.uuId = uuId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuestionnaires_args(getQuestionnaires_args other) {
      if (other.isSetUuId()) {
        this.uuId = other.uuId;
      }
    }

    public getQuestionnaires_args deepCopy() {
      return new getQuestionnaires_args(this);
    }

    @Override
    public void clear() {
      this.uuId = null;
    }

    public java.lang.String getUuId() {
      return this.uuId;
    }

    public getQuestionnaires_args setUuId(java.lang.String uuId) {
      this.uuId = uuId;
      return this;
    }

    public void unsetUuId() {
      this.uuId = null;
    }

    /** Returns true if field uuId is set (has been assigned a value) and false otherwise */
    public boolean isSetUuId() {
      return this.uuId != null;
    }

    public void setUuIdIsSet(boolean value) {
      if (!value) {
        this.uuId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UU_ID:
        if (value == null) {
          unsetUuId();
        } else {
          setUuId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UU_ID:
        return getUuId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UU_ID:
        return isSetUuId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuestionnaires_args)
        return this.equals((getQuestionnaires_args)that);
      return false;
    }

    public boolean equals(getQuestionnaires_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uuId = true && this.isSetUuId();
      boolean that_present_uuId = true && that.isSetUuId();
      if (this_present_uuId || that_present_uuId) {
        if (!(this_present_uuId && that_present_uuId))
          return false;
        if (!this.uuId.equals(that.uuId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUuId()) ? 131071 : 524287);
      if (isSetUuId())
        hashCode = hashCode * 8191 + uuId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getQuestionnaires_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUuId()).compareTo(other.isSetUuId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUuId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuId, other.uuId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getQuestionnaires_args(");
      boolean first = true;

      sb.append("uuId:");
      if (this.uuId == null) {
        sb.append("null");
      } else {
        sb.append(this.uuId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuestionnaires_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQuestionnaires_argsStandardScheme getScheme() {
        return new getQuestionnaires_argsStandardScheme();
      }
    }

    private static class getQuestionnaires_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getQuestionnaires_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuestionnaires_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UU_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uuId = iprot.readString();
                struct.setUuIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuestionnaires_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uuId != null) {
          oprot.writeFieldBegin(UU_ID_FIELD_DESC);
          oprot.writeString(struct.uuId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuestionnaires_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQuestionnaires_argsTupleScheme getScheme() {
        return new getQuestionnaires_argsTupleScheme();
      }
    }

    private static class getQuestionnaires_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getQuestionnaires_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuestionnaires_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUuId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUuId()) {
          oprot.writeString(struct.uuId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuestionnaires_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uuId = iprot.readString();
          struct.setUuIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getQuestionnaires_result implements org.apache.thrift.TBase<getQuestionnaires_result, getQuestionnaires_result._Fields>, java.io.Serializable, Cloneable, Comparable<getQuestionnaires_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQuestionnaires_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getQuestionnaires_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getQuestionnaires_resultTupleSchemeFactory();

    public java.util.List<Questionnaire> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Questionnaire.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQuestionnaires_result.class, metaDataMap);
    }

    public getQuestionnaires_result() {
    }

    public getQuestionnaires_result(
      java.util.List<Questionnaire> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQuestionnaires_result(getQuestionnaires_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Questionnaire> __this__success = new java.util.ArrayList<Questionnaire>(other.success.size());
        for (Questionnaire other_element : other.success) {
          __this__success.add(new Questionnaire(other_element));
        }
        this.success = __this__success;
      }
    }

    public getQuestionnaires_result deepCopy() {
      return new getQuestionnaires_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Questionnaire> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Questionnaire elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Questionnaire>();
      }
      this.success.add(elem);
    }

    public java.util.List<Questionnaire> getSuccess() {
      return this.success;
    }

    public getQuestionnaires_result setSuccess(java.util.List<Questionnaire> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Questionnaire>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getQuestionnaires_result)
        return this.equals((getQuestionnaires_result)that);
      return false;
    }

    public boolean equals(getQuestionnaires_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getQuestionnaires_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getQuestionnaires_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQuestionnaires_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQuestionnaires_resultStandardScheme getScheme() {
        return new getQuestionnaires_resultStandardScheme();
      }
    }

    private static class getQuestionnaires_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getQuestionnaires_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQuestionnaires_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Questionnaire>(_list208.size);
                  Questionnaire _elem209;
                  for (int _i210 = 0; _i210 < _list208.size; ++_i210)
                  {
                    _elem209 = new Questionnaire();
                    _elem209.read(iprot);
                    struct.success.add(_elem209);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQuestionnaires_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Questionnaire _iter211 : struct.success)
            {
              _iter211.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQuestionnaires_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQuestionnaires_resultTupleScheme getScheme() {
        return new getQuestionnaires_resultTupleScheme();
      }
    }

    private static class getQuestionnaires_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getQuestionnaires_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQuestionnaires_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Questionnaire _iter212 : struct.success)
            {
              _iter212.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQuestionnaires_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list213 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Questionnaire>(_list213.size);
            Questionnaire _elem214;
            for (int _i215 = 0; _i215 < _list213.size; ++_i215)
            {
              _elem214 = new Questionnaire();
              _elem214.read(iprot);
              struct.success.add(_elem214);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class uploadAnswers_args implements org.apache.thrift.TBase<uploadAnswers_args, uploadAnswers_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadAnswers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadAnswers_args");

    private static final org.apache.thrift.protocol.TField ANSWERS_FIELD_DESC = new org.apache.thrift.protocol.TField("answers", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadAnswers_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadAnswers_argsTupleSchemeFactory();

    public Answers answers; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ANSWERS((short)1, "answers");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ANSWERS
            return ANSWERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ANSWERS, new org.apache.thrift.meta_data.FieldMetaData("answers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Answers.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadAnswers_args.class, metaDataMap);
    }

    public uploadAnswers_args() {
    }

    public uploadAnswers_args(
      Answers answers)
    {
      this();
      this.answers = answers;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadAnswers_args(uploadAnswers_args other) {
      if (other.isSetAnswers()) {
        this.answers = new Answers(other.answers);
      }
    }

    public uploadAnswers_args deepCopy() {
      return new uploadAnswers_args(this);
    }

    @Override
    public void clear() {
      this.answers = null;
    }

    public Answers getAnswers() {
      return this.answers;
    }

    public uploadAnswers_args setAnswers(Answers answers) {
      this.answers = answers;
      return this;
    }

    public void unsetAnswers() {
      this.answers = null;
    }

    /** Returns true if field answers is set (has been assigned a value) and false otherwise */
    public boolean isSetAnswers() {
      return this.answers != null;
    }

    public void setAnswersIsSet(boolean value) {
      if (!value) {
        this.answers = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ANSWERS:
        if (value == null) {
          unsetAnswers();
        } else {
          setAnswers((Answers)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ANSWERS:
        return getAnswers();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ANSWERS:
        return isSetAnswers();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadAnswers_args)
        return this.equals((uploadAnswers_args)that);
      return false;
    }

    public boolean equals(uploadAnswers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_answers = true && this.isSetAnswers();
      boolean that_present_answers = true && that.isSetAnswers();
      if (this_present_answers || that_present_answers) {
        if (!(this_present_answers && that_present_answers))
          return false;
        if (!this.answers.equals(that.answers))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAnswers()) ? 131071 : 524287);
      if (isSetAnswers())
        hashCode = hashCode * 8191 + answers.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(uploadAnswers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAnswers()).compareTo(other.isSetAnswers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnswers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answers, other.answers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uploadAnswers_args(");
      boolean first = true;

      sb.append("answers:");
      if (this.answers == null) {
        sb.append("null");
      } else {
        sb.append(this.answers);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (answers != null) {
        answers.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadAnswers_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadAnswers_argsStandardScheme getScheme() {
        return new uploadAnswers_argsStandardScheme();
      }
    }

    private static class uploadAnswers_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadAnswers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadAnswers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ANSWERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.answers = new Answers();
                struct.answers.read(iprot);
                struct.setAnswersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadAnswers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.answers != null) {
          oprot.writeFieldBegin(ANSWERS_FIELD_DESC);
          struct.answers.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadAnswers_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadAnswers_argsTupleScheme getScheme() {
        return new uploadAnswers_argsTupleScheme();
      }
    }

    private static class uploadAnswers_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadAnswers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadAnswers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAnswers()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAnswers()) {
          struct.answers.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadAnswers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.answers = new Answers();
          struct.answers.read(iprot);
          struct.setAnswersIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class uploadAnswers_result implements org.apache.thrift.TBase<uploadAnswers_result, uploadAnswers_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadAnswers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadAnswers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadAnswers_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadAnswers_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadAnswers_result.class, metaDataMap);
    }

    public uploadAnswers_result() {
    }

    public uploadAnswers_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadAnswers_result(uploadAnswers_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public uploadAnswers_result deepCopy() {
      return new uploadAnswers_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public uploadAnswers_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadAnswers_result)
        return this.equals((uploadAnswers_result)that);
      return false;
    }

    public boolean equals(uploadAnswers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(uploadAnswers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uploadAnswers_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadAnswers_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadAnswers_resultStandardScheme getScheme() {
        return new uploadAnswers_resultStandardScheme();
      }
    }

    private static class uploadAnswers_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadAnswers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadAnswers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadAnswers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadAnswers_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadAnswers_resultTupleScheme getScheme() {
        return new uploadAnswers_resultTupleScheme();
      }
    }

    private static class uploadAnswers_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadAnswers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadAnswers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadAnswers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
